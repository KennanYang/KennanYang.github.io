{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/CSDN1.png","path":"images/CSDN1.png","modified":1,"renderable":0},{"_id":"source/images/github.png","path":"images/github.png","modified":1,"renderable":0},{"_id":"source/images/cover1.jpg","path":"images/cover1.jpg","modified":1,"renderable":0},{"_id":"source/images/kennan.jpg","path":"images/kennan.jpg","modified":1,"renderable":0},{"_id":"source/images/kennan2.png","path":"images/kennan2.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-ayer/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/css/custom.styl","path":"css/custom.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/dist/main.css","path":"dist/main.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/dist/main.js","path":"dist/main.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/dz.js","path":"js/dz.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/jquery-3.6.0.min.js","path":"js/jquery-3.6.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/404.jpg","path":"images/404.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/ayer.png","path":"images/ayer.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/beian.png","path":"images/beian.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/forkme.png","path":"images/forkme.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"6cfc04daf71be50dabad20656230981dff31ac5e","modified":1645696178289},{"_id":"source/_posts/000-hello-world.md","hash":"be263849e140cb77a3d80ef7099e69ff0fd08d21","modified":1646182074603},{"_id":"source/about/index.md","hash":"e6732c0f8bb15ae154c2f86912b88532d2a6f499","modified":1645756784597},{"_id":"source/_posts/001-link-to-server.md","hash":"c1b73d0484ee100479bda67ca5aecfd264421c12","modified":1646182105378},{"_id":"source/_posts/002-config-pytorch.md","hash":"4a70de35e0b9c9410f6df98bbdfa8c010a5ff1e6","modified":1646179507546},{"_id":"source/_posts/003-goroutine.md","hash":"00677422c8f1bef8da52a5ee05eb82fa3209e84b","modified":1646182288702},{"_id":"source/categories/index.md","hash":"0ae5a83f4d9f8e55c9b8f1f84138b83ea90815fa","modified":1645713094370},{"_id":"source/friends/index.md","hash":"9e33de96355ac69d813ee7249c86265985d02628","modified":1645713170215},{"_id":"source/images/CSDN1.png","hash":"c4dd025c0c1f2cf7424c0389792afd2e901f7b79","modified":1645714203291},{"_id":"source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1645713703858},{"_id":"source/tags/index.md","hash":"0b365620d7161dc3a9b83ac625cf8f1682b54cd9","modified":1645715561119},{"_id":"source/images/kennan.jpg","hash":"71adc7b4be743af69fa71fbd65083cde724b9f96","modified":1645497263456},{"_id":"source/images/kennan2.png","hash":"bdf914e867d7e669da0242032205eb97896a9a16","modified":1645715971217},{"_id":"source/images/cover1.jpg","hash":"76fd2dc3c73f4a93c425c4416cd93e8a59c62902","modified":1587053818585},{"_id":"themes/hexo-theme-ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1645668621529},{"_id":"themes/hexo-theme-ayer/.npmignore","hash":"13239db7290ce1d6dfc62fb60191a8048c6e5781","modified":1645668621535},{"_id":"themes/hexo-theme-ayer/.gitignore","hash":"8faed9be54528620a8da662ad9f242e7305d6757","modified":1645668621534},{"_id":"themes/hexo-theme-ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1645668621535},{"_id":"themes/hexo-theme-ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":1645668621535},{"_id":"themes/hexo-theme-ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1645668621536},{"_id":"themes/hexo-theme-ayer/README.md","hash":"53be9bba4abd5f4d28ddc8b0a913317531cc4877","modified":1645668621536},{"_id":"themes/hexo-theme-ayer/_config.yml","hash":"a7a3f9f09d56420b6d4cf8262ae29611e5ba9205","modified":1645766516729},{"_id":"themes/hexo-theme-ayer/logo.jpg","hash":"71adc7b4be743af69fa71fbd65083cde724b9f96","modified":1645497263456},{"_id":"themes/hexo-theme-ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1645668621564},{"_id":"themes/hexo-theme-ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1645668621537},{"_id":"themes/hexo-theme-ayer/.github/FUNDING.yml","hash":"56f5ebae29b5bd4551df79f38c09ab452e0ab28f","modified":1645668621530},{"_id":"themes/hexo-theme-ayer/rollup.config.js","hash":"3d98bd1db1dcf2e0878b6fcbbbf8ff9c3da6d357","modified":1645668621565},{"_id":"themes/hexo-theme-ayer/package.json","hash":"1d8d11dc25486874ef5d21dabf9c95f4ff990906","modified":1645668621565},{"_id":"themes/hexo-theme-ayer/.github/config.yml","hash":"d786334df2ea7feca64d07e573055c3452843f8a","modified":1645668621532},{"_id":"themes/hexo-theme-ayer/languages/default.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1645668621538},{"_id":"themes/hexo-theme-ayer/languages/es.yml","hash":"fc27661276313c1c539252517d664359cb286f8a","modified":1645668621539},{"_id":"themes/hexo-theme-ayer/languages/de.yml","hash":"2b7fa47fbe06f6928a43ea3b345ab3aeaa2cee81","modified":1645668621538},{"_id":"themes/hexo-theme-ayer/languages/en.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1645668621539},{"_id":"themes/hexo-theme-ayer/languages/ko.yml","hash":"00db39dd43875774088511b4d467dcb71f1ce8ac","modified":1645668621541},{"_id":"themes/hexo-theme-ayer/languages/fr.yml","hash":"3dac4d53b9b2a1b10c0273ce7472b2e76576dc5a","modified":1645668621540},{"_id":"themes/hexo-theme-ayer/languages/ja.yml","hash":"aea06ea7bcb439d2b84501924cdd092293ee891a","modified":1645668621541},{"_id":"themes/hexo-theme-ayer/languages/no.yml","hash":"fa4d2da9bb00ad0febc631afaf17f76aaa17e950","modified":1645668621542},{"_id":"themes/hexo-theme-ayer/languages/nl.yml","hash":"d619955fd9659a209c58f696ee2160dfe8c6ac41","modified":1645668621541},{"_id":"themes/hexo-theme-ayer/languages/pt.yml","hash":"fa0b3a4a01a0493f3ef402039e394a291a1251fd","modified":1645668621542},{"_id":"themes/hexo-theme-ayer/languages/ru.yml","hash":"45edcadb57176d0b11a839055df1964da8ca08f9","modified":1645668621543},{"_id":"themes/hexo-theme-ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1645668621561},{"_id":"themes/hexo-theme-ayer/languages/vi.yml","hash":"20f25fe0e9017d530a771687fe9d21353e034fff","modified":1645668621543},{"_id":"themes/hexo-theme-ayer/languages/zh-CN.yml","hash":"edf1f8c164f3d166f94e213148e984fdfc3a7c85","modified":1645668621543},{"_id":"themes/hexo-theme-ayer/languages/zh-TW.yml","hash":"750fba5314d340ddb00812fc17a608a084f04462","modified":1645668621544},{"_id":"themes/hexo-theme-ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":1645668621561},{"_id":"themes/hexo-theme-ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1645668621561},{"_id":"themes/hexo-theme-ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1645668621561},{"_id":"themes/hexo-theme-ayer/layout/layout.ejs","hash":"ad2222b1819f763cd981f72b8204a19cb0fa75ae","modified":1645668621562},{"_id":"themes/hexo-theme-ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":1645668621563},{"_id":"themes/hexo-theme-ayer/source/404.html","hash":"4124da2876fbad835c4dbabcc9fc7bd587ea760c","modified":1645668621592},{"_id":"themes/hexo-theme-ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1645668621563},{"_id":"themes/hexo-theme-ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1645668621563},{"_id":"themes/hexo-theme-ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1645668621564},{"_id":"themes/hexo-theme-ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1645668621568},{"_id":"themes/hexo-theme-ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1645668621595},{"_id":"themes/hexo-theme-ayer/source-src/main.js","hash":"fcb7c6c5ffcfd72ba9bd55b475af8a0e74484634","modified":1645668621592},{"_id":"themes/hexo-theme-ayer/.github/ISSUE_TEMPLATE/bug-report.md","hash":"23fa172c797258de232e1a5fd1794ce8a86c984f","modified":1645668621531},{"_id":"themes/hexo-theme-ayer/.github/workflows/npmpublish.yml","hash":"6a748fbb9f13da90a00e35d1e8f54bbe71a14571","modified":1645668621533},{"_id":"themes/hexo-theme-ayer/.github/ISSUE_TEMPLATE/feature-request.md","hash":"ca76e0709f2e97edfa004922da78599ef35eb039","modified":1645668621531},{"_id":"themes/hexo-theme-ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1645668621545},{"_id":"themes/hexo-theme-ayer/.github/ISSUE_TEMPLATE/other.md","hash":"e4c347d70c3b8044eec656e8cfb78cfd49f2d991","modified":1645668621531},{"_id":"themes/hexo-theme-ayer/.github/ISSUE_TEMPLATE/question.md","hash":"20a7174d36e8f090ba7800c08b0c44b15b753736","modified":1645668621532},{"_id":"themes/hexo-theme-ayer/layout/_partial/after-footer.ejs","hash":"e6336c5d5061dd440100e1add829fa1bed19cd70","modified":1645668621545},{"_id":"themes/hexo-theme-ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1645668621545},{"_id":"themes/hexo-theme-ayer/layout/_partial/article.ejs","hash":"ff1f8fd0dce22409038e72097a9582d1bbf4e6e0","modified":1645668621546},{"_id":"themes/hexo-theme-ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":1645668621546},{"_id":"themes/hexo-theme-ayer/layout/_partial/ayer.ejs","hash":"061e5d25789c9a0c3df3172c0c53966053af89d1","modified":1645668621547},{"_id":"themes/hexo-theme-ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1645668621547},{"_id":"themes/hexo-theme-ayer/layout/_partial/float-btns.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1645668621548},{"_id":"themes/hexo-theme-ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":1645668621549},{"_id":"themes/hexo-theme-ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1645668621547},{"_id":"themes/hexo-theme-ayer/layout/_partial/head.ejs","hash":"52fc68c6d75ac19373a839598f970d5d7a08cd80","modified":1645668621549},{"_id":"themes/hexo-theme-ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1645668621548},{"_id":"themes/hexo-theme-ayer/layout/_partial/mathjax.ejs","hash":"bcc264b6d6b58b3b692139c4d8b1381da4820da8","modified":1645668621550},{"_id":"themes/hexo-theme-ayer/layout/_partial/katex.ejs","hash":"02cb9da065cd315a06d62d13872dc687c62e9a1f","modified":1645668621549},{"_id":"themes/hexo-theme-ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1645668621593},{"_id":"themes/hexo-theme-ayer/layout/_partial/lock.ejs","hash":"72ec0a339f98399c5141f4b3aca4cc8e8310f03a","modified":1645668621550},{"_id":"themes/hexo-theme-ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1645668621550},{"_id":"themes/hexo-theme-ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1645668621551},{"_id":"themes/hexo-theme-ayer/source/css/custom.styl","hash":"32990e811ea6fba84673b6d7175c88a3b890b109","modified":1645668621593},{"_id":"themes/hexo-theme-ayer/layout/_partial/viewer.ejs","hash":"219f0a0ec2eb35e8ba27a849639a5f634273fb6f","modified":1645668621561},{"_id":"themes/hexo-theme-ayer/source/dist/main.css","hash":"cedc06200d45eb7b000db1624b2585d7522137bc","modified":1645668621594},{"_id":"themes/hexo-theme-ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1645668621560},{"_id":"themes/hexo-theme-ayer/source/dist/main.js","hash":"4338ca7a7bc35ee139016c91d4746643a3ee01c8","modified":1645668621594},{"_id":"themes/hexo-theme-ayer/source/js/clickBoom1.js","hash":"c97ea1f120dba2c6804d0420186ef5d6f2419b7c","modified":1645668621618},{"_id":"themes/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1645668621618},{"_id":"themes/hexo-theme-ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1645668621619},{"_id":"themes/hexo-theme-ayer/source/js/clickBoom2.js","hash":"2bc7267652ec49cea5dc3a8bd470c7d5ec57c721","modified":1645668621619},{"_id":"themes/hexo-theme-ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1645668621619},{"_id":"themes/hexo-theme-ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1645668621621},{"_id":"themes/hexo-theme-ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1645668621621},{"_id":"themes/hexo-theme-ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1645668621622},{"_id":"themes/hexo-theme-ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1645668621597},{"_id":"themes/hexo-theme-ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1645668621596},{"_id":"themes/hexo-theme-ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1645668621597},{"_id":"themes/hexo-theme-ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1645668621598},{"_id":"themes/hexo-theme-ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1645668621598},{"_id":"themes/hexo-theme-ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1645668621615},{"_id":"themes/hexo-theme-ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1645668621615},{"_id":"themes/hexo-theme-ayer/scripts/events/index.js","hash":"f3a5d9bda901565e3c302bcb5ed716b6d006089e","modified":1645668621569},{"_id":"themes/hexo-theme-ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1645668621615},{"_id":"themes/hexo-theme-ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1645668621572},{"_id":"themes/hexo-theme-ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1645668621616},{"_id":"themes/hexo-theme-ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1645668621570},{"_id":"themes/hexo-theme-ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1645668621572},{"_id":"themes/hexo-theme-ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1645668621571},{"_id":"themes/hexo-theme-ayer/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1645668621575},{"_id":"themes/hexo-theme-ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1645668621573},{"_id":"themes/hexo-theme-ayer/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1645668621574},{"_id":"themes/hexo-theme-ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1645668621576},{"_id":"themes/hexo-theme-ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1645668621576},{"_id":"themes/hexo-theme-ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1645668621577},{"_id":"themes/hexo-theme-ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1645668621577},{"_id":"themes/hexo-theme-ayer/source-src/css/_remixicon.styl","hash":"78f4dd8c613df005d6ecf6a073d96d38bbbe531e","modified":1645668621589},{"_id":"themes/hexo-theme-ayer/source-src/js/ayer.js","hash":"a3d349fb8af029e710d064c15373163680da2d39","modified":1645668621591},{"_id":"themes/hexo-theme-ayer/source-src/css/style.styl","hash":"89dfb772754ee919cb157a6e28d61bbabfe46c8d","modified":1645668621590},{"_id":"themes/hexo-theme-ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1645668621589},{"_id":"themes/hexo-theme-ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":1645668621591},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1645668621552},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":1645668621552},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":1645668621553},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1645668621553},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/clipboard.ejs","hash":"c93d82de1635536a633b6254b604590ab4428594","modified":1645668621553},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1645668621554},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1645668621554},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/gitalk.ejs","hash":"c81d54a9d818fa21ebcab03cfecc3528821ff9a5","modified":1645668621555},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1645668621555},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/minivaline.ejs","hash":"c09ba80cfa41aaac17f0f7ff2586e73241adab20","modified":1645668621556},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1645668621557},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1645668621557},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1645668621557},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1645668621558},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1645668621558},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1645668621558},{"_id":"themes/hexo-theme-ayer/scripts/events/lib/merge-configs.js","hash":"734aac9a53cf168ee51482b02b75954a2a3df150","modified":1645668621570},{"_id":"themes/hexo-theme-ayer/scripts/events/lib/hello.js","hash":"058c73fa3900d143affb9cc7ea0b2105d3925915","modified":1645668621569},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/topping.ejs","hash":"f491555b5f06abb3e3603e37d7ca06bfea637966","modified":1645757576580},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/valine.ejs","hash":"b71f2af08c1916b3c5ef3a553a1df16f1787af24","modified":1645668621560},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/twikoo.ejs","hash":"7f064611a2297dda84e6b329252e838666ac7c93","modified":1645668621559},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1645668621560},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1645668621579},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1645668621578},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1645668621579},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1645668621579},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/article.styl","hash":"659a35544b321a101f7cf114f0c9fdf2cc125625","modified":1645668621580},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/ayer.styl","hash":"38187e5c88eaf1ea099f2ded56f1f60194c95ec4","modified":1645668621580},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1645668621581},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1645668621580},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1645668621581},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1645668621582},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1645668621582},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1645668621582},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1645668621583},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1645668621583},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":1645668621584},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1645668621584},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1645668621583},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1645668621584},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/navbar.styl","hash":"266df43ec4041226f1801719e873265b75fe6515","modified":1645668621585},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1645668621585},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1645668621586},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1645668621586},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1645668621587},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1645668621587},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/tocbot.styl","hash":"130e29937aa750e63e8cf216934dbdd4ea95969f","modified":1645668621588},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1645668621588},{"_id":"themes/hexo-theme-ayer/source/js/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1645668621620},{"_id":"themes/hexo-theme-ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1645668621597},{"_id":"themes/hexo-theme-ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1645668621602},{"_id":"themes/hexo-theme-ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1645668621617},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1645668621588},{"_id":"themes/hexo-theme-ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1645668621614},{"_id":"themes/hexo-theme-ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1645668621567},{"_id":"themes/hexo-theme-ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1645668621600},{"_id":"themes/hexo-theme-ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1645668621604},{"_id":"themes/hexo-theme-ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1645668621608},{"_id":"themes/hexo-theme-ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1645668621613},{"_id":"public/atom.xml","hash":"e777ab6ffdad8ef2b8f62a4191b4157e2975b9d3","modified":1646182337395},{"_id":"public/search.xml","hash":"45c2e5a7d817dd863dafec6eee69cff5430a7cb0","modified":1646182337395},{"_id":"public/categories/index.html","hash":"d5d710fdf0a6683aaf5f6f58bdb9bb709f41ddc1","modified":1646182337395},{"_id":"public/tags/index.html","hash":"6f12e8b8f530362294a5daeeda24b0cf440cc84e","modified":1646182337395},{"_id":"public/friends/index.html","hash":"727a1bf80a5bd4e6f1ce9e4db03944232969b341","modified":1646182337395},{"_id":"public/archives/index.html","hash":"5f981d7ee6bbc234e2d7f5327125dced66369411","modified":1646182337395},{"_id":"public/archives/2022/index.html","hash":"e0d4397180695e830be4ed4d553c4c4c9f75bd69","modified":1646182337395},{"_id":"public/archives/2022/02/index.html","hash":"acb8ce68e6a759e05822303720fc159a609d67dc","modified":1646182337395},{"_id":"public/archives/2022/03/index.html","hash":"bfd6af6fb62519226da602faa60486454d7062c9","modified":1646182337395},{"_id":"public/categories/搭建环境/index.html","hash":"cc972514a212937f43b98eec84c94bf90644b002","modified":1646182337395},{"_id":"public/categories/python/index.html","hash":"76b46dda7d2b50e09bd810665d9f65e9ab33a8da","modified":1646182337395},{"_id":"public/categories/go/index.html","hash":"1b7332cca86fe508489856410ebc4b90e4e01987","modified":1646182337395},{"_id":"public/tags/git/index.html","hash":"8470974a8b0244de162cf01450199a356b451cff","modified":1646182337395},{"_id":"public/tags/服务器/index.html","hash":"253638e1c858b33d22c353d94503a2840ce63270","modified":1646182337395},{"_id":"public/tags/搭建环境/index.html","hash":"c3f55107a7c6680e647f4a6c49c092b387215b69","modified":1646182337395},{"_id":"public/tags/linux/index.html","hash":"4b80cc2de7686930c6c63f98b98eb28e49c14114","modified":1646182337395},{"_id":"public/tags/python/index.html","hash":"6ec92e45d14b47671ea993aa8dba2ded13d7036d","modified":1646182337395},{"_id":"public/tags/go/index.html","hash":"b5a1d3a4dc56355fb91346d6292a8f21cbd0095e","modified":1646182337395},{"_id":"public/tags/并发/index.html","hash":"9bbfb7a684f80dfff6dfce83b7a01f9a70a1a9e0","modified":1646182337395},{"_id":"public/about/index.html","hash":"db473f4ac0a02050dbb2831cd8a5b2e0b9726092","modified":1646182337395},{"_id":"public/2022/03/02/003-goroutine/index.html","hash":"c155fd0d0b4b3266e4d29f3e16ff24bf82440c75","modified":1646182337395},{"_id":"public/2022/02/24/002-config-pytorch/index.html","hash":"2b9d5a0a8fa8cce73309cff3afd0c19241382e86","modified":1646182337395},{"_id":"public/2022/02/24/001-link-to-server/index.html","hash":"30ceb10fd429cd924b026a9c5546efbb5cd670cd","modified":1646182337395},{"_id":"public/2022/02/24/000-hello-world/index.html","hash":"bb1b58b642da4ff61f4e8763b32e90b5adf9c329","modified":1646182337395},{"_id":"public/index.html","hash":"58a909fe58584998d7d4da8931fc7f408c2f3cad","modified":1646182337395},{"_id":"public/CNAME","hash":"6cfc04daf71be50dabad20656230981dff31ac5e","modified":1646182337395},{"_id":"public/images/CSDN1.png","hash":"c4dd025c0c1f2cf7424c0389792afd2e901f7b79","modified":1646182337395},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1646182337395},{"_id":"public/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1646182337395},{"_id":"public/images/kennan.jpg","hash":"71adc7b4be743af69fa71fbd65083cde724b9f96","modified":1646182337395},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1646182337395},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1646182337395},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1646182337395},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1646182337395},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1646182337395},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1646182337395},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1646182337395},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1646182337395},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1646182337395},{"_id":"public/404.html","hash":"dc7103e67e846834f3fdf44f5aed32dfa41e2969","modified":1646182337395},{"_id":"public/css/custom.css","hash":"58950a4f4cd82465f85428ec17b3bc05f8153b56","modified":1646182337395},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1646182337395},{"_id":"public/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1646182337395},{"_id":"public/dist/main.css","hash":"cedc06200d45eb7b000db1624b2585d7522137bc","modified":1646182337395},{"_id":"public/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1646182337395},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1646182337395},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1646182337395},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1646182337395},{"_id":"public/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1646182337395},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1646182337395},{"_id":"public/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1646182337395},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1646182337395},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1646182337395},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1646182337395},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1646182337395},{"_id":"public/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1646182337395},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1646182337395},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1646182337395},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1646182337395},{"_id":"public/images/kennan2.png","hash":"bdf914e867d7e669da0242032205eb97896a9a16","modified":1646182337395},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1646182337395},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1646182337395}],"Category":[{"name":"搭建环境","_id":"cl08uglee0004m8uz4qs87y3q"},{"name":"python","_id":"cl08uglem000cm8uzgrogeew0"},{"name":"go","_id":"cl08uglen000im8uzevw67xc4"}],"Data":[],"Page":[{"title":"About me","date":"2022-02-24T14:14:57.000Z","_content":"\n\n<h1>Kennan Yang<img src=\"/images/kennan.jpg\" width=\"25%\" align =\"right\"></h1>\n<p>2020级计算机硕士研究生在读，热爱学习，热爱生活</p>\n<p>邮箱：yzw1048125026@163.com</p>\n\n\n### 个人经历\n  2014.10-2018.06   东北大学（本科） 软件工程  \n  2019.05-2020.07   上海雅捷信息公司 C++后台开发\n  2020.09-2023.01   复旦大学（专硕） 电子信息（计算机技术）\n### 研究方向\n  计算机视觉，医学图像分割\n### 荣誉奖励\n  1.东北大学三等奖学金\n  2.东北大学优秀毕业生干部\n  3.复旦大学二等奖学金\n  4.复旦大学优秀学生\n  ...\n### 项目研究\n  1.基于CART算法的高校教师亚健康预警系统的设计与实现（本科毕设）\n  *相关技术*：机器学习算法，C++，android移动端开发\n  2.核仿真项目和核安全项目（工作内容）\n  *相关技术*：C/C++和 Fortran基本语法，多线程，flex-bison，socket编程，bat脚本，linux的版本管理和gdb调试\n  3.基于解剖学引导和多视图融合的腹部多器官分割系统（硕士研究方向）\n  *相关技术*：python，基于pytorch的深度学习框架，图像分割算法","source":"about/index.md","raw":"---\ntitle: About me\ndate: 2022-02-24 22:14:57\n---\n\n\n<h1>Kennan Yang<img src=\"/images/kennan.jpg\" width=\"25%\" align =\"right\"></h1>\n<p>2020级计算机硕士研究生在读，热爱学习，热爱生活</p>\n<p>邮箱：yzw1048125026@163.com</p>\n\n\n### 个人经历\n  2014.10-2018.06   东北大学（本科） 软件工程  \n  2019.05-2020.07   上海雅捷信息公司 C++后台开发\n  2020.09-2023.01   复旦大学（专硕） 电子信息（计算机技术）\n### 研究方向\n  计算机视觉，医学图像分割\n### 荣誉奖励\n  1.东北大学三等奖学金\n  2.东北大学优秀毕业生干部\n  3.复旦大学二等奖学金\n  4.复旦大学优秀学生\n  ...\n### 项目研究\n  1.基于CART算法的高校教师亚健康预警系统的设计与实现（本科毕设）\n  *相关技术*：机器学习算法，C++，android移动端开发\n  2.核仿真项目和核安全项目（工作内容）\n  *相关技术*：C/C++和 Fortran基本语法，多线程，flex-bison，socket编程，bat脚本，linux的版本管理和gdb调试\n  3.基于解剖学引导和多视图融合的腹部多器官分割系统（硕士研究方向）\n  *相关技术*：python，基于pytorch的深度学习框架，图像分割算法","updated":"2022-02-25T02:39:44.597Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl08ugle60000m8uz2tnvhrwc","content":"<h1>Kennan Yang<img src=\"/images/kennan.jpg\" width=\"25%\" align =\"right\"></h1>\n<p>2020级计算机硕士研究生在读，热爱学习，热爱生活</p>\n<p>邮箱：yzw1048125026@163.com</p>\n\n\n<h3 id=\"个人经历\"><a href=\"#个人经历\" class=\"headerlink\" title=\"个人经历\"></a>个人经历</h3><p>  2014.10-2018.06   东北大学（本科） 软件工程<br>  2019.05-2020.07   上海雅捷信息公司 C++后台开发<br>  2020.09-2023.01   复旦大学（专硕） 电子信息（计算机技术）</p>\n<h3 id=\"研究方向\"><a href=\"#研究方向\" class=\"headerlink\" title=\"研究方向\"></a>研究方向</h3><p>  计算机视觉，医学图像分割</p>\n<h3 id=\"荣誉奖励\"><a href=\"#荣誉奖励\" class=\"headerlink\" title=\"荣誉奖励\"></a>荣誉奖励</h3><p>  1.东北大学三等奖学金<br>  2.东北大学优秀毕业生干部<br>  3.复旦大学二等奖学金<br>  4.复旦大学优秀学生<br>  …</p>\n<h3 id=\"项目研究\"><a href=\"#项目研究\" class=\"headerlink\" title=\"项目研究\"></a>项目研究</h3><p>  1.基于CART算法的高校教师亚健康预警系统的设计与实现（本科毕设）<br>  <em>相关技术</em>：机器学习算法，C++，android移动端开发<br>  2.核仿真项目和核安全项目（工作内容）<br>  <em>相关技术</em>：C/C++和 Fortran基本语法，多线程，flex-bison，socket编程，bat脚本，linux的版本管理和gdb调试<br>  3.基于解剖学引导和多视图融合的腹部多器官分割系统（硕士研究方向）<br>  <em>相关技术</em>：python，基于pytorch的深度学习框架，图像分割算法</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Kennan Yang<img src=\"/images/kennan.jpg\" width=\"25%\" align =\"right\"></h1>\n<p>2020级计算机硕士研究生在读，热爱学习，热爱生活</p>\n<p>邮箱：yzw1048125026@163.com</p>\n\n\n<h3 id=\"个人经历\"><a href=\"#个人经历\" class=\"headerlink\" title=\"个人经历\"></a>个人经历</h3><p>  2014.10-2018.06   东北大学（本科） 软件工程<br>  2019.05-2020.07   上海雅捷信息公司 C++后台开发<br>  2020.09-2023.01   复旦大学（专硕） 电子信息（计算机技术）</p>\n<h3 id=\"研究方向\"><a href=\"#研究方向\" class=\"headerlink\" title=\"研究方向\"></a>研究方向</h3><p>  计算机视觉，医学图像分割</p>\n<h3 id=\"荣誉奖励\"><a href=\"#荣誉奖励\" class=\"headerlink\" title=\"荣誉奖励\"></a>荣誉奖励</h3><p>  1.东北大学三等奖学金<br>  2.东北大学优秀毕业生干部<br>  3.复旦大学二等奖学金<br>  4.复旦大学优秀学生<br>  …</p>\n<h3 id=\"项目研究\"><a href=\"#项目研究\" class=\"headerlink\" title=\"项目研究\"></a>项目研究</h3><p>  1.基于CART算法的高校教师亚健康预警系统的设计与实现（本科毕设）<br>  <em>相关技术</em>：机器学习算法，C++，android移动端开发<br>  2.核仿真项目和核安全项目（工作内容）<br>  <em>相关技术</em>：C/C++和 Fortran基本语法，多线程，flex-bison，socket编程，bat脚本，linux的版本管理和gdb调试<br>  3.基于解剖学引导和多视图融合的腹部多器官分割系统（硕士研究方向）<br>  <em>相关技术</em>：python，基于pytorch的深度学习框架，图像分割算法</p>\n"},{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2022-02-24T14:31:34.370Z","updated":"2022-02-24T14:31:34.370Z","path":"categories/index.html","comments":1,"_id":"cl08uglec0002m8uzf5nm0zln","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\nlayout: \"tags\"\n---","date":"2022-02-24T15:12:41.119Z","updated":"2022-02-24T15:12:41.119Z","path":"tags/index.html","comments":1,"_id":"cl08ugleh0006m8uz42244efq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ntype: friends\nlayout: \"friends\"\n---","date":"2022-02-24T14:32:50.215Z","updated":"2022-02-24T14:32:50.215Z","path":"friends/index.html","comments":1,"_id":"cl08uglei0008m8uz2foo7vlw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"000. Hello World - 用Github pages和Hexo搭建自己的个人主页","date":"2022-02-24T02:54:57.000Z","top":true,"_content":"\n**Hello world**\n欢迎来到我的博客，我是Kennan，一名计算机专业的研究生。以前在不同的地方写一些文章博客，但会受到平台的各种限制和广告。\n这里在前辈的指导下，通过 [github pages平台](https://docs.github.com/en/pages) 和 [Hexo博客框架](https://hexo.io/) 搭建了一个自己的个人主页，在上面分享一些自己的经历和学习心得。\n下面记录一下我的搭建过程，请多多指教，一些相关文件可参考我的 [KennanYang.github.io](https://github.com/KennanYang/KennanYang.github.io) 项目\n<!--more-->\n##  1.搭建Hexo\n[Hexo](https://hexo.io/)是基于Node.js写的，也需要git管理文章上传到github，所以需要先安装git和nodeJS\n### 安装git\nwindows：到git官网上下载,[Download git](https://gitforwindows.org/)\nlinux: \n\n```bash\nsudo apt-get install git\n```\n\n使用`git --version`查看是否安装正确\n### 安装Node.js\nwindows：[Node.js官网](https://nodejs.org/en/)选择LTS版本（稳定版）。\n\nlinux：\n```bash\nsudo apt-get install nodejs\nsudo apt-get install npm\n```\n使用`node -v`和`npm -v`查看是否安装正确\n### 安装Hexo\n创建一个文件夹【filename】(我的叫 hexoblog)，然后`cd`到这个文件夹下\n```bash\nnpm install -g hexo-cli\n```\n用`hexo -v`查看一下版本\n\n至此，安装完毕，开始配置Hexo项目\n### 配置Hexo\n初始化Hexo\n\n```bash\nhexo init hexoblog\ncd hexoblog //进入这个hexoblog文件夹\nnpm install\n```\n然后就可以查看官方的demo了\n\n```bash\nhexo generate //产生网页，可缩写hexo g\nhexo server //挂到本地服务器打开，可缩写hexo s\n```\n\n在浏览器输入localhost:4000就可以看到你生成的博客，官方默认主题是landscope\n\n## 2.部署到github pages\n直接在github page平台上托管我们的博客，便于维护，下面是把Hexo搭好的博客部署到github pages的配置方式。\n### 注册github，新建repo\n新建一个自己用户名命名的仓库，后面加.github.io，像我这样，其他设置默认就好，点击create repository。\n![创建repo](https://img-blog.csdnimg.cn/c5bdfacd70c94789bcbe12c7a1c01da9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n### 生成SSH添加到GitHub\n回到你的git bash中，\n\n```bash\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n然后创建SSH,一路回车\n\n```bash\nssh-keygen -t rsa -C \"youremail\"\n```\n这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。\n![ssh密钥](https://img-blog.csdnimg.cn/1b4a2ce586c5423c91354dd38ecee893.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\nssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。\n![github->settings](https://img-blog.csdnimg.cn/51f61bbe5dc64632be0158105eb15d3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_11,color_FFFFFF,t_70,g_se,x_5)\n\n而后在GitHub的setting中，找到SSH keys的设置选项，点击`New SSH key`把你的`id_rsa.pub`里面的信息复制进去。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b3cb64a9604946a38fc3f8bd85ce4f6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n\n在gitbash中，查看是否成功\n```bash\nssh -T git@github.com\n```\n### 部署Hexo到github\n打开站点配置文件 _config.yml，翻到最后，修改为\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。\n\n```bash\nnpm install hexo-deployer-git --save\n```\n然后\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n\n其中 `hexo clean`清除了你之前生成的东西，也可以不加。\n`hexo generate` 是生成静态文章，可以用 `hexo g`缩写\n`hexo deploy` 部署文章，可以用`hexo d`缩写\n\n注意deploy时可能要你输入username和password。\n\n部署后需要**等待一段时间**，然后就可以在`http://yourname.github.io`看到Hexo 博客了，这里的内容和`hexo server`生成的内容完全相同。\n## 3.绑定个人域名\n完成上面的步骤后，可以使用`http://yourname.github.io`查看个人主页，如何自定义一个属于自己的域名呢？\n### 购买域名\n注册一个[阿里云账户](https://www.aliyun.com/?spm=5176.100251.top-nav.dlogo.5af94f152mfbDz),在阿里云上买一个域名，我买的是`kennan-yang.top`\n\n先实名认证，然后在域名控制台添加解析，这里需要**等半天时间**。\n![域名解析](https://img-blog.csdnimg.cn/05356c75bdfa48d593e1789995afe188.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n登录GitHub，进入之前创建的仓库`yourname.github.io`，点击`settings->pages`，设置`Custom domain`，输入你的域名`kennan-yang.top` 并`save`。\n![Custom domain](https://img-blog.csdnimg.cn/4ca6ad5c655b4eaab7f534ed8cc78ab7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n### 绑定域名\n然后在你的博客文件夹（如我的hexoblog）的`source`目录中创建一个名为`CNAME`文件，不要后缀。写上你的域名。\n![CNAME](https://img-blog.csdnimg.cn/e26efd4edb2a4772a54ded2542a28b14.png)\n然后就是最常用的下面几条命令，当配置完成之后进行这些操作即可。\n```bash\nhexo clean # 清理缓存\nhexo g # hexo generate 生成静态页\nhexo s # hexo server 本地预览（非必须）\nhexo d # hexo deploy 部署到github pages\n```\n部署完成后就可以用你的域名打开自己的博客啦！\n# 参考资料\nHexo还有更多不同的主题和配置，可参考下面的资料进行个性化设置。\n1. [CSDN: hexo史上最全搭建教程](https://blog.csdn.net/sinat_37781304/article/details/82729029)\n 2. [github pages](https://docs.github.com/en/pages) \n 3. [Hexo官方文档](https://hexo.io/)\n 4. [Hexo的岛主题](https://shen-yu.gitee.io/)","source":"_posts/000-hello-world.md","raw":"---\ntitle: 000. Hello World - 用Github pages和Hexo搭建自己的个人主页\ndate: 2022-02-24 10:54:57\ncategories: 搭建环境\ntags:\n- git\n- 搭建环境\n  \ntop: True\n---\n\n**Hello world**\n欢迎来到我的博客，我是Kennan，一名计算机专业的研究生。以前在不同的地方写一些文章博客，但会受到平台的各种限制和广告。\n这里在前辈的指导下，通过 [github pages平台](https://docs.github.com/en/pages) 和 [Hexo博客框架](https://hexo.io/) 搭建了一个自己的个人主页，在上面分享一些自己的经历和学习心得。\n下面记录一下我的搭建过程，请多多指教，一些相关文件可参考我的 [KennanYang.github.io](https://github.com/KennanYang/KennanYang.github.io) 项目\n<!--more-->\n##  1.搭建Hexo\n[Hexo](https://hexo.io/)是基于Node.js写的，也需要git管理文章上传到github，所以需要先安装git和nodeJS\n### 安装git\nwindows：到git官网上下载,[Download git](https://gitforwindows.org/)\nlinux: \n\n```bash\nsudo apt-get install git\n```\n\n使用`git --version`查看是否安装正确\n### 安装Node.js\nwindows：[Node.js官网](https://nodejs.org/en/)选择LTS版本（稳定版）。\n\nlinux：\n```bash\nsudo apt-get install nodejs\nsudo apt-get install npm\n```\n使用`node -v`和`npm -v`查看是否安装正确\n### 安装Hexo\n创建一个文件夹【filename】(我的叫 hexoblog)，然后`cd`到这个文件夹下\n```bash\nnpm install -g hexo-cli\n```\n用`hexo -v`查看一下版本\n\n至此，安装完毕，开始配置Hexo项目\n### 配置Hexo\n初始化Hexo\n\n```bash\nhexo init hexoblog\ncd hexoblog //进入这个hexoblog文件夹\nnpm install\n```\n然后就可以查看官方的demo了\n\n```bash\nhexo generate //产生网页，可缩写hexo g\nhexo server //挂到本地服务器打开，可缩写hexo s\n```\n\n在浏览器输入localhost:4000就可以看到你生成的博客，官方默认主题是landscope\n\n## 2.部署到github pages\n直接在github page平台上托管我们的博客，便于维护，下面是把Hexo搭好的博客部署到github pages的配置方式。\n### 注册github，新建repo\n新建一个自己用户名命名的仓库，后面加.github.io，像我这样，其他设置默认就好，点击create repository。\n![创建repo](https://img-blog.csdnimg.cn/c5bdfacd70c94789bcbe12c7a1c01da9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n### 生成SSH添加到GitHub\n回到你的git bash中，\n\n```bash\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n然后创建SSH,一路回车\n\n```bash\nssh-keygen -t rsa -C \"youremail\"\n```\n这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。\n![ssh密钥](https://img-blog.csdnimg.cn/1b4a2ce586c5423c91354dd38ecee893.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\nssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。\n![github->settings](https://img-blog.csdnimg.cn/51f61bbe5dc64632be0158105eb15d3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_11,color_FFFFFF,t_70,g_se,x_5)\n\n而后在GitHub的setting中，找到SSH keys的设置选项，点击`New SSH key`把你的`id_rsa.pub`里面的信息复制进去。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b3cb64a9604946a38fc3f8bd85ce4f6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n\n在gitbash中，查看是否成功\n```bash\nssh -T git@github.com\n```\n### 部署Hexo到github\n打开站点配置文件 _config.yml，翻到最后，修改为\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。\n\n```bash\nnpm install hexo-deployer-git --save\n```\n然后\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n\n其中 `hexo clean`清除了你之前生成的东西，也可以不加。\n`hexo generate` 是生成静态文章，可以用 `hexo g`缩写\n`hexo deploy` 部署文章，可以用`hexo d`缩写\n\n注意deploy时可能要你输入username和password。\n\n部署后需要**等待一段时间**，然后就可以在`http://yourname.github.io`看到Hexo 博客了，这里的内容和`hexo server`生成的内容完全相同。\n## 3.绑定个人域名\n完成上面的步骤后，可以使用`http://yourname.github.io`查看个人主页，如何自定义一个属于自己的域名呢？\n### 购买域名\n注册一个[阿里云账户](https://www.aliyun.com/?spm=5176.100251.top-nav.dlogo.5af94f152mfbDz),在阿里云上买一个域名，我买的是`kennan-yang.top`\n\n先实名认证，然后在域名控制台添加解析，这里需要**等半天时间**。\n![域名解析](https://img-blog.csdnimg.cn/05356c75bdfa48d593e1789995afe188.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n登录GitHub，进入之前创建的仓库`yourname.github.io`，点击`settings->pages`，设置`Custom domain`，输入你的域名`kennan-yang.top` 并`save`。\n![Custom domain](https://img-blog.csdnimg.cn/4ca6ad5c655b4eaab7f534ed8cc78ab7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n### 绑定域名\n然后在你的博客文件夹（如我的hexoblog）的`source`目录中创建一个名为`CNAME`文件，不要后缀。写上你的域名。\n![CNAME](https://img-blog.csdnimg.cn/e26efd4edb2a4772a54ded2542a28b14.png)\n然后就是最常用的下面几条命令，当配置完成之后进行这些操作即可。\n```bash\nhexo clean # 清理缓存\nhexo g # hexo generate 生成静态页\nhexo s # hexo server 本地预览（非必须）\nhexo d # hexo deploy 部署到github pages\n```\n部署完成后就可以用你的域名打开自己的博客啦！\n# 参考资料\nHexo还有更多不同的主题和配置，可参考下面的资料进行个性化设置。\n1. [CSDN: hexo史上最全搭建教程](https://blog.csdn.net/sinat_37781304/article/details/82729029)\n 2. [github pages](https://docs.github.com/en/pages) \n 3. [Hexo官方文档](https://hexo.io/)\n 4. [Hexo的岛主题](https://shen-yu.gitee.io/)","slug":"000-hello-world","published":1,"updated":"2022-03-02T00:47:54.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl08ugle80001m8uz9qjz2ydd","content":"<p><strong>Hello world</strong><br>欢迎来到我的博客，我是Kennan，一名计算机专业的研究生。以前在不同的地方写一些文章博客，但会受到平台的各种限制和广告。<br>这里在前辈的指导下，通过 <a href=\"https://docs.github.com/en/pages\">github pages平台</a> 和 <a href=\"https://hexo.io/\">Hexo博客框架</a> 搭建了一个自己的个人主页，在上面分享一些自己的经历和学习心得。<br>下面记录一下我的搭建过程，请多多指教，一些相关文件可参考我的 <a href=\"https://github.com/KennanYang/KennanYang.github.io\">KennanYang.github.io</a> 项目</p>\n<span id=\"more\"></span>\n<h2 id=\"1-搭建Hexo\"><a href=\"#1-搭建Hexo\" class=\"headerlink\" title=\"1.搭建Hexo\"></a>1.搭建Hexo</h2><p><a href=\"https://hexo.io/\">Hexo</a>是基于Node.js写的，也需要git管理文章上传到github，所以需要先安装git和nodeJS</p>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>windows：到git官网上下载,<a href=\"https://gitforwindows.org/\">Download git</a><br>linux: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>git --version</code>查看是否安装正确</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>windows：<a href=\"https://nodejs.org/en/\">Node.js官网</a>选择LTS版本（稳定版）。</p>\n<p>linux：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br><span class=\"line\">sudo apt-get install npm</span><br></pre></td></tr></table></figure>\n<p>使用<code>node -v</code>和<code>npm -v</code>查看是否安装正确</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>创建一个文件夹【filename】(我的叫 hexoblog)，然后<code>cd</code>到这个文件夹下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>用<code>hexo -v</code>查看一下版本</p>\n<p>至此，安装完毕，开始配置Hexo项目</p>\n<h3 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h3><p>初始化Hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init hexoblog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexoblog //进入这个hexoblog文件夹</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>然后就可以查看官方的demo了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate //产生网页，可缩写hexo g</span><br><span class=\"line\">hexo server //挂到本地服务器打开，可缩写hexo s</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器输入localhost:4000就可以看到你生成的博客，官方默认主题是landscope</p>\n<h2 id=\"2-部署到github-pages\"><a href=\"#2-部署到github-pages\" class=\"headerlink\" title=\"2.部署到github pages\"></a>2.部署到github pages</h2><p>直接在github page平台上托管我们的博客，便于维护，下面是把Hexo搭好的博客部署到github pages的配置方式。</p>\n<h3 id=\"注册github，新建repo\"><a href=\"#注册github，新建repo\" class=\"headerlink\" title=\"注册github，新建repo\"></a>注册github，新建repo</h3><p>新建一个自己用户名命名的仓库，后面加.github.io，像我这样，其他设置默认就好，点击create repository。<br><img src=\"https://img-blog.csdnimg.cn/c5bdfacd70c94789bcbe12c7a1c01da9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"创建repo\"></p>\n<h3 id=\"生成SSH添加到GitHub\"><a href=\"#生成SSH添加到GitHub\" class=\"headerlink\" title=\"生成SSH添加到GitHub\"></a>生成SSH添加到GitHub</h3><p>回到你的git bash中，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;yourname&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后创建SSH,一路回车</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。<br><img src=\"https://img-blog.csdnimg.cn/1b4a2ce586c5423c91354dd38ecee893.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"ssh密钥\"><br>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br><img src=\"https://img-blog.csdnimg.cn/51f61bbe5dc64632be0158105eb15d3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_11,color_FFFFFF,t_70,g_se,x_5\" alt=\"github-&gt;settings\"></p>\n<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code>把你的<code>id_rsa.pub</code>里面的信息复制进去。<br><img src=\"https://img-blog.csdnimg.cn/b3cb64a9604946a38fc3f8bd85ce4f6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<p>在gitbash中，查看是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署Hexo到github\"><a href=\"#部署Hexo到github\" class=\"headerlink\" title=\"部署Hexo到github\"></a>部署Hexo到github</h3><p>打开站点配置文件 _config.yml，翻到最后，修改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 是生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>\n<p>注意deploy时可能要你输入username和password。</p>\n<p>部署后需要<strong>等待一段时间</strong>，然后就可以在<code>http://yourname.github.io</code>看到Hexo 博客了，这里的内容和<code>hexo server</code>生成的内容完全相同。</p>\n<h2 id=\"3-绑定个人域名\"><a href=\"#3-绑定个人域名\" class=\"headerlink\" title=\"3.绑定个人域名\"></a>3.绑定个人域名</h2><p>完成上面的步骤后，可以使用<code>http://yourname.github.io</code>查看个人主页，如何自定义一个属于自己的域名呢？</p>\n<h3 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h3><p>注册一个<a href=\"https://www.aliyun.com/?spm=5176.100251.top-nav.dlogo.5af94f152mfbDz\">阿里云账户</a>,在阿里云上买一个域名，我买的是<code>kennan-yang.top</code></p>\n<p>先实名认证，然后在域名控制台添加解析，这里需要<strong>等半天时间</strong>。<br><img src=\"https://img-blog.csdnimg.cn/05356c75bdfa48d593e1789995afe188.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"域名解析\"><br>登录GitHub，进入之前创建的仓库<code>yourname.github.io</code>，点击<code>settings-&gt;pages</code>，设置<code>Custom domain</code>，输入你的域名<code>kennan-yang.top</code> 并<code>save</code>。<br><img src=\"https://img-blog.csdnimg.cn/4ca6ad5c655b4eaab7f534ed8cc78ab7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"Custom domain\"></p>\n<h3 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h3><p>然后在你的博客文件夹（如我的hexoblog）的<code>source</code>目录中创建一个名为<code>CNAME</code>文件，不要后缀。写上你的域名。<br><img src=\"https://img-blog.csdnimg.cn/e26efd4edb2a4772a54ded2542a28b14.png\" alt=\"CNAME\"><br>然后就是最常用的下面几条命令，当配置完成之后进行这些操作即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\"># 清理缓存</span></span><br><span class=\"line\">hexo g <span class=\"comment\"># hexo generate 生成静态页</span></span><br><span class=\"line\">hexo s <span class=\"comment\"># hexo server 本地预览（非必须）</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># hexo deploy 部署到github pages</span></span><br></pre></td></tr></table></figure>\n<p>部署完成后就可以用你的域名打开自己的博客啦！</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>Hexo还有更多不同的主题和配置，可参考下面的资料进行个性化设置。</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">CSDN: hexo史上最全搭建教程</a></li>\n<li><a href=\"https://docs.github.com/en/pages\">github pages</a> </li>\n<li><a href=\"https://hexo.io/\">Hexo官方文档</a></li>\n<li><a href=\"https://shen-yu.gitee.io/\">Hexo的岛主题</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><strong>Hello world</strong><br>欢迎来到我的博客，我是Kennan，一名计算机专业的研究生。以前在不同的地方写一些文章博客，但会受到平台的各种限制和广告。<br>这里在前辈的指导下，通过 <a href=\"https://docs.github.com/en/pages\">github pages平台</a> 和 <a href=\"https://hexo.io/\">Hexo博客框架</a> 搭建了一个自己的个人主页，在上面分享一些自己的经历和学习心得。<br>下面记录一下我的搭建过程，请多多指教，一些相关文件可参考我的 <a href=\"https://github.com/KennanYang/KennanYang.github.io\">KennanYang.github.io</a> 项目</p>","more":"<h2 id=\"1-搭建Hexo\"><a href=\"#1-搭建Hexo\" class=\"headerlink\" title=\"1.搭建Hexo\"></a>1.搭建Hexo</h2><p><a href=\"https://hexo.io/\">Hexo</a>是基于Node.js写的，也需要git管理文章上传到github，所以需要先安装git和nodeJS</p>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>windows：到git官网上下载,<a href=\"https://gitforwindows.org/\">Download git</a><br>linux: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>git --version</code>查看是否安装正确</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>windows：<a href=\"https://nodejs.org/en/\">Node.js官网</a>选择LTS版本（稳定版）。</p>\n<p>linux：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br><span class=\"line\">sudo apt-get install npm</span><br></pre></td></tr></table></figure>\n<p>使用<code>node -v</code>和<code>npm -v</code>查看是否安装正确</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>创建一个文件夹【filename】(我的叫 hexoblog)，然后<code>cd</code>到这个文件夹下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>用<code>hexo -v</code>查看一下版本</p>\n<p>至此，安装完毕，开始配置Hexo项目</p>\n<h3 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h3><p>初始化Hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init hexoblog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexoblog //进入这个hexoblog文件夹</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>然后就可以查看官方的demo了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate //产生网页，可缩写hexo g</span><br><span class=\"line\">hexo server //挂到本地服务器打开，可缩写hexo s</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器输入localhost:4000就可以看到你生成的博客，官方默认主题是landscope</p>\n<h2 id=\"2-部署到github-pages\"><a href=\"#2-部署到github-pages\" class=\"headerlink\" title=\"2.部署到github pages\"></a>2.部署到github pages</h2><p>直接在github page平台上托管我们的博客，便于维护，下面是把Hexo搭好的博客部署到github pages的配置方式。</p>\n<h3 id=\"注册github，新建repo\"><a href=\"#注册github，新建repo\" class=\"headerlink\" title=\"注册github，新建repo\"></a>注册github，新建repo</h3><p>新建一个自己用户名命名的仓库，后面加.github.io，像我这样，其他设置默认就好，点击create repository。<br><img src=\"https://img-blog.csdnimg.cn/c5bdfacd70c94789bcbe12c7a1c01da9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"创建repo\"></p>\n<h3 id=\"生成SSH添加到GitHub\"><a href=\"#生成SSH添加到GitHub\" class=\"headerlink\" title=\"生成SSH添加到GitHub\"></a>生成SSH添加到GitHub</h3><p>回到你的git bash中，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;yourname&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后创建SSH,一路回车</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。<br><img src=\"https://img-blog.csdnimg.cn/1b4a2ce586c5423c91354dd38ecee893.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"ssh密钥\"><br>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br><img src=\"https://img-blog.csdnimg.cn/51f61bbe5dc64632be0158105eb15d3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_11,color_FFFFFF,t_70,g_se,x_5\" alt=\"github-&gt;settings\"></p>\n<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code>把你的<code>id_rsa.pub</code>里面的信息复制进去。<br><img src=\"https://img-blog.csdnimg.cn/b3cb64a9604946a38fc3f8bd85ce4f6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<p>在gitbash中，查看是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署Hexo到github\"><a href=\"#部署Hexo到github\" class=\"headerlink\" title=\"部署Hexo到github\"></a>部署Hexo到github</h3><p>打开站点配置文件 _config.yml，翻到最后，修改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 是生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>\n<p>注意deploy时可能要你输入username和password。</p>\n<p>部署后需要<strong>等待一段时间</strong>，然后就可以在<code>http://yourname.github.io</code>看到Hexo 博客了，这里的内容和<code>hexo server</code>生成的内容完全相同。</p>\n<h2 id=\"3-绑定个人域名\"><a href=\"#3-绑定个人域名\" class=\"headerlink\" title=\"3.绑定个人域名\"></a>3.绑定个人域名</h2><p>完成上面的步骤后，可以使用<code>http://yourname.github.io</code>查看个人主页，如何自定义一个属于自己的域名呢？</p>\n<h3 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h3><p>注册一个<a href=\"https://www.aliyun.com/?spm=5176.100251.top-nav.dlogo.5af94f152mfbDz\">阿里云账户</a>,在阿里云上买一个域名，我买的是<code>kennan-yang.top</code></p>\n<p>先实名认证，然后在域名控制台添加解析，这里需要<strong>等半天时间</strong>。<br><img src=\"https://img-blog.csdnimg.cn/05356c75bdfa48d593e1789995afe188.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"域名解析\"><br>登录GitHub，进入之前创建的仓库<code>yourname.github.io</code>，点击<code>settings-&gt;pages</code>，设置<code>Custom domain</code>，输入你的域名<code>kennan-yang.top</code> 并<code>save</code>。<br><img src=\"https://img-blog.csdnimg.cn/4ca6ad5c655b4eaab7f534ed8cc78ab7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"Custom domain\"></p>\n<h3 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h3><p>然后在你的博客文件夹（如我的hexoblog）的<code>source</code>目录中创建一个名为<code>CNAME</code>文件，不要后缀。写上你的域名。<br><img src=\"https://img-blog.csdnimg.cn/e26efd4edb2a4772a54ded2542a28b14.png\" alt=\"CNAME\"><br>然后就是最常用的下面几条命令，当配置完成之后进行这些操作即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\"># 清理缓存</span></span><br><span class=\"line\">hexo g <span class=\"comment\"># hexo generate 生成静态页</span></span><br><span class=\"line\">hexo s <span class=\"comment\"># hexo server 本地预览（非必须）</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># hexo deploy 部署到github pages</span></span><br></pre></td></tr></table></figure>\n<p>部署完成后就可以用你的域名打开自己的博客啦！</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>Hexo还有更多不同的主题和配置，可参考下面的资料进行个性化设置。</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">CSDN: hexo史上最全搭建教程</a></li>\n<li><a href=\"https://docs.github.com/en/pages\">github pages</a> </li>\n<li><a href=\"https://hexo.io/\">Hexo官方文档</a></li>\n<li><a href=\"https://shen-yu.gitee.io/\">Hexo的岛主题</a></li>\n</ol>"},{"title":"001. 如何连接实验室的服务器进行网络训练？","date":"2022-02-24T10:48:44.000Z","_content":"我在用电脑训练CNN时遇到了性能瓶颈（显存不够），当得知实验室的服务器算力更强时，去请教师兄怎么连。\n\n实验室的师兄甩过来服务器的ip和用户名密码，说直接连就行。\n\n直接连？linux都不太会用的小白，咋连？\n\n首先确保连接到实验室的网络，我这边是用校园网或者挂校园网的VPN，然后有下面几种配置方法（方法应该很多，只是列出了我尝试过的这三种）：\n<!--more-->\n# 方法一：wsl（Windows Subsystem for Linux）\n1.下载wsl2\n参考\n[https://docs.microsoft.com/zh-cn/windows/wsl/install-win10](https://docs.microsoft.com/zh-cn/windows/wsl/install-win10)\n\n2.下载windows终端windows terminal（非必须，也可直接用power shell）\n[https://docs.microsoft.com/zh-cn/windows/terminal/get-started](https://docs.microsoft.com/zh-cn/windows/terminal/get-started)\n\n3.使用ssh命令进行外部链接\n\n```bash\n-> ssh 用户@ip\n-> 密码\n```\n\n# 方法二：vscode\n1.vscode下载remote-ssh和remote wsl\n![](https://img-blog.csdnimg.cn/20210519110928571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n2.连接服务器\n\n选择左下角的标志\n![](https://img-blog.csdnimg.cn/20210519111221622.png)\n会弹出一个菜单栏，选择Connect to Host...，输入用户名和密码即可\n![](https://img-blog.csdnimg.cn/20210519111159132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n# 方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\n[https://www.netsarang.com/zh/free-for-home-school/](https://www.netsarang.com/zh/free-for-home-school/)\n![](https://img-blog.csdnimg.cn/2021051911143257.png)\n\nXShell用来输入指令\n\nXFtp方便文件管理和传输\n\n当连接完成之后，就可以把使用GPU的网络训练代码放在服务器上跑了。。\n","source":"_posts/001-link-to-server.md","raw":"---\ntitle: 001. 如何连接实验室的服务器进行网络训练？\ndate: 2022-02-24 18:48:44\ncategories: 搭建环境\ntags: \n- 服务器\n- linux\n---\n我在用电脑训练CNN时遇到了性能瓶颈（显存不够），当得知实验室的服务器算力更强时，去请教师兄怎么连。\n\n实验室的师兄甩过来服务器的ip和用户名密码，说直接连就行。\n\n直接连？linux都不太会用的小白，咋连？\n\n首先确保连接到实验室的网络，我这边是用校园网或者挂校园网的VPN，然后有下面几种配置方法（方法应该很多，只是列出了我尝试过的这三种）：\n<!--more-->\n# 方法一：wsl（Windows Subsystem for Linux）\n1.下载wsl2\n参考\n[https://docs.microsoft.com/zh-cn/windows/wsl/install-win10](https://docs.microsoft.com/zh-cn/windows/wsl/install-win10)\n\n2.下载windows终端windows terminal（非必须，也可直接用power shell）\n[https://docs.microsoft.com/zh-cn/windows/terminal/get-started](https://docs.microsoft.com/zh-cn/windows/terminal/get-started)\n\n3.使用ssh命令进行外部链接\n\n```bash\n-> ssh 用户@ip\n-> 密码\n```\n\n# 方法二：vscode\n1.vscode下载remote-ssh和remote wsl\n![](https://img-blog.csdnimg.cn/20210519110928571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n2.连接服务器\n\n选择左下角的标志\n![](https://img-blog.csdnimg.cn/20210519111221622.png)\n会弹出一个菜单栏，选择Connect to Host...，输入用户名和密码即可\n![](https://img-blog.csdnimg.cn/20210519111159132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n# 方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\n[https://www.netsarang.com/zh/free-for-home-school/](https://www.netsarang.com/zh/free-for-home-school/)\n![](https://img-blog.csdnimg.cn/2021051911143257.png)\n\nXShell用来输入指令\n\nXFtp方便文件管理和传输\n\n当连接完成之后，就可以把使用GPU的网络训练代码放在服务器上跑了。。\n","slug":"001-link-to-server","published":1,"updated":"2022-03-02T00:48:25.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl08uglec0003m8uz2buyex5s","content":"<p>我在用电脑训练CNN时遇到了性能瓶颈（显存不够），当得知实验室的服务器算力更强时，去请教师兄怎么连。</p>\n<p>实验室的师兄甩过来服务器的ip和用户名密码，说直接连就行。</p>\n<p>直接连？linux都不太会用的小白，咋连？</p>\n<p>首先确保连接到实验室的网络，我这边是用校园网或者挂校园网的VPN，然后有下面几种配置方法（方法应该很多，只是列出了我尝试过的这三种）：</p>\n<span id=\"more\"></span>\n<h1 id=\"方法一：wsl（Windows-Subsystem-for-Linux）\"><a href=\"#方法一：wsl（Windows-Subsystem-for-Linux）\" class=\"headerlink\" title=\"方法一：wsl（Windows Subsystem for Linux）\"></a>方法一：wsl（Windows Subsystem for Linux）</h1><p>1.下载wsl2<br>参考<br><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10\">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></p>\n<p>2.下载windows终端windows terminal（非必须，也可直接用power shell）<br><a href=\"https://docs.microsoft.com/zh-cn/windows/terminal/get-started\">https://docs.microsoft.com/zh-cn/windows/terminal/get-started</a></p>\n<p>3.使用ssh命令进行外部链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ssh 用户@ip</span><br><span class=\"line\">-&gt; 密码</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法二：vscode\"><a href=\"#方法二：vscode\" class=\"headerlink\" title=\"方法二：vscode\"></a>方法二：vscode</h1><p>1.vscode下载remote-ssh和remote wsl<br><img src=\"https://img-blog.csdnimg.cn/20210519110928571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"></p>\n<p>2.连接服务器</p>\n<p>选择左下角的标志<br><img src=\"https://img-blog.csdnimg.cn/20210519111221622.png\"><br>会弹出一个菜单栏，选择Connect to Host…，输入用户名和密码即可<br><img src=\"https://img-blog.csdnimg.cn/20210519111159132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"></p>\n<h1 id=\"方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\"><a href=\"#方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\" class=\"headerlink\" title=\"方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\"></a>方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版</h1><p><a href=\"https://www.netsarang.com/zh/free-for-home-school/\">https://www.netsarang.com/zh/free-for-home-school/</a><br><img src=\"https://img-blog.csdnimg.cn/2021051911143257.png\"></p>\n<p>XShell用来输入指令</p>\n<p>XFtp方便文件管理和传输</p>\n<p>当连接完成之后，就可以把使用GPU的网络训练代码放在服务器上跑了。。</p>\n","site":{"data":{}},"excerpt":"<p>我在用电脑训练CNN时遇到了性能瓶颈（显存不够），当得知实验室的服务器算力更强时，去请教师兄怎么连。</p>\n<p>实验室的师兄甩过来服务器的ip和用户名密码，说直接连就行。</p>\n<p>直接连？linux都不太会用的小白，咋连？</p>\n<p>首先确保连接到实验室的网络，我这边是用校园网或者挂校园网的VPN，然后有下面几种配置方法（方法应该很多，只是列出了我尝试过的这三种）：</p>","more":"<h1 id=\"方法一：wsl（Windows-Subsystem-for-Linux）\"><a href=\"#方法一：wsl（Windows-Subsystem-for-Linux）\" class=\"headerlink\" title=\"方法一：wsl（Windows Subsystem for Linux）\"></a>方法一：wsl（Windows Subsystem for Linux）</h1><p>1.下载wsl2<br>参考<br><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10\">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></p>\n<p>2.下载windows终端windows terminal（非必须，也可直接用power shell）<br><a href=\"https://docs.microsoft.com/zh-cn/windows/terminal/get-started\">https://docs.microsoft.com/zh-cn/windows/terminal/get-started</a></p>\n<p>3.使用ssh命令进行外部链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ssh 用户@ip</span><br><span class=\"line\">-&gt; 密码</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法二：vscode\"><a href=\"#方法二：vscode\" class=\"headerlink\" title=\"方法二：vscode\"></a>方法二：vscode</h1><p>1.vscode下载remote-ssh和remote wsl<br><img src=\"https://img-blog.csdnimg.cn/20210519110928571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"></p>\n<p>2.连接服务器</p>\n<p>选择左下角的标志<br><img src=\"https://img-blog.csdnimg.cn/20210519111221622.png\"><br>会弹出一个菜单栏，选择Connect to Host…，输入用户名和密码即可<br><img src=\"https://img-blog.csdnimg.cn/20210519111159132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"></p>\n<h1 id=\"方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\"><a href=\"#方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\" class=\"headerlink\" title=\"方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\"></a>方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版</h1><p><a href=\"https://www.netsarang.com/zh/free-for-home-school/\">https://www.netsarang.com/zh/free-for-home-school/</a><br><img src=\"https://img-blog.csdnimg.cn/2021051911143257.png\"></p>\n<p>XShell用来输入指令</p>\n<p>XFtp方便文件管理和传输</p>\n<p>当连接完成之后，就可以把使用GPU的网络训练代码放在服务器上跑了。。</p>"},{"title":"002. win10安装python3.9.1+cuda11.1+cudnn+pytorch+opencv记录","date":"2022-02-24T10:54:57.000Z","_content":"最近由于机器学习大作业需要用到神经网络，记录一下配置环境的过程。\n前人铺路，我只是结合自己的环境做了一个简单的总结，写的不好多多见谅。\n<!--more-->\n# 1.安装python3.9\n首先是python的安装，选用当前时间最新版的python3.9.1\n官网下载安装包即可[https://www.python.org/downloads/](https://www.python.org/downloads/)\n![](https://img-blog.csdnimg.cn/20201219134620158.png)\n\n一路“下一步”，建议安装到默认路径。\n\n然后，配置环境变量：\n找到安装的位置，把图中所示的两个路径加入环境变量。\n我的路径是：\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\Scripts\n![](https://img-blog.csdnimg.cn/20201219134237283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n补充一点：\nconda里python中的pytorch比较老，遇到没法调用的问题（这里没有深究），所以没有用anaconda，而是直接官网找最新的python。\n# 2.安装cuda（需要vs环境，我的是vs2015）\n\nCUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。\n\n我当前的环境是vs2015，电脑配置是\n\n![](https://img-blog.csdnimg.cn/20201219142426303.png)\n![](https://img-blog.csdnimg.cn/20201219142440290.png)\n注意CUDA的版本不能超过GPU的版本。\n\n官网的CUDA安装路径如下：\n[https://developer.nvidia.com/zh-cn/cuda-downloads](https://developer.nvidia.com/zh-cn/cuda-downloads)\n![](https://img-blog.csdnimg.cn/20201219142239715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n圈出来的部分，前者是一个比较大的安装包，下载到本地安装，后者是很小的安装包，但是需要联网，我选的前者。\n![](https://img-blog.csdnimg.cn/20201219142349445.png)\n\n仍然选择当前最新的版本11.1，安装到默认路径下：\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\n\n# 3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\nNVIDIA cuDNN是用于深度神经网络的GPU加速库。\n老规矩，走官网。\n[https://developer.nvidia.com/rdp/cudnn-archive](https://developer.nvidia.com/rdp/cudnn-archive)\n![](https://img-blog.csdnimg.cn/20201219140906756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n这里的下载需要注册，有个技巧是复制链接，在迅雷打开可以直接下载。\n![](https://img-blog.csdnimg.cn/20201219135916291.png)\n\n下载好的压缩包解压之后，会发现三个文件夹。\n分别把文件放到cuda路径对应的文件夹下。\n![](https://img-blog.csdnimg.cn/20201219135443329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n# 4.安装pytorch\n它是一个基于Python的可续计算包，提供两个高级功能：1、具有强大的GPU加速的张量计算（如NumPy）。2、包含自动求导系统的深度神经网络。\n官网：\n[https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)\n![](https://img-blog.csdnimg.cn/20201219140414305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n可以通过pip安装，最下面的命令行在cmd中打开即可。\n由于速度慢，所以直接从别人那里拷贝过来了。\n\n可以在python中通过下面的代码来检验，True表示pytorch的cuda配置成功\n![](https://img-blog.csdnimg.cn/20201219142901202.png)\n\n# 5.安装opencv\n方法一：\n打开cmd，输入`pip install opencv-python`即可，但超级慢还可能断开连接。\n此处建议清华镜像下载\n\n```bash\npip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\n```\n\n方法二：\n下载相应Python版本的OpenCV的whl文件\nhttps://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\n然后打开cmd，在whl文件对应文件夹路径下，使用pip安装，如\n![](https://img-blog.csdnimg.cn/20201219141255475.png)\n\n## 至此我需要的环境已经配置完成。\n","source":"_posts/002-config-pytorch.md","raw":"---\ntitle: 002. win10安装python3.9.1+cuda11.1+cudnn+pytorch+opencv记录\ndate: 2022-02-24 18:54:57\ncategories: python\ntags: python\n---\n最近由于机器学习大作业需要用到神经网络，记录一下配置环境的过程。\n前人铺路，我只是结合自己的环境做了一个简单的总结，写的不好多多见谅。\n<!--more-->\n# 1.安装python3.9\n首先是python的安装，选用当前时间最新版的python3.9.1\n官网下载安装包即可[https://www.python.org/downloads/](https://www.python.org/downloads/)\n![](https://img-blog.csdnimg.cn/20201219134620158.png)\n\n一路“下一步”，建议安装到默认路径。\n\n然后，配置环境变量：\n找到安装的位置，把图中所示的两个路径加入环境变量。\n我的路径是：\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\Scripts\n![](https://img-blog.csdnimg.cn/20201219134237283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n补充一点：\nconda里python中的pytorch比较老，遇到没法调用的问题（这里没有深究），所以没有用anaconda，而是直接官网找最新的python。\n# 2.安装cuda（需要vs环境，我的是vs2015）\n\nCUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。\n\n我当前的环境是vs2015，电脑配置是\n\n![](https://img-blog.csdnimg.cn/20201219142426303.png)\n![](https://img-blog.csdnimg.cn/20201219142440290.png)\n注意CUDA的版本不能超过GPU的版本。\n\n官网的CUDA安装路径如下：\n[https://developer.nvidia.com/zh-cn/cuda-downloads](https://developer.nvidia.com/zh-cn/cuda-downloads)\n![](https://img-blog.csdnimg.cn/20201219142239715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n圈出来的部分，前者是一个比较大的安装包，下载到本地安装，后者是很小的安装包，但是需要联网，我选的前者。\n![](https://img-blog.csdnimg.cn/20201219142349445.png)\n\n仍然选择当前最新的版本11.1，安装到默认路径下：\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\n\n# 3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\nNVIDIA cuDNN是用于深度神经网络的GPU加速库。\n老规矩，走官网。\n[https://developer.nvidia.com/rdp/cudnn-archive](https://developer.nvidia.com/rdp/cudnn-archive)\n![](https://img-blog.csdnimg.cn/20201219140906756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n这里的下载需要注册，有个技巧是复制链接，在迅雷打开可以直接下载。\n![](https://img-blog.csdnimg.cn/20201219135916291.png)\n\n下载好的压缩包解压之后，会发现三个文件夹。\n分别把文件放到cuda路径对应的文件夹下。\n![](https://img-blog.csdnimg.cn/20201219135443329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n# 4.安装pytorch\n它是一个基于Python的可续计算包，提供两个高级功能：1、具有强大的GPU加速的张量计算（如NumPy）。2、包含自动求导系统的深度神经网络。\n官网：\n[https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)\n![](https://img-blog.csdnimg.cn/20201219140414305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n可以通过pip安装，最下面的命令行在cmd中打开即可。\n由于速度慢，所以直接从别人那里拷贝过来了。\n\n可以在python中通过下面的代码来检验，True表示pytorch的cuda配置成功\n![](https://img-blog.csdnimg.cn/20201219142901202.png)\n\n# 5.安装opencv\n方法一：\n打开cmd，输入`pip install opencv-python`即可，但超级慢还可能断开连接。\n此处建议清华镜像下载\n\n```bash\npip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\n```\n\n方法二：\n下载相应Python版本的OpenCV的whl文件\nhttps://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\n然后打开cmd，在whl文件对应文件夹路径下，使用pip安装，如\n![](https://img-blog.csdnimg.cn/20201219141255475.png)\n\n## 至此我需要的环境已经配置完成。\n","slug":"002-config-pytorch","published":1,"updated":"2022-03-02T00:05:07.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl08ugleh0007m8uz8uud01s7","content":"<p>最近由于机器学习大作业需要用到神经网络，记录一下配置环境的过程。<br>前人铺路，我只是结合自己的环境做了一个简单的总结，写的不好多多见谅。</p>\n<span id=\"more\"></span>\n<h1 id=\"1-安装python3-9\"><a href=\"#1-安装python3-9\" class=\"headerlink\" title=\"1.安装python3.9\"></a>1.安装python3.9</h1><p>首先是python的安装，选用当前时间最新版的python3.9.1<br>官网下载安装包即可<a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a><br><img src=\"https://img-blog.csdnimg.cn/20201219134620158.png\"></p>\n<p>一路“下一步”，建议安装到默认路径。</p>\n<p>然后，配置环境变量：<br>找到安装的位置，把图中所示的两个路径加入环境变量。<br>我的路径是：<br>C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39<br>C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\Scripts<br><img src=\"https://img-blog.csdnimg.cn/20201219134237283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"><br>补充一点：<br>conda里python中的pytorch比较老，遇到没法调用的问题（这里没有深究），所以没有用anaconda，而是直接官网找最新的python。</p>\n<h1 id=\"2-安装cuda（需要vs环境，我的是vs2015）\"><a href=\"#2-安装cuda（需要vs环境，我的是vs2015）\" class=\"headerlink\" title=\"2.安装cuda（需要vs环境，我的是vs2015）\"></a>2.安装cuda（需要vs环境，我的是vs2015）</h1><p>CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。</p>\n<p>我当前的环境是vs2015，电脑配置是</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201219142426303.png\"><br><img src=\"https://img-blog.csdnimg.cn/20201219142440290.png\"><br>注意CUDA的版本不能超过GPU的版本。</p>\n<p>官网的CUDA安装路径如下：<br><a href=\"https://developer.nvidia.com/zh-cn/cuda-downloads\">https://developer.nvidia.com/zh-cn/cuda-downloads</a><br><img src=\"https://img-blog.csdnimg.cn/20201219142239715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"><br>圈出来的部分，前者是一个比较大的安装包，下载到本地安装，后者是很小的安装包，但是需要联网，我选的前者。<br><img src=\"https://img-blog.csdnimg.cn/20201219142349445.png\"></p>\n<p>仍然选择当前最新的版本11.1，安装到默认路径下：<br>C:\\Program Files\\NVIDIA GPU Computing Toolkit</p>\n<h1 id=\"3-安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\"><a href=\"#3-安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\" class=\"headerlink\" title=\"3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\"></a>3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）</h1><p>NVIDIA cuDNN是用于深度神经网络的GPU加速库。<br>老规矩，走官网。<br><a href=\"https://developer.nvidia.com/rdp/cudnn-archive\">https://developer.nvidia.com/rdp/cudnn-archive</a><br><img src=\"https://img-blog.csdnimg.cn/20201219140906756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"></p>\n<p>这里的下载需要注册，有个技巧是复制链接，在迅雷打开可以直接下载。<br><img src=\"https://img-blog.csdnimg.cn/20201219135916291.png\"></p>\n<p>下载好的压缩包解压之后，会发现三个文件夹。<br>分别把文件放到cuda路径对应的文件夹下。<br><img src=\"https://img-blog.csdnimg.cn/20201219135443329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"></p>\n<h1 id=\"4-安装pytorch\"><a href=\"#4-安装pytorch\" class=\"headerlink\" title=\"4.安装pytorch\"></a>4.安装pytorch</h1><p>它是一个基于Python的可续计算包，提供两个高级功能：1、具有强大的GPU加速的张量计算（如NumPy）。2、包含自动求导系统的深度神经网络。<br>官网：<br><a href=\"https://pytorch.org/get-started/locally/\">https://pytorch.org/get-started/locally/</a><br><img src=\"https://img-blog.csdnimg.cn/20201219140414305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"><br>可以通过pip安装，最下面的命令行在cmd中打开即可。<br>由于速度慢，所以直接从别人那里拷贝过来了。</p>\n<p>可以在python中通过下面的代码来检验，True表示pytorch的cuda配置成功<br><img src=\"https://img-blog.csdnimg.cn/20201219142901202.png\"></p>\n<h1 id=\"5-安装opencv\"><a href=\"#5-安装opencv\" class=\"headerlink\" title=\"5.安装opencv\"></a>5.安装opencv</h1><p>方法一：<br>打开cmd，输入<code>pip install opencv-python</code>即可，但超级慢还可能断开连接。<br>此处建议清华镜像下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure>\n\n<p>方法二：<br>下载相应Python版本的OpenCV的whl文件<br><a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\">https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv</a><br>然后打开cmd，在whl文件对应文件夹路径下，使用pip安装，如<br><img src=\"https://img-blog.csdnimg.cn/20201219141255475.png\"></p>\n<h2 id=\"至此我需要的环境已经配置完成。\"><a href=\"#至此我需要的环境已经配置完成。\" class=\"headerlink\" title=\"至此我需要的环境已经配置完成。\"></a>至此我需要的环境已经配置完成。</h2>","site":{"data":{}},"excerpt":"<p>最近由于机器学习大作业需要用到神经网络，记录一下配置环境的过程。<br>前人铺路，我只是结合自己的环境做了一个简单的总结，写的不好多多见谅。</p>","more":"<h1 id=\"1-安装python3-9\"><a href=\"#1-安装python3-9\" class=\"headerlink\" title=\"1.安装python3.9\"></a>1.安装python3.9</h1><p>首先是python的安装，选用当前时间最新版的python3.9.1<br>官网下载安装包即可<a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a><br><img src=\"https://img-blog.csdnimg.cn/20201219134620158.png\"></p>\n<p>一路“下一步”，建议安装到默认路径。</p>\n<p>然后，配置环境变量：<br>找到安装的位置，把图中所示的两个路径加入环境变量。<br>我的路径是：<br>C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39<br>C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\Scripts<br><img src=\"https://img-blog.csdnimg.cn/20201219134237283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"><br>补充一点：<br>conda里python中的pytorch比较老，遇到没法调用的问题（这里没有深究），所以没有用anaconda，而是直接官网找最新的python。</p>\n<h1 id=\"2-安装cuda（需要vs环境，我的是vs2015）\"><a href=\"#2-安装cuda（需要vs环境，我的是vs2015）\" class=\"headerlink\" title=\"2.安装cuda（需要vs环境，我的是vs2015）\"></a>2.安装cuda（需要vs环境，我的是vs2015）</h1><p>CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。</p>\n<p>我当前的环境是vs2015，电脑配置是</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201219142426303.png\"><br><img src=\"https://img-blog.csdnimg.cn/20201219142440290.png\"><br>注意CUDA的版本不能超过GPU的版本。</p>\n<p>官网的CUDA安装路径如下：<br><a href=\"https://developer.nvidia.com/zh-cn/cuda-downloads\">https://developer.nvidia.com/zh-cn/cuda-downloads</a><br><img src=\"https://img-blog.csdnimg.cn/20201219142239715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"><br>圈出来的部分，前者是一个比较大的安装包，下载到本地安装，后者是很小的安装包，但是需要联网，我选的前者。<br><img src=\"https://img-blog.csdnimg.cn/20201219142349445.png\"></p>\n<p>仍然选择当前最新的版本11.1，安装到默认路径下：<br>C:\\Program Files\\NVIDIA GPU Computing Toolkit</p>\n<h1 id=\"3-安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\"><a href=\"#3-安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\" class=\"headerlink\" title=\"3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\"></a>3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）</h1><p>NVIDIA cuDNN是用于深度神经网络的GPU加速库。<br>老规矩，走官网。<br><a href=\"https://developer.nvidia.com/rdp/cudnn-archive\">https://developer.nvidia.com/rdp/cudnn-archive</a><br><img src=\"https://img-blog.csdnimg.cn/20201219140906756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"></p>\n<p>这里的下载需要注册，有个技巧是复制链接，在迅雷打开可以直接下载。<br><img src=\"https://img-blog.csdnimg.cn/20201219135916291.png\"></p>\n<p>下载好的压缩包解压之后，会发现三个文件夹。<br>分别把文件放到cuda路径对应的文件夹下。<br><img src=\"https://img-blog.csdnimg.cn/20201219135443329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"></p>\n<h1 id=\"4-安装pytorch\"><a href=\"#4-安装pytorch\" class=\"headerlink\" title=\"4.安装pytorch\"></a>4.安装pytorch</h1><p>它是一个基于Python的可续计算包，提供两个高级功能：1、具有强大的GPU加速的张量计算（如NumPy）。2、包含自动求导系统的深度神经网络。<br>官网：<br><a href=\"https://pytorch.org/get-started/locally/\">https://pytorch.org/get-started/locally/</a><br><img src=\"https://img-blog.csdnimg.cn/20201219140414305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\"><br>可以通过pip安装，最下面的命令行在cmd中打开即可。<br>由于速度慢，所以直接从别人那里拷贝过来了。</p>\n<p>可以在python中通过下面的代码来检验，True表示pytorch的cuda配置成功<br><img src=\"https://img-blog.csdnimg.cn/20201219142901202.png\"></p>\n<h1 id=\"5-安装opencv\"><a href=\"#5-安装opencv\" class=\"headerlink\" title=\"5.安装opencv\"></a>5.安装opencv</h1><p>方法一：<br>打开cmd，输入<code>pip install opencv-python</code>即可，但超级慢还可能断开连接。<br>此处建议清华镜像下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure>\n\n<p>方法二：<br>下载相应Python版本的OpenCV的whl文件<br><a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\">https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv</a><br>然后打开cmd，在whl文件对应文件夹路径下，使用pip安装，如<br><img src=\"https://img-blog.csdnimg.cn/20201219141255475.png\"></p>\n<h2 id=\"至此我需要的环境已经配置完成。\"><a href=\"#至此我需要的环境已经配置完成。\" class=\"headerlink\" title=\"至此我需要的环境已经配置完成。\"></a>至此我需要的环境已经配置完成。</h2>"},{"title":"003. go入门，学习用goroutine开启并发","date":"2022-03-02T00:03:04.000Z","_content":"\n**为了学习go语言，和了解并行的基本写法，这里通过一个demo练习**\n由于已经有了c++和python的基础，所以了解基本语法很快，主要是学习go面向消息的传递机制，以及使用goroutine进行并发操作。\n参考资料：\n[Go 语言教程-Go并发](https://www.runoob.com/go/go-concurrent.html)\n\n```go\n/*一个go的并行计算demo,学习go的基本语法，并计算两个数组元素值为1的数目*/\n\n//包声明：必须在源文件中非注释的第一行指明这个文件属于哪个包\n//每个Go程序都包含一个名为main的包\npackage main \n\n//import告诉Go编译器使用\"fmt\"包里的元素\n//fmt包实现了格式化IO函数\nimport \"fmt\"\n\n\n/*\n函数声明方式\nfunc function_name([parameter list])[return_types]{\n    函数体\n}\n*/\nfunc sum(arr []int, c chan int){\n    /*\n    变量声明的两种方式：\n    1.var v_name v_type = value\n    2.v_name := value 根据值自行判定变量类型\n\n    注：标识符首字母大写，如Group 1，则可被外部包调用，称为导出。以小写字母开头则只能内部可见。\n    */\n    sum := 0\n\n    /*\n    循环定义方式 \n    1.for init; condition； post{}\n    2.for condition{}\n    3.for key, value := range iter{}  用range对slice、map、数组等迭代循环\n    */\n\n    for _, value := range arr {\n        /*\n        条件语句\n        if 布尔表达式{\n            //语句\n        }\n        */\n        if value == 1{\n            //运算符同c++，包括++，--\n            sum++\n        }\n    }\n    //值保存到通道（channel）方便并行\n    c <- sum\n}\n\n//main函数是程序开始执行的函数\nfunc main( ){\n    //字符串输出到控制台，并结尾增加换行符'\\n'\n    fmt.Println(\"hello world!\")\n\n    // 创建数组方式一: var variable_name = [SIZE] variable_type{,,,...}\n    var arr_a =[]int  {2, 1, 3, 1, 4, 1, 5}\n    // 创建数组方式二: variable_name := [SIZE] variable_type{,,,...}\n    arr_b := []int {1, 4, 5, 2, 1}\n    \n    /*\n\n    */\n    ch := make(chan int)\n\n    /*\n    函数调用方式: func([parameter_list])\n    \n    goroutine: 轻量级线程，支持并发\n    如果用goroutine调度，则前加go关键字，如go f(x,y,z)\n    */\n    go sum(arr_a, ch)\n    go sum(arr_b, ch)\n\n    /*\n    通道（channel）可用于两个goroutine之间通过传递一个指定的值来同步运行和通讯。\n    操作符<-用于指定通道的方向，发送或接收。如：\n    ch <- v //把v发送到通道ch\n    v := <- ch //从ch接收数据，并把值赋给v\n    */\n    result_a, result_b := <- ch, <- ch\n    \n    //输出计算结果\n    fmt.Println(\"results\", result_a, result_b, result_a + result_b)\n}\n\n```\n","source":"_posts/003-goroutine.md","raw":"---\ntitle: 003. go入门，学习用goroutine开启并发\ndate: 2022-03-02 08:03:04\ncategories: go\ntags: \n- go\n- 并发\n---\n\n**为了学习go语言，和了解并行的基本写法，这里通过一个demo练习**\n由于已经有了c++和python的基础，所以了解基本语法很快，主要是学习go面向消息的传递机制，以及使用goroutine进行并发操作。\n参考资料：\n[Go 语言教程-Go并发](https://www.runoob.com/go/go-concurrent.html)\n\n```go\n/*一个go的并行计算demo,学习go的基本语法，并计算两个数组元素值为1的数目*/\n\n//包声明：必须在源文件中非注释的第一行指明这个文件属于哪个包\n//每个Go程序都包含一个名为main的包\npackage main \n\n//import告诉Go编译器使用\"fmt\"包里的元素\n//fmt包实现了格式化IO函数\nimport \"fmt\"\n\n\n/*\n函数声明方式\nfunc function_name([parameter list])[return_types]{\n    函数体\n}\n*/\nfunc sum(arr []int, c chan int){\n    /*\n    变量声明的两种方式：\n    1.var v_name v_type = value\n    2.v_name := value 根据值自行判定变量类型\n\n    注：标识符首字母大写，如Group 1，则可被外部包调用，称为导出。以小写字母开头则只能内部可见。\n    */\n    sum := 0\n\n    /*\n    循环定义方式 \n    1.for init; condition； post{}\n    2.for condition{}\n    3.for key, value := range iter{}  用range对slice、map、数组等迭代循环\n    */\n\n    for _, value := range arr {\n        /*\n        条件语句\n        if 布尔表达式{\n            //语句\n        }\n        */\n        if value == 1{\n            //运算符同c++，包括++，--\n            sum++\n        }\n    }\n    //值保存到通道（channel）方便并行\n    c <- sum\n}\n\n//main函数是程序开始执行的函数\nfunc main( ){\n    //字符串输出到控制台，并结尾增加换行符'\\n'\n    fmt.Println(\"hello world!\")\n\n    // 创建数组方式一: var variable_name = [SIZE] variable_type{,,,...}\n    var arr_a =[]int  {2, 1, 3, 1, 4, 1, 5}\n    // 创建数组方式二: variable_name := [SIZE] variable_type{,,,...}\n    arr_b := []int {1, 4, 5, 2, 1}\n    \n    /*\n\n    */\n    ch := make(chan int)\n\n    /*\n    函数调用方式: func([parameter_list])\n    \n    goroutine: 轻量级线程，支持并发\n    如果用goroutine调度，则前加go关键字，如go f(x,y,z)\n    */\n    go sum(arr_a, ch)\n    go sum(arr_b, ch)\n\n    /*\n    通道（channel）可用于两个goroutine之间通过传递一个指定的值来同步运行和通讯。\n    操作符<-用于指定通道的方向，发送或接收。如：\n    ch <- v //把v发送到通道ch\n    v := <- ch //从ch接收数据，并把值赋给v\n    */\n    result_a, result_b := <- ch, <- ch\n    \n    //输出计算结果\n    fmt.Println(\"results\", result_a, result_b, result_a + result_b)\n}\n\n```\n","slug":"003-goroutine","published":1,"updated":"2022-03-02T00:51:28.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl08uglej0009m8uz25es8y5y","content":"<p><strong>为了学习go语言，和了解并行的基本写法，这里通过一个demo练习</strong><br>由于已经有了c++和python的基础，所以了解基本语法很快，主要是学习go面向消息的传递机制，以及使用goroutine进行并发操作。<br>参考资料：<br><a href=\"https://www.runoob.com/go/go-concurrent.html\">Go 语言教程-Go并发</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*一个go的并行计算demo,学习go的基本语法，并计算两个数组元素值为1的数目*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//包声明：必须在源文件中非注释的第一行指明这个文件属于哪个包</span></span><br><span class=\"line\"><span class=\"comment\">//每个Go程序都包含一个名为main的包</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//import告诉Go编译器使用&quot;fmt&quot;包里的元素</span></span><br><span class=\"line\"><span class=\"comment\">//fmt包实现了格式化IO函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数声明方式</span></span><br><span class=\"line\"><span class=\"comment\">func function_name([parameter list])[return_types]&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    函数体</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(arr []<span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    变量声明的两种方式：</span></span><br><span class=\"line\"><span class=\"comment\">    1.var v_name v_type = value</span></span><br><span class=\"line\"><span class=\"comment\">    2.v_name := value 根据值自行判定变量类型</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    注：标识符首字母大写，如Group 1，则可被外部包调用，称为导出。以小写字母开头则只能内部可见。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    sum := <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    循环定义方式 </span></span><br><span class=\"line\"><span class=\"comment\">    1.for init; condition； post&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    2.for condition&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    3.for key, value := range iter&#123;&#125;  用range对slice、map、数组等迭代循环</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        条件语句</span></span><br><span class=\"line\"><span class=\"comment\">        if 布尔表达式&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //语句</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> value == <span class=\"number\">1</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//运算符同c++，包括++，--</span></span><br><span class=\"line\">            sum++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//值保存到通道（channel）方便并行</span></span><br><span class=\"line\">    c &lt;- sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main函数是程序开始执行的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">( )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//字符串输出到控制台，并结尾增加换行符&#x27;\\n&#x27;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;hello world!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建数组方式一: var variable_name = [SIZE] variable_type&#123;,,,...&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr_a =[]<span class=\"type\">int</span>  &#123;<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建数组方式二: variable_name := [SIZE] variable_type&#123;,,,...&#125;</span></span><br><span class=\"line\">    arr_b := []<span class=\"type\">int</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    函数调用方式: func([parameter_list])</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    goroutine: 轻量级线程，支持并发</span></span><br><span class=\"line\"><span class=\"comment\">    如果用goroutine调度，则前加go关键字，如go f(x,y,z)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">go</span> sum(arr_a, ch)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> sum(arr_b, ch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    通道（channel）可用于两个goroutine之间通过传递一个指定的值来同步运行和通讯。</span></span><br><span class=\"line\"><span class=\"comment\">    操作符&lt;-用于指定通道的方向，发送或接收。如：</span></span><br><span class=\"line\"><span class=\"comment\">    ch &lt;- v //把v发送到通道ch</span></span><br><span class=\"line\"><span class=\"comment\">    v := &lt;- ch //从ch接收数据，并把值赋给v</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    result_a, result_b := &lt;- ch, &lt;- ch</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//输出计算结果</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;results&quot;</span>, result_a, result_b, result_a + result_b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>为了学习go语言，和了解并行的基本写法，这里通过一个demo练习</strong><br>由于已经有了c++和python的基础，所以了解基本语法很快，主要是学习go面向消息的传递机制，以及使用goroutine进行并发操作。<br>参考资料：<br><a href=\"https://www.runoob.com/go/go-concurrent.html\">Go 语言教程-Go并发</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*一个go的并行计算demo,学习go的基本语法，并计算两个数组元素值为1的数目*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//包声明：必须在源文件中非注释的第一行指明这个文件属于哪个包</span></span><br><span class=\"line\"><span class=\"comment\">//每个Go程序都包含一个名为main的包</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//import告诉Go编译器使用&quot;fmt&quot;包里的元素</span></span><br><span class=\"line\"><span class=\"comment\">//fmt包实现了格式化IO函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数声明方式</span></span><br><span class=\"line\"><span class=\"comment\">func function_name([parameter list])[return_types]&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    函数体</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(arr []<span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    变量声明的两种方式：</span></span><br><span class=\"line\"><span class=\"comment\">    1.var v_name v_type = value</span></span><br><span class=\"line\"><span class=\"comment\">    2.v_name := value 根据值自行判定变量类型</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    注：标识符首字母大写，如Group 1，则可被外部包调用，称为导出。以小写字母开头则只能内部可见。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    sum := <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    循环定义方式 </span></span><br><span class=\"line\"><span class=\"comment\">    1.for init; condition； post&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    2.for condition&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    3.for key, value := range iter&#123;&#125;  用range对slice、map、数组等迭代循环</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        条件语句</span></span><br><span class=\"line\"><span class=\"comment\">        if 布尔表达式&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //语句</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> value == <span class=\"number\">1</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//运算符同c++，包括++，--</span></span><br><span class=\"line\">            sum++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//值保存到通道（channel）方便并行</span></span><br><span class=\"line\">    c &lt;- sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main函数是程序开始执行的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">( )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//字符串输出到控制台，并结尾增加换行符&#x27;\\n&#x27;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;hello world!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建数组方式一: var variable_name = [SIZE] variable_type&#123;,,,...&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr_a =[]<span class=\"type\">int</span>  &#123;<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建数组方式二: variable_name := [SIZE] variable_type&#123;,,,...&#125;</span></span><br><span class=\"line\">    arr_b := []<span class=\"type\">int</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    函数调用方式: func([parameter_list])</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    goroutine: 轻量级线程，支持并发</span></span><br><span class=\"line\"><span class=\"comment\">    如果用goroutine调度，则前加go关键字，如go f(x,y,z)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">go</span> sum(arr_a, ch)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> sum(arr_b, ch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    通道（channel）可用于两个goroutine之间通过传递一个指定的值来同步运行和通讯。</span></span><br><span class=\"line\"><span class=\"comment\">    操作符&lt;-用于指定通道的方向，发送或接收。如：</span></span><br><span class=\"line\"><span class=\"comment\">    ch &lt;- v //把v发送到通道ch</span></span><br><span class=\"line\"><span class=\"comment\">    v := &lt;- ch //从ch接收数据，并把值赋给v</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    result_a, result_b := &lt;- ch, &lt;- ch</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//输出计算结果</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;results&quot;</span>, result_a, result_b, result_a + result_b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl08ugle80001m8uz9qjz2ydd","category_id":"cl08uglee0004m8uz4qs87y3q","_id":"cl08uglem000dm8uz0hoygtgk"},{"post_id":"cl08uglec0003m8uz2buyex5s","category_id":"cl08uglee0004m8uz4qs87y3q","_id":"cl08uglen000gm8uz3pnb6o47"},{"post_id":"cl08ugleh0007m8uz8uud01s7","category_id":"cl08uglem000cm8uzgrogeew0","_id":"cl08ugleo000km8uz6kk4ei6o"},{"post_id":"cl08uglej0009m8uz25es8y5y","category_id":"cl08uglen000im8uzevw67xc4","_id":"cl08ugleo000nm8uzhgay4liz"}],"PostTag":[{"post_id":"cl08ugle80001m8uz9qjz2ydd","tag_id":"cl08ugleg0005m8uz07q150rc","_id":"cl08uglen000fm8uzcadxbqnn"},{"post_id":"cl08ugle80001m8uz9qjz2ydd","tag_id":"cl08uglek000bm8uz3sc2cf4r","_id":"cl08uglen000hm8uzbu7u71z0"},{"post_id":"cl08uglec0003m8uz2buyex5s","tag_id":"cl08uglem000em8uzdfcodt44","_id":"cl08ugleo000mm8uz1m6cftyn"},{"post_id":"cl08uglec0003m8uz2buyex5s","tag_id":"cl08uglen000jm8uzfovk9jlf","_id":"cl08ugleo000om8uz7k3u859w"},{"post_id":"cl08ugleh0007m8uz8uud01s7","tag_id":"cl08ugleo000lm8uz5bw11bxs","_id":"cl08uglep000qm8uzhzd17po6"},{"post_id":"cl08uglej0009m8uz25es8y5y","tag_id":"cl08ugleo000pm8uz4n8p2593","_id":"cl08uglep000sm8uz2kbngbyv"},{"post_id":"cl08uglej0009m8uz25es8y5y","tag_id":"cl08uglep000rm8uz6cdnb014","_id":"cl08uglep000tm8uz8vf0fx9q"}],"Tag":[{"name":"git","_id":"cl08ugleg0005m8uz07q150rc"},{"name":"搭建环境","_id":"cl08uglek000bm8uz3sc2cf4r"},{"name":"服务器","_id":"cl08uglem000em8uzdfcodt44"},{"name":"linux","_id":"cl08uglen000jm8uzfovk9jlf"},{"name":"python","_id":"cl08ugleo000lm8uz5bw11bxs"},{"name":"go","_id":"cl08ugleo000pm8uz4n8p2593"},{"name":"并发","_id":"cl08uglep000rm8uz6cdnb014"}]}}