{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/CSDN1.png","path":"images/CSDN1.png","modified":1,"renderable":0},{"_id":"source/images/MASfigure1.png","path":"images/MASfigure1.png","modified":1,"renderable":0},{"_id":"source/images/MASfigure2.png","path":"images/MASfigure2.png","modified":1,"renderable":0},{"_id":"source/images/MASfigure3.png","path":"images/MASfigure3.png","modified":1,"renderable":0},{"_id":"source/images/MASfigure4.png","path":"images/MASfigure4.png","modified":1,"renderable":0},{"_id":"source/images/MASfigure5.png","path":"images/MASfigure5.png","modified":1,"renderable":0},{"_id":"source/images/MASfigure6.png","path":"images/MASfigure6.png","modified":1,"renderable":0},{"_id":"source/images/MASfigure7.png","path":"images/MASfigure7.png","modified":1,"renderable":0},{"_id":"source/images/TCPcontrol1.png","path":"images/TCPcontrol1.png","modified":1,"renderable":0},{"_id":"source/images/TCPcontrol2.png","path":"images/TCPcontrol2.png","modified":1,"renderable":0},{"_id":"source/images/TCPcontrol3.png","path":"images/TCPcontrol3.png","modified":1,"renderable":0},{"_id":"source/images/TCPhead.png","path":"images/TCPhead.png","modified":1,"renderable":0},{"_id":"source/images/TCPslice_window.png","path":"images/TCPslice_window.png","modified":1,"renderable":0},{"_id":"source/images/UDPhead.png","path":"images/UDPhead.png","modified":1,"renderable":0},{"_id":"source/images/cover0.jpg","path":"images/cover0.jpg","modified":1,"renderable":0},{"_id":"source/images/github.png","path":"images/github.png","modified":1,"renderable":0},{"_id":"source/images/helloworld.png","path":"images/helloworld.png","modified":1,"renderable":0},{"_id":"source/images/kennan.jpg","path":"images/kennan.jpg","modified":1,"renderable":0},{"_id":"source/images/kennan2.png","path":"images/kennan2.png","modified":1,"renderable":0},{"_id":"source/images/kennanAi.png","path":"images/kennanAi.png","modified":1,"renderable":0},{"_id":"source/images/tcp.jpg","path":"images/tcp.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-ayer/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/dist/main.css","path":"dist/main.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/css/custom.styl","path":"css/custom.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/dist/main.js","path":"dist/main.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/404.jpg","path":"images/404.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/ayer.png","path":"images/ayer.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/beian.png","path":"images/beian.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/forkme.png","path":"images/forkme.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/dz.js","path":"js/dz.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/jquery-3.6.0.min.js","path":"js/jquery-3.6.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"6cfc04daf71be50dabad20656230981dff31ac5e","modified":1652098640023},{"_id":"source/_posts/000-hello-world.md","hash":"b0036015d0b0c98d9b55c07a4bc3d37d31faa63a","modified":1752389830987},{"_id":"source/_posts/001-link-to-server.md","hash":"9efde72bff4bcdc0bfb13e3abfb4703e831e590a","modified":1752389837287},{"_id":"source/_posts/002-config-pytorch.md","hash":"dc78b62b781ec7cff220a7eda5d0ef53d312bd0a","modified":1752389837305},{"_id":"source/_posts/003-goroutine.md","hash":"c8aed40eec7220b3486ab1415b52f51df968b4cd","modified":1752389837305},{"_id":"source/_posts/004-tree-datatype.md","hash":"999f9e06036a5515fa11fb679e521a4a103361cb","modified":1752389837306},{"_id":"source/_posts/005-TCP-IP.md","hash":"f52c52c1e9ac016da0e4803d8232c084586570f1","modified":1752389837306},{"_id":"source/_posts/007-SVM.md","hash":"d3470a3e2d5959916e1c1196af5c0892eed83161","modified":1752389837333},{"_id":"source/_posts/006-HTTP-HTTPS.md","hash":"527a350142fc50d78b005ee8c38c0cf511f7cc06","modified":1752389837306},{"_id":"source/_posts/008-k-means.md","hash":"b0a74902f8bc7dcf941cca640bca9942c3268d1d","modified":1752389837333},{"_id":"source/_posts/009-FCN-car-recognition.md","hash":"08a9ff1361377e1f468411fb883f3e4e5352caeb","modified":1752389837333},{"_id":"source/_posts/010-hexo-problems.md","hash":"60fb01d55b63981e9887bc4d06bf679e035c600f","modified":1752389837333},{"_id":"source/_posts/011-template-ai-website.md","hash":"b87526f528adc7af6caaa1cd4b594ad8707e0689","modified":1752389837397},{"_id":"source/_posts/012-multi-agent-design-mass.md","hash":"646c540ab65e4160bd037a31d7fbad39760f6f54","modified":1752389837397},{"_id":"source/_posts/013-RTX3070-deepseek-r1-local-deploy.md","hash":"17464eaf8b1642b201b16641c0d47f4cb13e703b","modified":1753542266984},{"_id":"source/_posts/014-about-me.md","hash":"2cf832a47708115a3b93fcfdf17e1b4f86972786","modified":1753542767617},{"_id":"source/_posts/015-google-tool-develop.md","hash":"2d59117b64ca033b191b671a444037391d70f3f1","modified":1753884467053},{"_id":"source/categories/index.md","hash":"ed0327e53dd3df3354300d9411e13eea18bed86e","modified":1652098640026},{"_id":"source/about/index.md","hash":"79df9990c6f5ffc0ddacd33646915056cee25682","modified":1753543765705},{"_id":"source/friends/index.md","hash":"11492d154eece2b36417b8e96318214e61e978dc","modified":1753544077555},{"_id":"source/images/CSDN1.png","hash":"c4dd025c0c1f2cf7424c0389792afd2e901f7b79","modified":1652098640026},{"_id":"source/images/MASfigure3.png","hash":"9270ab3dc55f10f8cdf885dba703405fbee0be32","modified":1752334562115},{"_id":"source/images/MASfigure5.png","hash":"f9b40c83f5a07f186814c3a3a8f6743f92c99d7c","modified":1752334592719},{"_id":"source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1652098640038},{"_id":"source/images/helloworld.png","hash":"6defc3453df1966f7de15594a90f57bce7ee72e4","modified":1652098640039},{"_id":"source/images/kennan.jpg","hash":"71adc7b4be743af69fa71fbd65083cde724b9f96","modified":1652098640039},{"_id":"source/portfolio/index.md","hash":"70e397edd798c73e2302636cf0cf32a64eee1284","modified":1753884484616},{"_id":"source/tags/index.md","hash":"8966a4040756bd3af5c620e82e417753e379e7cb","modified":1652098640042},{"_id":"source/images/MASfigure1.png","hash":"0e80fac1517b5e2410f3a16f0728f692c1de8614","modified":1752334472674},{"_id":"source/images/MASfigure6.png","hash":"6883f6c5b9cb22c2a40187e8138029ce94e29ef2","modified":1752334608877},{"_id":"source/images/TCPcontrol2.png","hash":"ca028a397ccf1610d8e3207198c3d2ba0df8f315","modified":1652098640028},{"_id":"source/images/TCPcontrol3.png","hash":"36b152f96553184fc3ff6e664ac532fe4db0c408","modified":1652098640029},{"_id":"source/images/tcp.jpg","hash":"a8d2c642909a341da96e21f42e162ad3ed9aca30","modified":1652098640041},{"_id":"source/images/MASfigure2.png","hash":"7ad1bba89056a301512ab14e18e5abe5148f09fc","modified":1752334502698},{"_id":"source/images/MASfigure7.png","hash":"f37162771684c92d634dee12c7ebf99ae0fb3e91","modified":1752334629231},{"_id":"source/images/TCPcontrol1.png","hash":"128d32d0e34b65eb0f70ee1f7e897494d8c68130","modified":1652098640028},{"_id":"source/images/TCPslice_window.png","hash":"2b5c3d6ea88b56d406b2bf99f854c51c5708f77a","modified":1652098640033},{"_id":"source/images/TCPhead.png","hash":"0ff55be160b4f7de0cbca8faa9537431166a93d5","modified":1652098640031},{"_id":"source/images/kennan2.png","hash":"bdf914e867d7e669da0242032205eb97896a9a16","modified":1652098640040},{"_id":"source/images/UDPhead.png","hash":"b65113bd3874fe5f1cc6dcd0a95bae9444e61c62","modified":1652098640036},{"_id":"source/images/cover0.jpg","hash":"76fd2dc3c73f4a93c425c4416cd93e8a59c62902","modified":1652098640038},{"_id":"themes/hexo-theme-ayer/.gitignore","hash":"8faed9be54528620a8da662ad9f242e7305d6757","modified":1652098640044},{"_id":"themes/hexo-theme-ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1652098640042},{"_id":"themes/hexo-theme-ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1652098640045},{"_id":"themes/hexo-theme-ayer/.npmignore","hash":"13239db7290ce1d6dfc62fb60191a8048c6e5781","modified":1652098640044},{"_id":"themes/hexo-theme-ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":1652098640046},{"_id":"themes/hexo-theme-ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1652098640046},{"_id":"themes/hexo-theme-ayer/_config.yml","hash":"9ce5b4f577e36e514d9fc7cf8dc918b83c3b2d2f","modified":1753544053741},{"_id":"themes/hexo-theme-ayer/README.md","hash":"53be9bba4abd5f4d28ddc8b0a913317531cc4877","modified":1652098640046},{"_id":"themes/hexo-theme-ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1652098640047},{"_id":"themes/hexo-theme-ayer/logo.jpg","hash":"71adc7b4be743af69fa71fbd65083cde724b9f96","modified":1652098640062},{"_id":"themes/hexo-theme-ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1652098640062},{"_id":"themes/hexo-theme-ayer/package.json","hash":"1d8d11dc25486874ef5d21dabf9c95f4ff990906","modified":1652098640062},{"_id":"themes/hexo-theme-ayer/rollup.config.js","hash":"3d98bd1db1dcf2e0878b6fcbbbf8ff9c3da6d357","modified":1652098640062},{"_id":"themes/hexo-theme-ayer/.github/FUNDING.yml","hash":"56f5ebae29b5bd4551df79f38c09ab452e0ab28f","modified":1652098640042},{"_id":"themes/hexo-theme-ayer/.github/config.yml","hash":"d786334df2ea7feca64d07e573055c3452843f8a","modified":1652098640044},{"_id":"themes/hexo-theme-ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1652098640060},{"_id":"themes/hexo-theme-ayer/layout/categories.ejs","hash":"ee75f263aad8d00ca5761f2eae2a5dc7cc808433","modified":1752390225548},{"_id":"themes/hexo-theme-ayer/layout/friends.ejs","hash":"92ac76bdaf5469b5ee110277879c9ec6b8673eb1","modified":1752390237151},{"_id":"themes/hexo-theme-ayer/layout/index.ejs","hash":"5d25ba311775f79980dba67490b72f0a3c0dc8d5","modified":1752075584323},{"_id":"themes/hexo-theme-ayer/layout/layout.ejs","hash":"ad2222b1819f763cd981f72b8204a19cb0fa75ae","modified":1652098640060},{"_id":"themes/hexo-theme-ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1652098640061},{"_id":"themes/hexo-theme-ayer/layout/plain-page.ejs","hash":"d2915241a9d59f9cf64c9bafb61104c400bd75fa","modified":1752390241545},{"_id":"themes/hexo-theme-ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1652098640061},{"_id":"themes/hexo-theme-ayer/layout/tags.ejs","hash":"e33099f2b969716715b089c9ef31ef260fd49a07","modified":1752390229018},{"_id":"themes/hexo-theme-ayer/languages/de.yml","hash":"2b7fa47fbe06f6928a43ea3b345ab3aeaa2cee81","modified":1652098640047},{"_id":"themes/hexo-theme-ayer/languages/es.yml","hash":"fc27661276313c1c539252517d664359cb286f8a","modified":1652098640048},{"_id":"themes/hexo-theme-ayer/languages/en.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1652098640048},{"_id":"themes/hexo-theme-ayer/languages/default.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1652098640047},{"_id":"themes/hexo-theme-ayer/languages/fr.yml","hash":"3dac4d53b9b2a1b10c0273ce7472b2e76576dc5a","modified":1652098640048},{"_id":"themes/hexo-theme-ayer/languages/ko.yml","hash":"00db39dd43875774088511b4d467dcb71f1ce8ac","modified":1652098640049},{"_id":"themes/hexo-theme-ayer/languages/ja.yml","hash":"aea06ea7bcb439d2b84501924cdd092293ee891a","modified":1652098640048},{"_id":"themes/hexo-theme-ayer/languages/nl.yml","hash":"d619955fd9659a209c58f696ee2160dfe8c6ac41","modified":1652098640049},{"_id":"themes/hexo-theme-ayer/languages/pt.yml","hash":"fa0b3a4a01a0493f3ef402039e394a291a1251fd","modified":1652098640050},{"_id":"themes/hexo-theme-ayer/languages/no.yml","hash":"fa4d2da9bb00ad0febc631afaf17f76aaa17e950","modified":1652098640049},{"_id":"themes/hexo-theme-ayer/languages/ru.yml","hash":"45edcadb57176d0b11a839055df1964da8ca08f9","modified":1652098640050},{"_id":"themes/hexo-theme-ayer/languages/vi.yml","hash":"20f25fe0e9017d530a771687fe9d21353e034fff","modified":1652098640050},{"_id":"themes/hexo-theme-ayer/languages/zh-CN.yml","hash":"68d1edd9dd7ff7b4a7b98ea713ce3d9bdd04dbc1","modified":1752333659718},{"_id":"themes/hexo-theme-ayer/languages/zh-TW.yml","hash":"750fba5314d340ddb00812fc17a608a084f04462","modified":1652098640050},{"_id":"themes/hexo-theme-ayer/source/404.html","hash":"4124da2876fbad835c4dbabcc9fc7bd587ea760c","modified":1652098640077},{"_id":"themes/hexo-theme-ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1652098640078},{"_id":"themes/hexo-theme-ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1652098640064},{"_id":"themes/hexo-theme-ayer/.github/ISSUE_TEMPLATE/bug-report.md","hash":"23fa172c797258de232e1a5fd1794ce8a86c984f","modified":1652098640043},{"_id":"themes/hexo-theme-ayer/source-src/main.js","hash":"fcb7c6c5ffcfd72ba9bd55b475af8a0e74484634","modified":1652098640076},{"_id":"themes/hexo-theme-ayer/.github/ISSUE_TEMPLATE/feature-request.md","hash":"ca76e0709f2e97edfa004922da78599ef35eb039","modified":1652098640043},{"_id":"themes/hexo-theme-ayer/.github/ISSUE_TEMPLATE/other.md","hash":"e4c347d70c3b8044eec656e8cfb78cfd49f2d991","modified":1652098640043},{"_id":"themes/hexo-theme-ayer/.github/ISSUE_TEMPLATE/question.md","hash":"20a7174d36e8f090ba7800c08b0c44b15b753736","modified":1652098640043},{"_id":"themes/hexo-theme-ayer/.github/workflows/npmpublish.yml","hash":"6a748fbb9f13da90a00e35d1e8f54bbe71a14571","modified":1652098640044},{"_id":"themes/hexo-theme-ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1652098640051},{"_id":"themes/hexo-theme-ayer/layout/_partial/after-footer.ejs","hash":"e6336c5d5061dd440100e1add829fa1bed19cd70","modified":1652098640051},{"_id":"themes/hexo-theme-ayer/layout/_partial/archive.ejs","hash":"ebb9b4e6849172969234afb5482fae9409ffdbbc","modified":1752390886316},{"_id":"themes/hexo-theme-ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1652098640051},{"_id":"themes/hexo-theme-ayer/layout/_partial/article.ejs","hash":"ff1f8fd0dce22409038e72097a9582d1bbf4e6e0","modified":1652098640052},{"_id":"themes/hexo-theme-ayer/layout/_partial/ayer.ejs","hash":"061e5d25789c9a0c3df3172c0c53966053af89d1","modified":1652098640052},{"_id":"themes/hexo-theme-ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1652098640053},{"_id":"themes/hexo-theme-ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1652098640052},{"_id":"themes/hexo-theme-ayer/layout/_partial/float-btns.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1652098640053},{"_id":"themes/hexo-theme-ayer/layout/_partial/busuanzi.ejs","hash":"64fb04b954ccde553e26deac72c1747e0cdcb47c","modified":1752076772109},{"_id":"themes/hexo-theme-ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1652098640053},{"_id":"themes/hexo-theme-ayer/layout/_partial/katex.ejs","hash":"02cb9da065cd315a06d62d13872dc687c62e9a1f","modified":1652098640054},{"_id":"themes/hexo-theme-ayer/layout/_partial/lock.ejs","hash":"72ec0a339f98399c5141f4b3aca4cc8e8310f03a","modified":1652098640054},{"_id":"themes/hexo-theme-ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1652098640054},{"_id":"themes/hexo-theme-ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1652098640054},{"_id":"themes/hexo-theme-ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":1652098640053},{"_id":"themes/hexo-theme-ayer/layout/_partial/head.ejs","hash":"decd98a04463cb916a2a1d7e1c6c80482b101d20","modified":1752075495681},{"_id":"themes/hexo-theme-ayer/layout/_partial/portfolio-feature.ejs","hash":"17cca70a0627967941f58937c1628f3adcf70ced","modified":1753884503469},{"_id":"themes/hexo-theme-ayer/layout/_partial/mathjax.ejs","hash":"bcc264b6d6b58b3b692139c4d8b1381da4820da8","modified":1652098640054},{"_id":"themes/hexo-theme-ayer/layout/_partial/profile-card.ejs","hash":"d67f3a4f36b02b378e4c6518d1d28b6f907616b4","modified":1753544835600},{"_id":"themes/hexo-theme-ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1652098640059},{"_id":"themes/hexo-theme-ayer/layout/_partial/viewer.ejs","hash":"219f0a0ec2eb35e8ba27a849639a5f634273fb6f","modified":1652098640059},{"_id":"themes/hexo-theme-ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1652098640077},{"_id":"themes/hexo-theme-ayer/source/dist/main.css","hash":"cedc06200d45eb7b000db1624b2585d7522137bc","modified":1652098640077},{"_id":"themes/hexo-theme-ayer/source/css/custom.styl","hash":"703f49a1f64b75413ea49dbe048316b80b945efb","modified":1752076766258},{"_id":"themes/hexo-theme-ayer/source/dist/main.js","hash":"4338ca7a7bc35ee139016c91d4746643a3ee01c8","modified":1652098640078},{"_id":"themes/hexo-theme-ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1652098640079},{"_id":"themes/hexo-theme-ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1652098640080},{"_id":"themes/hexo-theme-ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1652098640080},{"_id":"themes/hexo-theme-ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1652098640080},{"_id":"themes/hexo-theme-ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1652098640080},{"_id":"themes/hexo-theme-ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1652098640093},{"_id":"themes/hexo-theme-ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1652098640094},{"_id":"themes/hexo-theme-ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1652098640093},{"_id":"themes/hexo-theme-ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1652098640094},{"_id":"themes/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1652098640095},{"_id":"themes/hexo-theme-ayer/source/js/clickBoom1.js","hash":"c97ea1f120dba2c6804d0420186ef5d6f2419b7c","modified":1652098640095},{"_id":"themes/hexo-theme-ayer/source/js/clickBoom2.js","hash":"2bc7267652ec49cea5dc3a8bd470c7d5ec57c721","modified":1652098640095},{"_id":"themes/hexo-theme-ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1652098640096},{"_id":"themes/hexo-theme-ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1652098640096},{"_id":"themes/hexo-theme-ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1652098640097},{"_id":"themes/hexo-theme-ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1652098640097},{"_id":"themes/hexo-theme-ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1652098640097},{"_id":"themes/hexo-theme-ayer/scripts/events/index.js","hash":"f3a5d9bda901565e3c302bcb5ed716b6d006089e","modified":1652098640065},{"_id":"themes/hexo-theme-ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1652098640066},{"_id":"themes/hexo-theme-ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1652098640066},{"_id":"themes/hexo-theme-ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1652098640066},{"_id":"themes/hexo-theme-ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1652098640066},{"_id":"themes/hexo-theme-ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1652098640067},{"_id":"themes/hexo-theme-ayer/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1652098640067},{"_id":"themes/hexo-theme-ayer/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1652098640067},{"_id":"themes/hexo-theme-ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1652098640068},{"_id":"themes/hexo-theme-ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1652098640068},{"_id":"themes/hexo-theme-ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1652098640068},{"_id":"themes/hexo-theme-ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1652098640068},{"_id":"themes/hexo-theme-ayer/source-src/css/_remixicon.styl","hash":"78f4dd8c613df005d6ecf6a073d96d38bbbe531e","modified":1652098640075},{"_id":"themes/hexo-theme-ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1652098640075},{"_id":"themes/hexo-theme-ayer/source-src/css/style.styl","hash":"89dfb772754ee919cb157a6e28d61bbabfe46c8d","modified":1652098640075},{"_id":"themes/hexo-theme-ayer/source-src/js/ayer.js","hash":"7be770b31a72e8036966cbfc50a52569524dbc60","modified":1752391289869},{"_id":"themes/hexo-theme-ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":1652098640076},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1652098640055},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":1652098640055},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":1652098640055},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1652098640055},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/clipboard.ejs","hash":"c93d82de1635536a633b6254b604590ab4428594","modified":1652098640056},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1652098640056},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1652098640056},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/gitalk.ejs","hash":"c81d54a9d818fa21ebcab03cfecc3528821ff9a5","modified":1652098640056},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1652098640057},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/minivaline.ejs","hash":"c09ba80cfa41aaac17f0f7ff2586e73241adab20","modified":1652098640057},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1652098640057},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1652098640057},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1652098640058},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1652098640058},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/title.ejs","hash":"0e62493b8a67e6ac92c0c3690483a59777b86991","modified":1752389752759},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1652098640058},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/topping.ejs","hash":"f491555b5f06abb3e3603e37d7ca06bfea637966","modified":1652098640058},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/valine.ejs","hash":"b71f2af08c1916b3c5ef3a553a1df16f1787af24","modified":1652098640059},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/twikoo.ejs","hash":"7f064611a2297dda84e6b329252e838666ac7c93","modified":1652098640059},{"_id":"themes/hexo-theme-ayer/scripts/events/lib/hello.js","hash":"058c73fa3900d143affb9cc7ea0b2105d3925915","modified":1652098640065},{"_id":"themes/hexo-theme-ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1652098640059},{"_id":"themes/hexo-theme-ayer/scripts/events/lib/merge-configs.js","hash":"734aac9a53cf168ee51482b02b75954a2a3df150","modified":1652098640065},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1652098640069},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1652098640069},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1652098640069},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1652098640069},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/article.styl","hash":"659a35544b321a101f7cf114f0c9fdf2cc125625","modified":1652098640070},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1652098640070},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/ayer.styl","hash":"38187e5c88eaf1ea099f2ded56f1f60194c95ec4","modified":1652098640070},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1652098640071},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1652098640071},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1652098640071},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1652098640071},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1652098640072},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1652098640071},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1652098640072},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1652098640072},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/layout.styl","hash":"b149c4ed9b41a144ff2e51ccd22d0f7d20562d8d","modified":1752391056960},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1652098640072},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1652098640073},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/navbar.styl","hash":"266df43ec4041226f1801719e873265b75fe6515","modified":1652098640073},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1652098640073},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1652098640073},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1652098640073},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1652098640074},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1652098640074},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1652098640074},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/tocbot.styl","hash":"130e29937aa750e63e8cf216934dbdd4ea95969f","modified":1652098640074},{"_id":"themes/hexo-theme-ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1652098640075},{"_id":"source/images/MASfigure4.png","hash":"23b1063b2c9d778860c37a74920f1ac018d6d9ad","modified":1752334525156},{"_id":"source/images/kennanAi.png","hash":"d5823114f26e96280b842c25b675b897be176a36","modified":1751817305210},{"_id":"themes/hexo-theme-ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1652098640079},{"_id":"themes/hexo-theme-ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1652098640083},{"_id":"themes/hexo-theme-ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1652098640095},{"_id":"themes/hexo-theme-ayer/source/js/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1652098640096},{"_id":"themes/hexo-theme-ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1652098640093},{"_id":"themes/hexo-theme-ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1652098640064},{"_id":"themes/hexo-theme-ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1652098640085},{"_id":"themes/hexo-theme-ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1652098640082},{"_id":"themes/hexo-theme-ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1652098640087},{"_id":"themes/hexo-theme-ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1652098640092},{"_id":"public/atom.xml","hash":"7e648d64cf113cdc389133f8e24f2e650cd90467","modified":1753884517899},{"_id":"public/search.xml","hash":"cfafab191022b1443a6a001c2f077eec501b4706","modified":1753884517899},{"_id":"public/categories/index.html","hash":"74b3371803d4fda98722b25770f13751b0afd80b","modified":1753884517899},{"_id":"public/about/index.html","hash":"6f72ebb95c64b52ab79f60c1ce70384dd3ab2f3e","modified":1753884517899},{"_id":"public/friends/index.html","hash":"eb69555d5b74555d4adf5acc97f7412766545200","modified":1753884517899},{"_id":"public/portfolio/index.html","hash":"4f4e395869d1705ce6b5d430e4a363aed3845c21","modified":1753884517899},{"_id":"public/tags/index.html","hash":"95d3b9cb9ff373a1b780213f37d6675eabe7a346","modified":1753884517899},{"_id":"public/2025/07/30/015-google-tool-develop/index.html","hash":"02c81f2a4484c150291b71f86eec91bf455bcf7f","modified":1753884517899},{"_id":"public/2025/07/09/011-template-ai-website/index.html","hash":"4ad16ab12afe988861cb2769c18de24605013fdd","modified":1753884517899},{"_id":"public/2024/07/10/014-about-me/index.html","hash":"26280a75cf007c3a1a4c7e98936efe641af1ec85","modified":1753884517899},{"_id":"public/2024/07/10/012-multi-agent-design-mass/index.html","hash":"f4adf537dce3fb4f679edacfec727bf333bf1026","modified":1753884517899},{"_id":"public/2024/06/10/013-RTX3070-deepseek-r1-local-deploy/index.html","hash":"bdd1488623a088477cde570c2d39449800316dcc","modified":1753884517899},{"_id":"public/2022/06/15/010-hexo-problems/index.html","hash":"c0ccd5f71382446f5e6251a026d55e41e56c6925","modified":1753884517899},{"_id":"public/2022/06/13/009-FCN-car-recognition/index.html","hash":"91816a282d82b796b5ae68e63c1f46223d69f02c","modified":1753884517899},{"_id":"public/2022/06/08/008-k-means/index.html","hash":"c970574bec5df3d1d1ab20956a2c32ddc7970dfc","modified":1753884517899},{"_id":"public/2022/06/04/007-SVM/index.html","hash":"261079c9329eec91e587d8c137706517c828a4e2","modified":1753884517899},{"_id":"public/2022/04/30/006-HTTP-HTTPS/index.html","hash":"6e7fe02ef36ad13ce358cb6e4bc49dac176804f8","modified":1753884517899},{"_id":"public/2022/03/16/005-TCP-IP/index.html","hash":"3759b52e97811e2d325abd15da382e2b825ce271","modified":1753884517899},{"_id":"public/2022/03/12/004-tree-datatype/index.html","hash":"eea4e91a71ceacef6293d8316045eddc2db93ce0","modified":1753884517899},{"_id":"public/2022/03/02/003-goroutine/index.html","hash":"072f81765643d2f60cfca29a69680b47ad53abd7","modified":1753884517899},{"_id":"public/2022/02/26/002-config-pytorch/index.html","hash":"6114597c4113046f99b3dd8b6f9dd0f9cde18ac3","modified":1753884517899},{"_id":"public/2022/02/24/001-link-to-server/index.html","hash":"929550c0cef4d1d53a2d9c1b9a725dc1b97ede3b","modified":1753884517899},{"_id":"public/2022/02/24/000-hello-world/index.html","hash":"8ea447885db6864b5a5a6fa808ec177277123a0b","modified":1753884517899},{"_id":"public/archives/index.html","hash":"c64f7840ef114ed787e534867ec55ecea5b449b8","modified":1753884517899},{"_id":"public/archives/page/2/index.html","hash":"87df01f1e0179a1af7b62e17f20287561814de8a","modified":1753884517899},{"_id":"public/archives/2022/index.html","hash":"5c0988753b95a2fbeb2c336407428293229fadce","modified":1753884517899},{"_id":"public/archives/2022/page/2/index.html","hash":"b21a308c577f3820e8a3c4a76549d45523ee0448","modified":1753884517899},{"_id":"public/archives/2022/02/index.html","hash":"4496ebe4b573b9abc3eb7a5f9aca69c28ed1dff2","modified":1753884517899},{"_id":"public/archives/2022/03/index.html","hash":"01d47fe3e0b143fa1e9c2aa210c56bc59e1b4912","modified":1753884517899},{"_id":"public/archives/2022/04/index.html","hash":"f5520926cb896a8b4768ac9edd784951dcdecb30","modified":1753884517899},{"_id":"public/archives/2022/06/index.html","hash":"8368a69102c9b06ad04940b0be5dc691567bb03b","modified":1753884517899},{"_id":"public/archives/2024/index.html","hash":"66b5b73de2a8dd0883e9b8d54f10ff6d67fb5faa","modified":1753884517899},{"_id":"public/archives/2024/06/index.html","hash":"0dfb82ca6d14c6dba9b12d88beff6df69a9115d3","modified":1753884517899},{"_id":"public/archives/2024/07/index.html","hash":"f1fae0a6c2c4c08e8f722f32007912196187d32f","modified":1753884517899},{"_id":"public/archives/2025/index.html","hash":"fba8e7b9961ea6a1c18a7a52c67e4e6e9a06a832","modified":1753884517899},{"_id":"public/archives/2025/07/index.html","hash":"03896f00c67ecf3e84deb0b4ec86aa526bbbf5e0","modified":1753884517899},{"_id":"public/categories/搭建环境/index.html","hash":"1c3371fc38e48679703b3d927a722a9ad728da50","modified":1753884517899},{"_id":"public/categories/python/index.html","hash":"26ae4f153f50f8c5a93868f85c0e6c4697109162","modified":1753884517899},{"_id":"public/categories/go/index.html","hash":"649c50f26d0c884937080827937b925b2cb032d5","modified":1753884517899},{"_id":"public/categories/数据结构/index.html","hash":"8a77f0ca031d34aa1c8ed75ccc03c8edfbf2c828","modified":1753884517899},{"_id":"public/categories/计算机网络/index.html","hash":"45843e486a497313e74ae69771216143a04957fd","modified":1753884517899},{"_id":"public/categories/机器学习/index.html","hash":"fd9baa8f4280758448edc6bd84ecda08f9b92821","modified":1753884517899},{"_id":"public/categories/技术杂谈/index.html","hash":"528d42d1c6560f92cc7d21c44e770b26f72874cd","modified":1753884517899},{"_id":"public/categories/AI部署/index.html","hash":"0e30641669f098d935f2cf7a471ae4eb2184cb06","modified":1753884517899},{"_id":"public/categories/个人随笔/index.html","hash":"1c9c6a2718d0c568ba1271ecca36c06d8be4f0b9","modified":1753884517899},{"_id":"public/index.html","hash":"dd2ef4514189dfc986c4c06e70a54c5a9d3082e0","modified":1753884517899},{"_id":"public/page/2/index.html","hash":"70f7b6c98148727ee108dc22f57ad51b4a371476","modified":1753884517899},{"_id":"public/tags/git/index.html","hash":"82168191e29bcd4721c35ea37e0118895acb0071","modified":1753884517899},{"_id":"public/tags/搭建环境/index.html","hash":"ff7974ab60399b87ce0a3ae7813507a9ade4db6a","modified":1753884517899},{"_id":"public/tags/服务器/index.html","hash":"cdd2580acbcc0ea8c615986ae8a94feee7ebaaf5","modified":1753884517899},{"_id":"public/tags/linux/index.html","hash":"3c6b9d7fd48c142500249ca217af155ed250eb2b","modified":1753884517899},{"_id":"public/tags/python/index.html","hash":"a2f3ecc343b59ca2d125834d8a60d5a6b1bac793","modified":1753884517899},{"_id":"public/tags/go/index.html","hash":"ac2d75caa602e0931c1a78fd326a1a98e59d698c","modified":1753884517899},{"_id":"public/tags/并发/index.html","hash":"0374fccc46ac15c8added8e22c91a65381790ecf","modified":1753884517899},{"_id":"public/tags/c/index.html","hash":"064bca0cf83f387db8a83adb7bb0ab2aeccb15e8","modified":1753884517899},{"_id":"public/tags/数据结构/index.html","hash":"640ac9abb126ecd0aab405c2e9fd7227bf1cf81b","modified":1753884517899},{"_id":"public/tags/计算机网络/index.html","hash":"af7d74d5e74a23d06502c56fc548c3e19b7ddaf4","modified":1753884517899},{"_id":"public/tags/机器学习/index.html","hash":"79f10cfe31e86d885d510ccde40d9e635bef4ea6","modified":1753884517899},{"_id":"public/tags/卷积神经网络/index.html","hash":"028020bde0a7dd6a0ab29b27ef7363044aa4cd36","modified":1753884517899},{"_id":"public/tags/AI开发/index.html","hash":"bd7fdf29911998b24c5852466cf2258ace9b3d35","modified":1753884517899},{"_id":"public/tags/个人网站/index.html","hash":"a41b30d0c7cd8cabdb9ddbaab6905131201820de","modified":1753884517899},{"_id":"public/tags/前端/index.html","hash":"79b0bb6344f8eb5daa119f4c01ed40b8ed5e9f6c","modified":1753884517899},{"_id":"public/tags/多智能体系统/index.html","hash":"b90239b3b2ebe0231f0cc97b84fc0ac8a25a039e","modified":1753884517899},{"_id":"public/tags/LLM/index.html","hash":"6f1065481b45132a217c5af1c1c2ef4fcdcb3c06","modified":1753884517899},{"_id":"public/tags/AI论文/index.html","hash":"a6a42d74f8aa25652d06f75833100ab42b188e33","modified":1753884517899},{"_id":"public/tags/读后感/index.html","hash":"ab4ed2439dd85d041233bc3c6bb11064874f30c8","modified":1753884517899},{"_id":"public/tags/大模型/index.html","hash":"0faea4e04f01471e2afc54a669f4fab37409fb82","modified":1753884517899},{"_id":"public/tags/DeepSeek/index.html","hash":"5aa0570ea3516fbc7717bedd0604b2c127160d82","modified":1753884517899},{"_id":"public/tags/本地部署/index.html","hash":"6d86d05aaf2b8da45bb2a1f0486cd7af09f56738","modified":1753884517899},{"_id":"public/tags/教程/index.html","hash":"efa03fd4df850be0d0775f0ca071ed848ff03eed","modified":1753884517899},{"_id":"public/tags/个人成长/index.html","hash":"5b13daeeed020e89d11219d518cd8696751ca2c3","modified":1753884517899},{"_id":"public/tags/考研经历/index.html","hash":"a0bf4ec6d4422c4264145c12f5040d7d10df8c7e","modified":1753884517899},{"_id":"public/tags/职场感悟/index.html","hash":"8a648e4bcbaeb9916f9d52deb1d037fcc8464cc1","modified":1753884517899},{"_id":"public/tags/人生感悟/index.html","hash":"704b4fc0c6c9ef21e31080109f1d92a1f3a475dc","modified":1753884517899},{"_id":"public/images/CSDN1.png","hash":"c4dd025c0c1f2cf7424c0389792afd2e901f7b79","modified":1753884517899},{"_id":"public/CNAME","hash":"6cfc04daf71be50dabad20656230981dff31ac5e","modified":1753884517899},{"_id":"public/images/MASfigure5.png","hash":"f9b40c83f5a07f186814c3a3a8f6743f92c99d7c","modified":1753884517899},{"_id":"public/images/MASfigure3.png","hash":"9270ab3dc55f10f8cdf885dba703405fbee0be32","modified":1753884517899},{"_id":"public/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1753884517899},{"_id":"public/images/helloworld.png","hash":"6defc3453df1966f7de15594a90f57bce7ee72e4","modified":1753884517899},{"_id":"public/images/kennan.jpg","hash":"71adc7b4be743af69fa71fbd65083cde724b9f96","modified":1753884517899},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1753884517899},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1753884517899},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1753884517899},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1753884517899},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1753884517899},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1753884517899},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1753884517899},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1753884517899},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1753884517899},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1753884517899},{"_id":"public/404.html","hash":"dc7103e67e846834f3fdf44f5aed32dfa41e2969","modified":1753884517899},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1753884517899},{"_id":"public/css/custom.css","hash":"b25e0ffbd72d829758a67dc58fa26296eb278c14","modified":1753884517899},{"_id":"public/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1753884517899},{"_id":"public/dist/main.css","hash":"cedc06200d45eb7b000db1624b2585d7522137bc","modified":1753884517899},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1753884517899},{"_id":"public/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1753884517899},{"_id":"public/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1753884517899},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1753884517899},{"_id":"public/images/MASfigure1.png","hash":"0e80fac1517b5e2410f3a16f0728f692c1de8614","modified":1753884517899},{"_id":"public/images/MASfigure6.png","hash":"6883f6c5b9cb22c2a40187e8138029ce94e29ef2","modified":1753884517899},{"_id":"public/images/TCPcontrol2.png","hash":"ca028a397ccf1610d8e3207198c3d2ba0df8f315","modified":1753884517899},{"_id":"public/images/TCPcontrol3.png","hash":"36b152f96553184fc3ff6e664ac532fe4db0c408","modified":1753884517899},{"_id":"public/images/tcp.jpg","hash":"a8d2c642909a341da96e21f42e162ad3ed9aca30","modified":1753884517899},{"_id":"public/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1753884517899},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1753884517899},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1753884517899},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1753884517899},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1753884517899},{"_id":"public/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1753884517899},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1753884517899},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1753884517899},{"_id":"public/images/MASfigure2.png","hash":"7ad1bba89056a301512ab14e18e5abe5148f09fc","modified":1753884517899},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1753884517899},{"_id":"public/images/MASfigure7.png","hash":"f37162771684c92d634dee12c7ebf99ae0fb3e91","modified":1753884517899},{"_id":"public/images/TCPcontrol1.png","hash":"128d32d0e34b65eb0f70ee1f7e897494d8c68130","modified":1753884517899},{"_id":"public/images/TCPslice_window.png","hash":"2b5c3d6ea88b56d406b2bf99f854c51c5708f77a","modified":1753884517899},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1753884517899},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1753884517899},{"_id":"public/images/TCPhead.png","hash":"0ff55be160b4f7de0cbca8faa9537431166a93d5","modified":1753884517899},{"_id":"public/images/kennan2.png","hash":"bdf914e867d7e669da0242032205eb97896a9a16","modified":1753884517899},{"_id":"public/images/UDPhead.png","hash":"b65113bd3874fe5f1cc6dcd0a95bae9444e61c62","modified":1753884517899},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1753884517899},{"_id":"public/images/cover0.jpg","hash":"76fd2dc3c73f4a93c425c4416cd93e8a59c62902","modified":1753884517899},{"_id":"public/images/MASfigure4.png","hash":"23b1063b2c9d778860c37a74920f1ac018d6d9ad","modified":1753884517899},{"_id":"public/images/kennanAi.png","hash":"d5823114f26e96280b842c25b675b897be176a36","modified":1753884517899},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1753884517899}],"Category":[{"name":"搭建环境","_id":"cmdq1k3qe0004u4voa1jza1l9"},{"name":"python","_id":"cmdq1k3ql000gu4vo1g3udigr"},{"name":"go","_id":"cmdq1k3qn000ou4vo1q0kg00d"},{"name":"数据结构","_id":"cmdq1k3qp000tu4vo0d52e1o0"},{"name":"计算机网络","_id":"cmdq1k3qr0010u4vofrxs5qi2"},{"name":"机器学习","_id":"cmdq1k3qs0018u4vo4nu0a7pl"},{"name":"技术杂谈","_id":"cmdq1k3qu001mu4vo4nzx5bok"},{"name":"AI部署","_id":"cmdq1k3qv001uu4vo8z6m7swj"},{"name":"个人随笔","_id":"cmdq1k3qw001zu4voh5m97hbb"}],"Data":[],"Page":[{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2022-05-09T12:17:20.026Z","updated":"2022-05-09T12:17:20.026Z","path":"categories/index.html","comments":1,"_id":"cmdq1k3q80000u4vo1hl2fvtb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About me","createdate":"2022-02-24T14:14:57.000Z","gmtdate":"2025-07-09T14:14:57.000Z","layout":"page","_content":"\n<h1>恺南<img src=\"/images/kennanAi.png\" width=\"25%\" align =\"right\"></h1>\n\n## 🎯 我是谁\n**AI实战派程序员** | 复旦大学图像识别硕士 | 金融科技互联网码农\n\n**核心标签**：三年踩坑经验的AI转型向导 | INFJ\n\n**公众号**：恺南AI实战派\n\n### 💼 当前状态\n正在从传统后端开发转型AI实战派，专注于**技术迁移经验**与**职场生存工具箱**\n\n---\n\n## 🚀 转型历程\n\n### 2023-今，蚂蚁金服公司\n- **岗位**：开发工程师\n- **项目经验**：投顾项目，代表作“三笔钱”项目\n- **技术栈**：java，sofaboot，sql，tbase等\n\n### 2020-2022，复旦大学（专硕）\n- **专业**：电子信息（计算机技术）\n- **研究方向**：基于解剖学引导的腹部多器官图像分割系统\n- **核心技能**：Python，PyTorch深度学习框架，图像分割算法\n  \n### 2019-2020，上海雅捷信息公司\n- **岗位**：C++后台开发\n- **项目经验**：核仿真项目和核安全项目\n- **技术栈**：C/C++，Fortran，多线程，flex-bison，socket编程\n  \n### 2014-2018，东北大学（本科）\n- **专业**：软件工程\n- **毕业设计**：基于CART算法的高校教师亚健康预警系统\n\n---\n\n## 🔧 技术迁移记录\n### 真实项目案例\n1. **AI零基础**：零基础5分钟开发一个网站\n2. **导航站开发**：使用cursor一小时开发导航站\n\n### 核心技术栈\n- **后端开发**：Java/SpringBoot，C++，Python\n- **AI/ML**：PyTorch，计算机视觉，图像分割\n- **工具链**：Git，Linux，Docker，自动化脚本\n\n---\n\n## 📞 联系方式\n- **微信**：Kennan1048 （备注 恺南AI实战派）\n- **邮箱**：kennan1048125026@gmail.com\n- **定位**：用AI创造无限可能，分享转型经验，让更多人实现AI认知复利\n\n","source":"about/index.md","raw":"---\ntitle: About me\ncreatedate: 2022-02-24 22:14:57\ngmtdate: 2025-07-9 22:14:57\nlayout: page\n---\n\n<h1>恺南<img src=\"/images/kennanAi.png\" width=\"25%\" align =\"right\"></h1>\n\n## 🎯 我是谁\n**AI实战派程序员** | 复旦大学图像识别硕士 | 金融科技互联网码农\n\n**核心标签**：三年踩坑经验的AI转型向导 | INFJ\n\n**公众号**：恺南AI实战派\n\n### 💼 当前状态\n正在从传统后端开发转型AI实战派，专注于**技术迁移经验**与**职场生存工具箱**\n\n---\n\n## 🚀 转型历程\n\n### 2023-今，蚂蚁金服公司\n- **岗位**：开发工程师\n- **项目经验**：投顾项目，代表作“三笔钱”项目\n- **技术栈**：java，sofaboot，sql，tbase等\n\n### 2020-2022，复旦大学（专硕）\n- **专业**：电子信息（计算机技术）\n- **研究方向**：基于解剖学引导的腹部多器官图像分割系统\n- **核心技能**：Python，PyTorch深度学习框架，图像分割算法\n  \n### 2019-2020，上海雅捷信息公司\n- **岗位**：C++后台开发\n- **项目经验**：核仿真项目和核安全项目\n- **技术栈**：C/C++，Fortran，多线程，flex-bison，socket编程\n  \n### 2014-2018，东北大学（本科）\n- **专业**：软件工程\n- **毕业设计**：基于CART算法的高校教师亚健康预警系统\n\n---\n\n## 🔧 技术迁移记录\n### 真实项目案例\n1. **AI零基础**：零基础5分钟开发一个网站\n2. **导航站开发**：使用cursor一小时开发导航站\n\n### 核心技术栈\n- **后端开发**：Java/SpringBoot，C++，Python\n- **AI/ML**：PyTorch，计算机视觉，图像分割\n- **工具链**：Git，Linux，Docker，自动化脚本\n\n---\n\n## 📞 联系方式\n- **微信**：Kennan1048 （备注 恺南AI实战派）\n- **邮箱**：kennan1048125026@gmail.com\n- **定位**：用AI创造无限可能，分享转型经验，让更多人实现AI认知复利\n\n","date":"2025-07-26T15:29:25.705Z","updated":"2025-07-26T15:29:25.705Z","path":"about/index.html","comments":1,"_id":"cmdq1k3qc0002u4vo56ue6bpx","content":"<h1>恺南<img src=\"/images/kennanAi.png\" width=\"25%\" align =\"right\"></h1>\n\n<h2 id=\"🎯-我是谁\"><a href=\"#🎯-我是谁\" class=\"headerlink\" title=\"🎯 我是谁\"></a>🎯 我是谁</h2><p><strong>AI实战派程序员</strong> | 复旦大学图像识别硕士 | 金融科技互联网码农</p>\n<p><strong>核心标签</strong>：三年踩坑经验的AI转型向导 | INFJ</p>\n<p><strong>公众号</strong>：恺南AI实战派</p>\n<h3 id=\"💼-当前状态\"><a href=\"#💼-当前状态\" class=\"headerlink\" title=\"💼 当前状态\"></a>💼 当前状态</h3><p>正在从传统后端开发转型AI实战派，专注于<strong>技术迁移经验</strong>与<strong>职场生存工具箱</strong></p>\n<hr>\n<h2 id=\"🚀-转型历程\"><a href=\"#🚀-转型历程\" class=\"headerlink\" title=\"🚀 转型历程\"></a>🚀 转型历程</h2><h3 id=\"2023-今，蚂蚁金服公司\"><a href=\"#2023-今，蚂蚁金服公司\" class=\"headerlink\" title=\"2023-今，蚂蚁金服公司\"></a>2023-今，蚂蚁金服公司</h3><ul>\n<li><strong>岗位</strong>：开发工程师</li>\n<li><strong>项目经验</strong>：投顾项目，代表作“三笔钱”项目</li>\n<li><strong>技术栈</strong>：java，sofaboot，sql，tbase等</li>\n</ul>\n<h3 id=\"2020-2022，复旦大学（专硕）\"><a href=\"#2020-2022，复旦大学（专硕）\" class=\"headerlink\" title=\"2020-2022，复旦大学（专硕）\"></a>2020-2022，复旦大学（专硕）</h3><ul>\n<li><strong>专业</strong>：电子信息（计算机技术）</li>\n<li><strong>研究方向</strong>：基于解剖学引导的腹部多器官图像分割系统</li>\n<li><strong>核心技能</strong>：Python，PyTorch深度学习框架，图像分割算法</li>\n</ul>\n<h3 id=\"2019-2020，上海雅捷信息公司\"><a href=\"#2019-2020，上海雅捷信息公司\" class=\"headerlink\" title=\"2019-2020，上海雅捷信息公司\"></a>2019-2020，上海雅捷信息公司</h3><ul>\n<li><strong>岗位</strong>：C++后台开发</li>\n<li><strong>项目经验</strong>：核仿真项目和核安全项目</li>\n<li><strong>技术栈</strong>：C/C++，Fortran，多线程，flex-bison，socket编程</li>\n</ul>\n<h3 id=\"2014-2018，东北大学（本科）\"><a href=\"#2014-2018，东北大学（本科）\" class=\"headerlink\" title=\"2014-2018，东北大学（本科）\"></a>2014-2018，东北大学（本科）</h3><ul>\n<li><strong>专业</strong>：软件工程</li>\n<li><strong>毕业设计</strong>：基于CART算法的高校教师亚健康预警系统</li>\n</ul>\n<hr>\n<h2 id=\"🔧-技术迁移记录\"><a href=\"#🔧-技术迁移记录\" class=\"headerlink\" title=\"🔧 技术迁移记录\"></a>🔧 技术迁移记录</h2><h3 id=\"真实项目案例\"><a href=\"#真实项目案例\" class=\"headerlink\" title=\"真实项目案例\"></a>真实项目案例</h3><ol>\n<li><strong>AI零基础</strong>：零基础5分钟开发一个网站</li>\n<li><strong>导航站开发</strong>：使用cursor一小时开发导航站</li>\n</ol>\n<h3 id=\"核心技术栈\"><a href=\"#核心技术栈\" class=\"headerlink\" title=\"核心技术栈\"></a>核心技术栈</h3><ul>\n<li><strong>后端开发</strong>：Java/SpringBoot，C++，Python</li>\n<li><strong>AI/ML</strong>：PyTorch，计算机视觉，图像分割</li>\n<li><strong>工具链</strong>：Git，Linux，Docker，自动化脚本</li>\n</ul>\n<hr>\n<h2 id=\"📞-联系方式\"><a href=\"#📞-联系方式\" class=\"headerlink\" title=\"📞 联系方式\"></a>📞 联系方式</h2><ul>\n<li><strong>微信</strong>：Kennan1048 （备注 恺南AI实战派）</li>\n<li><strong>邮箱</strong>：kennan1048125026@gmail.com</li>\n<li><strong>定位</strong>：用AI创造无限可能，分享转型经验，让更多人实现AI认知复利</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>恺南<img src=\"/images/kennanAi.png\" width=\"25%\" align =\"right\"></h1>\n\n<h2 id=\"🎯-我是谁\"><a href=\"#🎯-我是谁\" class=\"headerlink\" title=\"🎯 我是谁\"></a>🎯 我是谁</h2><p><strong>AI实战派程序员</strong> | 复旦大学图像识别硕士 | 金融科技互联网码农</p>\n<p><strong>核心标签</strong>：三年踩坑经验的AI转型向导 | INFJ</p>\n<p><strong>公众号</strong>：恺南AI实战派</p>\n<h3 id=\"💼-当前状态\"><a href=\"#💼-当前状态\" class=\"headerlink\" title=\"💼 当前状态\"></a>💼 当前状态</h3><p>正在从传统后端开发转型AI实战派，专注于<strong>技术迁移经验</strong>与<strong>职场生存工具箱</strong></p>\n<hr>\n<h2 id=\"🚀-转型历程\"><a href=\"#🚀-转型历程\" class=\"headerlink\" title=\"🚀 转型历程\"></a>🚀 转型历程</h2><h3 id=\"2023-今，蚂蚁金服公司\"><a href=\"#2023-今，蚂蚁金服公司\" class=\"headerlink\" title=\"2023-今，蚂蚁金服公司\"></a>2023-今，蚂蚁金服公司</h3><ul>\n<li><strong>岗位</strong>：开发工程师</li>\n<li><strong>项目经验</strong>：投顾项目，代表作“三笔钱”项目</li>\n<li><strong>技术栈</strong>：java，sofaboot，sql，tbase等</li>\n</ul>\n<h3 id=\"2020-2022，复旦大学（专硕）\"><a href=\"#2020-2022，复旦大学（专硕）\" class=\"headerlink\" title=\"2020-2022，复旦大学（专硕）\"></a>2020-2022，复旦大学（专硕）</h3><ul>\n<li><strong>专业</strong>：电子信息（计算机技术）</li>\n<li><strong>研究方向</strong>：基于解剖学引导的腹部多器官图像分割系统</li>\n<li><strong>核心技能</strong>：Python，PyTorch深度学习框架，图像分割算法</li>\n</ul>\n<h3 id=\"2019-2020，上海雅捷信息公司\"><a href=\"#2019-2020，上海雅捷信息公司\" class=\"headerlink\" title=\"2019-2020，上海雅捷信息公司\"></a>2019-2020，上海雅捷信息公司</h3><ul>\n<li><strong>岗位</strong>：C++后台开发</li>\n<li><strong>项目经验</strong>：核仿真项目和核安全项目</li>\n<li><strong>技术栈</strong>：C/C++，Fortran，多线程，flex-bison，socket编程</li>\n</ul>\n<h3 id=\"2014-2018，东北大学（本科）\"><a href=\"#2014-2018，东北大学（本科）\" class=\"headerlink\" title=\"2014-2018，东北大学（本科）\"></a>2014-2018，东北大学（本科）</h3><ul>\n<li><strong>专业</strong>：软件工程</li>\n<li><strong>毕业设计</strong>：基于CART算法的高校教师亚健康预警系统</li>\n</ul>\n<hr>\n<h2 id=\"🔧-技术迁移记录\"><a href=\"#🔧-技术迁移记录\" class=\"headerlink\" title=\"🔧 技术迁移记录\"></a>🔧 技术迁移记录</h2><h3 id=\"真实项目案例\"><a href=\"#真实项目案例\" class=\"headerlink\" title=\"真实项目案例\"></a>真实项目案例</h3><ol>\n<li><strong>AI零基础</strong>：零基础5分钟开发一个网站</li>\n<li><strong>导航站开发</strong>：使用cursor一小时开发导航站</li>\n</ol>\n<h3 id=\"核心技术栈\"><a href=\"#核心技术栈\" class=\"headerlink\" title=\"核心技术栈\"></a>核心技术栈</h3><ul>\n<li><strong>后端开发</strong>：Java/SpringBoot，C++，Python</li>\n<li><strong>AI/ML</strong>：PyTorch，计算机视觉，图像分割</li>\n<li><strong>工具链</strong>：Git，Linux，Docker，自动化脚本</li>\n</ul>\n<hr>\n<h2 id=\"📞-联系方式\"><a href=\"#📞-联系方式\" class=\"headerlink\" title=\"📞 联系方式\"></a>📞 联系方式</h2><ul>\n<li><strong>微信</strong>：Kennan1048 （备注 恺南AI实战派）</li>\n<li><strong>邮箱</strong>：kennan1048125026@gmail.com</li>\n<li><strong>定位</strong>：用AI创造无限可能，分享转型经验，让更多人实现AI认知复利</li>\n</ul>\n"},{"title":"友情链接","type":"friends","layout":"friends","_content":"\n## 🤝 友情链接\n\n欢迎志同道合的朋友们与我建立友链！如果你也是技术博主、AI爱好者或者有有趣的个人网站，欢迎联系我。\n\n### 📞 联系方式\n- **微信**：kennan1048\n- **邮箱**：kennan1048125026@gmail.com\n- **微信公众号**：[恺南AI实战派](https://mp.weixin.qq.com/s/cnlB6i6WY87YSWKHeXCO6g)\n\n### 🔗 我的信息\n- **网站名称**：恺南的个人博客\n- **网站地址**：https://kennanyang.github.io\n- **网站描述**：小镇做题家 → AI实战派，分享技术转型经验与AI实战教程\n- **网站Logo**：/images/kennanAi.png\n\n### 💡 友链要求\n1. 内容健康，无违法信息\n2. 网站稳定，更新活跃\n3. 技术相关或AI相关优先\n4. 已添加我的友链\n\n期待与你建立连接！🎉","source":"friends/index.md","raw":"---\ntitle: 友情链接\ntype: friends\nlayout: \"friends\"\n---\n\n## 🤝 友情链接\n\n欢迎志同道合的朋友们与我建立友链！如果你也是技术博主、AI爱好者或者有有趣的个人网站，欢迎联系我。\n\n### 📞 联系方式\n- **微信**：kennan1048\n- **邮箱**：kennan1048125026@gmail.com\n- **微信公众号**：[恺南AI实战派](https://mp.weixin.qq.com/s/cnlB6i6WY87YSWKHeXCO6g)\n\n### 🔗 我的信息\n- **网站名称**：恺南的个人博客\n- **网站地址**：https://kennanyang.github.io\n- **网站描述**：小镇做题家 → AI实战派，分享技术转型经验与AI实战教程\n- **网站Logo**：/images/kennanAi.png\n\n### 💡 友链要求\n1. 内容健康，无违法信息\n2. 网站稳定，更新活跃\n3. 技术相关或AI相关优先\n4. 已添加我的友链\n\n期待与你建立连接！🎉","date":"2025-07-26T15:34:37.555Z","updated":"2025-07-26T15:34:37.555Z","path":"friends/index.html","comments":1,"_id":"cmdq1k3qg0006u4voau42d6tb","content":"<h2 id=\"🤝-友情链接\"><a href=\"#🤝-友情链接\" class=\"headerlink\" title=\"🤝 友情链接\"></a>🤝 友情链接</h2><p>欢迎志同道合的朋友们与我建立友链！如果你也是技术博主、AI爱好者或者有有趣的个人网站，欢迎联系我。</p>\n<h3 id=\"📞-联系方式\"><a href=\"#📞-联系方式\" class=\"headerlink\" title=\"📞 联系方式\"></a>📞 联系方式</h3><ul>\n<li><strong>微信</strong>：kennan1048</li>\n<li><strong>邮箱</strong>：kennan1048125026@gmail.com</li>\n<li><strong>微信公众号</strong>：<a href=\"https://mp.weixin.qq.com/s/cnlB6i6WY87YSWKHeXCO6g\">恺南AI实战派</a></li>\n</ul>\n<h3 id=\"🔗-我的信息\"><a href=\"#🔗-我的信息\" class=\"headerlink\" title=\"🔗 我的信息\"></a>🔗 我的信息</h3><ul>\n<li><strong>网站名称</strong>：恺南的个人博客</li>\n<li><strong>网站地址</strong>：<a href=\"https://kennanyang.github.io\">https://kennanyang.github.io</a></li>\n<li><strong>网站描述</strong>：小镇做题家 → AI实战派，分享技术转型经验与AI实战教程</li>\n<li><strong>网站Logo</strong>：/images/kennanAi.png</li>\n</ul>\n<h3 id=\"💡-友链要求\"><a href=\"#💡-友链要求\" class=\"headerlink\" title=\"💡 友链要求\"></a>💡 友链要求</h3><ol>\n<li>内容健康，无违法信息</li>\n<li>网站稳定，更新活跃</li>\n<li>技术相关或AI相关优先</li>\n<li>已添加我的友链</li>\n</ol>\n<p>期待与你建立连接！🎉</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"🤝-友情链接\"><a href=\"#🤝-友情链接\" class=\"headerlink\" title=\"🤝 友情链接\"></a>🤝 友情链接</h2><p>欢迎志同道合的朋友们与我建立友链！如果你也是技术博主、AI爱好者或者有有趣的个人网站，欢迎联系我。</p>\n<h3 id=\"📞-联系方式\"><a href=\"#📞-联系方式\" class=\"headerlink\" title=\"📞 联系方式\"></a>📞 联系方式</h3><ul>\n<li><strong>微信</strong>：kennan1048</li>\n<li><strong>邮箱</strong>：kennan1048125026@gmail.com</li>\n<li><strong>微信公众号</strong>：<a href=\"https://mp.weixin.qq.com/s/cnlB6i6WY87YSWKHeXCO6g\">恺南AI实战派</a></li>\n</ul>\n<h3 id=\"🔗-我的信息\"><a href=\"#🔗-我的信息\" class=\"headerlink\" title=\"🔗 我的信息\"></a>🔗 我的信息</h3><ul>\n<li><strong>网站名称</strong>：恺南的个人博客</li>\n<li><strong>网站地址</strong>：<a href=\"https://kennanyang.github.io\">https://kennanyang.github.io</a></li>\n<li><strong>网站描述</strong>：小镇做题家 → AI实战派，分享技术转型经验与AI实战教程</li>\n<li><strong>网站Logo</strong>：/images/kennanAi.png</li>\n</ul>\n<h3 id=\"💡-友链要求\"><a href=\"#💡-友链要求\" class=\"headerlink\" title=\"💡 友链要求\"></a>💡 友链要求</h3><ol>\n<li>内容健康，无违法信息</li>\n<li>网站稳定，更新活跃</li>\n<li>技术相关或AI相关优先</li>\n<li>已添加我的友链</li>\n</ol>\n<p>期待与你建立连接！🎉</p>\n"},{"title":"作品集","date":"2025-07-09T14:14:57.000Z","layout":"page","_content":"\n# 🎨 作品集\n\n> 这里展示我在AI转型路上的实战项目，每个作品都是技术迁移的见证\n\n---\n\n## 🧠 MBTI 性格测试网站\n\n### 📋 项目简介\n一个基于MBTI理论的在线性格测试平台，帮助用户了解自己的性格类型。\n\n### 🛠️ 技术栈\n- **前端**：HTML5, CSS3, JavaScript\n- **AI工具**：Cursor AI 辅助开发\n- **部署**：GitHub Pages\n\n### ✨ 核心功能\n- 16种MBTI性格类型测试\n- 实时结果分析\n- 响应式设计，支持移动端\n- 简洁优雅的用户界面\n\n### 🔗 项目链接\n- **在线体验**：[MBTI测试网站](https://mbtitestpro.lol/)\n- **源码地址**：[GitHub仓库](https://github.com/KennanYang/mbti_web_project)\n\n### 💡 开发心得\n这是我在AI转型路上的第一个实战项目，使用Cursor AI在5分钟内完成了基础框架搭建，真正体验到了AI工具对开发效率的提升。\n\n---\n\n## 🛠️ 恺南AI工具箱导航站\n\n### 📋 项目简介\n一个专注于AI工具的导航网站，收集整理了各类实用的AI工具和资源，为程序员和AI爱好者提供一站式工具导航。\n\n### 🛠️ 技术栈\n- **前端**：HTML5, CSS3, JavaScript\n- **AI工具**：Cursor AI 快速开发\n- **部署**：GitHub Pages\n\n### ✨ 核心功能\n- AI工具分类导航\n- 工具使用指南\n- 实时更新最新AI工具\n- 用户友好的搜索功能\n\n### 🔗 项目链接\n- **在线访问**：[恺南AI工具箱](https://aitoolbox.uk/)\n- **源码地址**：[GitHub仓库](https://github.com/KennanYang/ai_tools_web)\n\n### 💡 开发心得\n这个项目展示了AI工具在网站开发中的强大能力，使用Cursor AI在一小时内完成了整个导航站的开发，包括界面设计、功能实现和部署上线。\n\n---\n\n## 🔧 Bolt Prompt Helper - Chrome插件\n\n### 📋 项目简介\n基于Bolt New开发的Chrome扩展插件，专门用于管理和优化AI提示词，帮助用户提高AI工具使用效率。\n\n### 🛠️ 技术栈\n- **Chrome Extension**：JavaScript, Chrome Extension API\n- **AI工具**：Bolt New 零代码开发\n- **前端**：HTML5, CSS3, JavaScript\n- **部署**：Chrome Web Store\n\n### ✨ 核心功能\n- 提示词批量处理和管理\n- 智能优化建议\n- 一键导出功能\n- 跨平台同步\n- 实时提示词分析\n\n### 🔗 项目链接\n- **在线演示**：[Bolt Prompt Helper](https://boltpromothelper.uk/)\n- **源码地址**：[GitHub仓库](https://github.com/KennanYang/bolt-helper)\n\n### 💡 开发心得\n这是我在@码叔编程线下活动中学到的新技能，使用Bolt New在3-4小时内完成了从零到可用的Chrome插件开发，真正体验到了AI工具在插件开发中的强大能力。\n\n---\n\n## 🚀 技术迁移记录\n\n### 从传统开发到AI辅助开发\n1. **开发效率提升**：从传统手动编码到AI辅助开发，效率提升300%\n2. **技术栈扩展**：从Java后端扩展到全栈开发\n3. **工具链优化**：掌握Cursor AI、ChatGPT等AI开发工具\n\n### 项目特点\n- **真实项目**：所有作品都是实际可用的产品\n- **技术实用**：专注于解决实际问题\n- **持续更新**：跟随AI技术发展不断迭代\n\n---\n\n## 📞 合作交流\n\n如果你对我的作品感兴趣，或者想要技术交流，欢迎联系：\n\n- **微信**：Kennan1048 （备注 恺南AI实战派）\n- **邮箱**：kennan1048125026@gmail.com\n\n**让我们一起在AI时代创造更多可能！** 🚀 ","source":"portfolio/index.md","raw":"---\ntitle: 作品集\ndate: 2025-07-09 22:14:57\nlayout: page\n---\n\n# 🎨 作品集\n\n> 这里展示我在AI转型路上的实战项目，每个作品都是技术迁移的见证\n\n---\n\n## 🧠 MBTI 性格测试网站\n\n### 📋 项目简介\n一个基于MBTI理论的在线性格测试平台，帮助用户了解自己的性格类型。\n\n### 🛠️ 技术栈\n- **前端**：HTML5, CSS3, JavaScript\n- **AI工具**：Cursor AI 辅助开发\n- **部署**：GitHub Pages\n\n### ✨ 核心功能\n- 16种MBTI性格类型测试\n- 实时结果分析\n- 响应式设计，支持移动端\n- 简洁优雅的用户界面\n\n### 🔗 项目链接\n- **在线体验**：[MBTI测试网站](https://mbtitestpro.lol/)\n- **源码地址**：[GitHub仓库](https://github.com/KennanYang/mbti_web_project)\n\n### 💡 开发心得\n这是我在AI转型路上的第一个实战项目，使用Cursor AI在5分钟内完成了基础框架搭建，真正体验到了AI工具对开发效率的提升。\n\n---\n\n## 🛠️ 恺南AI工具箱导航站\n\n### 📋 项目简介\n一个专注于AI工具的导航网站，收集整理了各类实用的AI工具和资源，为程序员和AI爱好者提供一站式工具导航。\n\n### 🛠️ 技术栈\n- **前端**：HTML5, CSS3, JavaScript\n- **AI工具**：Cursor AI 快速开发\n- **部署**：GitHub Pages\n\n### ✨ 核心功能\n- AI工具分类导航\n- 工具使用指南\n- 实时更新最新AI工具\n- 用户友好的搜索功能\n\n### 🔗 项目链接\n- **在线访问**：[恺南AI工具箱](https://aitoolbox.uk/)\n- **源码地址**：[GitHub仓库](https://github.com/KennanYang/ai_tools_web)\n\n### 💡 开发心得\n这个项目展示了AI工具在网站开发中的强大能力，使用Cursor AI在一小时内完成了整个导航站的开发，包括界面设计、功能实现和部署上线。\n\n---\n\n## 🔧 Bolt Prompt Helper - Chrome插件\n\n### 📋 项目简介\n基于Bolt New开发的Chrome扩展插件，专门用于管理和优化AI提示词，帮助用户提高AI工具使用效率。\n\n### 🛠️ 技术栈\n- **Chrome Extension**：JavaScript, Chrome Extension API\n- **AI工具**：Bolt New 零代码开发\n- **前端**：HTML5, CSS3, JavaScript\n- **部署**：Chrome Web Store\n\n### ✨ 核心功能\n- 提示词批量处理和管理\n- 智能优化建议\n- 一键导出功能\n- 跨平台同步\n- 实时提示词分析\n\n### 🔗 项目链接\n- **在线演示**：[Bolt Prompt Helper](https://boltpromothelper.uk/)\n- **源码地址**：[GitHub仓库](https://github.com/KennanYang/bolt-helper)\n\n### 💡 开发心得\n这是我在@码叔编程线下活动中学到的新技能，使用Bolt New在3-4小时内完成了从零到可用的Chrome插件开发，真正体验到了AI工具在插件开发中的强大能力。\n\n---\n\n## 🚀 技术迁移记录\n\n### 从传统开发到AI辅助开发\n1. **开发效率提升**：从传统手动编码到AI辅助开发，效率提升300%\n2. **技术栈扩展**：从Java后端扩展到全栈开发\n3. **工具链优化**：掌握Cursor AI、ChatGPT等AI开发工具\n\n### 项目特点\n- **真实项目**：所有作品都是实际可用的产品\n- **技术实用**：专注于解决实际问题\n- **持续更新**：跟随AI技术发展不断迭代\n\n---\n\n## 📞 合作交流\n\n如果你对我的作品感兴趣，或者想要技术交流，欢迎联系：\n\n- **微信**：Kennan1048 （备注 恺南AI实战派）\n- **邮箱**：kennan1048125026@gmail.com\n\n**让我们一起在AI时代创造更多可能！** 🚀 ","updated":"2025-07-30T14:08:04.616Z","path":"portfolio/index.html","comments":1,"_id":"cmdq1k3qh0008u4vob9gfbd7j","content":"<h1 id=\"🎨-作品集\"><a href=\"#🎨-作品集\" class=\"headerlink\" title=\"🎨 作品集\"></a>🎨 作品集</h1><blockquote>\n<p>这里展示我在AI转型路上的实战项目，每个作品都是技术迁移的见证</p>\n</blockquote>\n<hr>\n<h2 id=\"🧠-MBTI-性格测试网站\"><a href=\"#🧠-MBTI-性格测试网站\" class=\"headerlink\" title=\"🧠 MBTI 性格测试网站\"></a>🧠 MBTI 性格测试网站</h2><h3 id=\"📋-项目简介\"><a href=\"#📋-项目简介\" class=\"headerlink\" title=\"📋 项目简介\"></a>📋 项目简介</h3><p>一个基于MBTI理论的在线性格测试平台，帮助用户了解自己的性格类型。</p>\n<h3 id=\"🛠️-技术栈\"><a href=\"#🛠️-技术栈\" class=\"headerlink\" title=\"🛠️ 技术栈\"></a>🛠️ 技术栈</h3><ul>\n<li><strong>前端</strong>：HTML5, CSS3, JavaScript</li>\n<li><strong>AI工具</strong>：Cursor AI 辅助开发</li>\n<li><strong>部署</strong>：GitHub Pages</li>\n</ul>\n<h3 id=\"✨-核心功能\"><a href=\"#✨-核心功能\" class=\"headerlink\" title=\"✨ 核心功能\"></a>✨ 核心功能</h3><ul>\n<li>16种MBTI性格类型测试</li>\n<li>实时结果分析</li>\n<li>响应式设计，支持移动端</li>\n<li>简洁优雅的用户界面</li>\n</ul>\n<h3 id=\"🔗-项目链接\"><a href=\"#🔗-项目链接\" class=\"headerlink\" title=\"🔗 项目链接\"></a>🔗 项目链接</h3><ul>\n<li><strong>在线体验</strong>：<a href=\"https://mbtitestpro.lol/\">MBTI测试网站</a></li>\n<li><strong>源码地址</strong>：<a href=\"https://github.com/KennanYang/mbti_web_project\">GitHub仓库</a></li>\n</ul>\n<h3 id=\"💡-开发心得\"><a href=\"#💡-开发心得\" class=\"headerlink\" title=\"💡 开发心得\"></a>💡 开发心得</h3><p>这是我在AI转型路上的第一个实战项目，使用Cursor AI在5分钟内完成了基础框架搭建，真正体验到了AI工具对开发效率的提升。</p>\n<hr>\n<h2 id=\"🛠️-恺南AI工具箱导航站\"><a href=\"#🛠️-恺南AI工具箱导航站\" class=\"headerlink\" title=\"🛠️ 恺南AI工具箱导航站\"></a>🛠️ 恺南AI工具箱导航站</h2><h3 id=\"📋-项目简介-1\"><a href=\"#📋-项目简介-1\" class=\"headerlink\" title=\"📋 项目简介\"></a>📋 项目简介</h3><p>一个专注于AI工具的导航网站，收集整理了各类实用的AI工具和资源，为程序员和AI爱好者提供一站式工具导航。</p>\n<h3 id=\"🛠️-技术栈-1\"><a href=\"#🛠️-技术栈-1\" class=\"headerlink\" title=\"🛠️ 技术栈\"></a>🛠️ 技术栈</h3><ul>\n<li><strong>前端</strong>：HTML5, CSS3, JavaScript</li>\n<li><strong>AI工具</strong>：Cursor AI 快速开发</li>\n<li><strong>部署</strong>：GitHub Pages</li>\n</ul>\n<h3 id=\"✨-核心功能-1\"><a href=\"#✨-核心功能-1\" class=\"headerlink\" title=\"✨ 核心功能\"></a>✨ 核心功能</h3><ul>\n<li>AI工具分类导航</li>\n<li>工具使用指南</li>\n<li>实时更新最新AI工具</li>\n<li>用户友好的搜索功能</li>\n</ul>\n<h3 id=\"🔗-项目链接-1\"><a href=\"#🔗-项目链接-1\" class=\"headerlink\" title=\"🔗 项目链接\"></a>🔗 项目链接</h3><ul>\n<li><strong>在线访问</strong>：<a href=\"https://aitoolbox.uk/\">恺南AI工具箱</a></li>\n<li><strong>源码地址</strong>：<a href=\"https://github.com/KennanYang/ai_tools_web\">GitHub仓库</a></li>\n</ul>\n<h3 id=\"💡-开发心得-1\"><a href=\"#💡-开发心得-1\" class=\"headerlink\" title=\"💡 开发心得\"></a>💡 开发心得</h3><p>这个项目展示了AI工具在网站开发中的强大能力，使用Cursor AI在一小时内完成了整个导航站的开发，包括界面设计、功能实现和部署上线。</p>\n<hr>\n<h2 id=\"🔧-Bolt-Prompt-Helper-Chrome插件\"><a href=\"#🔧-Bolt-Prompt-Helper-Chrome插件\" class=\"headerlink\" title=\"🔧 Bolt Prompt Helper - Chrome插件\"></a>🔧 Bolt Prompt Helper - Chrome插件</h2><h3 id=\"📋-项目简介-2\"><a href=\"#📋-项目简介-2\" class=\"headerlink\" title=\"📋 项目简介\"></a>📋 项目简介</h3><p>基于Bolt New开发的Chrome扩展插件，专门用于管理和优化AI提示词，帮助用户提高AI工具使用效率。</p>\n<h3 id=\"🛠️-技术栈-2\"><a href=\"#🛠️-技术栈-2\" class=\"headerlink\" title=\"🛠️ 技术栈\"></a>🛠️ 技术栈</h3><ul>\n<li><strong>Chrome Extension</strong>：JavaScript, Chrome Extension API</li>\n<li><strong>AI工具</strong>：Bolt New 零代码开发</li>\n<li><strong>前端</strong>：HTML5, CSS3, JavaScript</li>\n<li><strong>部署</strong>：Chrome Web Store</li>\n</ul>\n<h3 id=\"✨-核心功能-2\"><a href=\"#✨-核心功能-2\" class=\"headerlink\" title=\"✨ 核心功能\"></a>✨ 核心功能</h3><ul>\n<li>提示词批量处理和管理</li>\n<li>智能优化建议</li>\n<li>一键导出功能</li>\n<li>跨平台同步</li>\n<li>实时提示词分析</li>\n</ul>\n<h3 id=\"🔗-项目链接-2\"><a href=\"#🔗-项目链接-2\" class=\"headerlink\" title=\"🔗 项目链接\"></a>🔗 项目链接</h3><ul>\n<li><strong>在线演示</strong>：<a href=\"https://boltpromothelper.uk/\">Bolt Prompt Helper</a></li>\n<li><strong>源码地址</strong>：<a href=\"https://github.com/KennanYang/bolt-helper\">GitHub仓库</a></li>\n</ul>\n<h3 id=\"💡-开发心得-2\"><a href=\"#💡-开发心得-2\" class=\"headerlink\" title=\"💡 开发心得\"></a>💡 开发心得</h3><p>这是我在@码叔编程线下活动中学到的新技能，使用Bolt New在3-4小时内完成了从零到可用的Chrome插件开发，真正体验到了AI工具在插件开发中的强大能力。</p>\n<hr>\n<h2 id=\"🚀-技术迁移记录\"><a href=\"#🚀-技术迁移记录\" class=\"headerlink\" title=\"🚀 技术迁移记录\"></a>🚀 技术迁移记录</h2><h3 id=\"从传统开发到AI辅助开发\"><a href=\"#从传统开发到AI辅助开发\" class=\"headerlink\" title=\"从传统开发到AI辅助开发\"></a>从传统开发到AI辅助开发</h3><ol>\n<li><strong>开发效率提升</strong>：从传统手动编码到AI辅助开发，效率提升300%</li>\n<li><strong>技术栈扩展</strong>：从Java后端扩展到全栈开发</li>\n<li><strong>工具链优化</strong>：掌握Cursor AI、ChatGPT等AI开发工具</li>\n</ol>\n<h3 id=\"项目特点\"><a href=\"#项目特点\" class=\"headerlink\" title=\"项目特点\"></a>项目特点</h3><ul>\n<li><strong>真实项目</strong>：所有作品都是实际可用的产品</li>\n<li><strong>技术实用</strong>：专注于解决实际问题</li>\n<li><strong>持续更新</strong>：跟随AI技术发展不断迭代</li>\n</ul>\n<hr>\n<h2 id=\"📞-合作交流\"><a href=\"#📞-合作交流\" class=\"headerlink\" title=\"📞 合作交流\"></a>📞 合作交流</h2><p>如果你对我的作品感兴趣，或者想要技术交流，欢迎联系：</p>\n<ul>\n<li><strong>微信</strong>：Kennan1048 （备注 恺南AI实战派）</li>\n<li><strong>邮箱</strong>：kennan1048125026@gmail.com</li>\n</ul>\n<p><strong>让我们一起在AI时代创造更多可能！</strong> 🚀 </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"🎨-作品集\"><a href=\"#🎨-作品集\" class=\"headerlink\" title=\"🎨 作品集\"></a>🎨 作品集</h1><blockquote>\n<p>这里展示我在AI转型路上的实战项目，每个作品都是技术迁移的见证</p>\n</blockquote>\n<hr>\n<h2 id=\"🧠-MBTI-性格测试网站\"><a href=\"#🧠-MBTI-性格测试网站\" class=\"headerlink\" title=\"🧠 MBTI 性格测试网站\"></a>🧠 MBTI 性格测试网站</h2><h3 id=\"📋-项目简介\"><a href=\"#📋-项目简介\" class=\"headerlink\" title=\"📋 项目简介\"></a>📋 项目简介</h3><p>一个基于MBTI理论的在线性格测试平台，帮助用户了解自己的性格类型。</p>\n<h3 id=\"🛠️-技术栈\"><a href=\"#🛠️-技术栈\" class=\"headerlink\" title=\"🛠️ 技术栈\"></a>🛠️ 技术栈</h3><ul>\n<li><strong>前端</strong>：HTML5, CSS3, JavaScript</li>\n<li><strong>AI工具</strong>：Cursor AI 辅助开发</li>\n<li><strong>部署</strong>：GitHub Pages</li>\n</ul>\n<h3 id=\"✨-核心功能\"><a href=\"#✨-核心功能\" class=\"headerlink\" title=\"✨ 核心功能\"></a>✨ 核心功能</h3><ul>\n<li>16种MBTI性格类型测试</li>\n<li>实时结果分析</li>\n<li>响应式设计，支持移动端</li>\n<li>简洁优雅的用户界面</li>\n</ul>\n<h3 id=\"🔗-项目链接\"><a href=\"#🔗-项目链接\" class=\"headerlink\" title=\"🔗 项目链接\"></a>🔗 项目链接</h3><ul>\n<li><strong>在线体验</strong>：<a href=\"https://mbtitestpro.lol/\">MBTI测试网站</a></li>\n<li><strong>源码地址</strong>：<a href=\"https://github.com/KennanYang/mbti_web_project\">GitHub仓库</a></li>\n</ul>\n<h3 id=\"💡-开发心得\"><a href=\"#💡-开发心得\" class=\"headerlink\" title=\"💡 开发心得\"></a>💡 开发心得</h3><p>这是我在AI转型路上的第一个实战项目，使用Cursor AI在5分钟内完成了基础框架搭建，真正体验到了AI工具对开发效率的提升。</p>\n<hr>\n<h2 id=\"🛠️-恺南AI工具箱导航站\"><a href=\"#🛠️-恺南AI工具箱导航站\" class=\"headerlink\" title=\"🛠️ 恺南AI工具箱导航站\"></a>🛠️ 恺南AI工具箱导航站</h2><h3 id=\"📋-项目简介-1\"><a href=\"#📋-项目简介-1\" class=\"headerlink\" title=\"📋 项目简介\"></a>📋 项目简介</h3><p>一个专注于AI工具的导航网站，收集整理了各类实用的AI工具和资源，为程序员和AI爱好者提供一站式工具导航。</p>\n<h3 id=\"🛠️-技术栈-1\"><a href=\"#🛠️-技术栈-1\" class=\"headerlink\" title=\"🛠️ 技术栈\"></a>🛠️ 技术栈</h3><ul>\n<li><strong>前端</strong>：HTML5, CSS3, JavaScript</li>\n<li><strong>AI工具</strong>：Cursor AI 快速开发</li>\n<li><strong>部署</strong>：GitHub Pages</li>\n</ul>\n<h3 id=\"✨-核心功能-1\"><a href=\"#✨-核心功能-1\" class=\"headerlink\" title=\"✨ 核心功能\"></a>✨ 核心功能</h3><ul>\n<li>AI工具分类导航</li>\n<li>工具使用指南</li>\n<li>实时更新最新AI工具</li>\n<li>用户友好的搜索功能</li>\n</ul>\n<h3 id=\"🔗-项目链接-1\"><a href=\"#🔗-项目链接-1\" class=\"headerlink\" title=\"🔗 项目链接\"></a>🔗 项目链接</h3><ul>\n<li><strong>在线访问</strong>：<a href=\"https://aitoolbox.uk/\">恺南AI工具箱</a></li>\n<li><strong>源码地址</strong>：<a href=\"https://github.com/KennanYang/ai_tools_web\">GitHub仓库</a></li>\n</ul>\n<h3 id=\"💡-开发心得-1\"><a href=\"#💡-开发心得-1\" class=\"headerlink\" title=\"💡 开发心得\"></a>💡 开发心得</h3><p>这个项目展示了AI工具在网站开发中的强大能力，使用Cursor AI在一小时内完成了整个导航站的开发，包括界面设计、功能实现和部署上线。</p>\n<hr>\n<h2 id=\"🔧-Bolt-Prompt-Helper-Chrome插件\"><a href=\"#🔧-Bolt-Prompt-Helper-Chrome插件\" class=\"headerlink\" title=\"🔧 Bolt Prompt Helper - Chrome插件\"></a>🔧 Bolt Prompt Helper - Chrome插件</h2><h3 id=\"📋-项目简介-2\"><a href=\"#📋-项目简介-2\" class=\"headerlink\" title=\"📋 项目简介\"></a>📋 项目简介</h3><p>基于Bolt New开发的Chrome扩展插件，专门用于管理和优化AI提示词，帮助用户提高AI工具使用效率。</p>\n<h3 id=\"🛠️-技术栈-2\"><a href=\"#🛠️-技术栈-2\" class=\"headerlink\" title=\"🛠️ 技术栈\"></a>🛠️ 技术栈</h3><ul>\n<li><strong>Chrome Extension</strong>：JavaScript, Chrome Extension API</li>\n<li><strong>AI工具</strong>：Bolt New 零代码开发</li>\n<li><strong>前端</strong>：HTML5, CSS3, JavaScript</li>\n<li><strong>部署</strong>：Chrome Web Store</li>\n</ul>\n<h3 id=\"✨-核心功能-2\"><a href=\"#✨-核心功能-2\" class=\"headerlink\" title=\"✨ 核心功能\"></a>✨ 核心功能</h3><ul>\n<li>提示词批量处理和管理</li>\n<li>智能优化建议</li>\n<li>一键导出功能</li>\n<li>跨平台同步</li>\n<li>实时提示词分析</li>\n</ul>\n<h3 id=\"🔗-项目链接-2\"><a href=\"#🔗-项目链接-2\" class=\"headerlink\" title=\"🔗 项目链接\"></a>🔗 项目链接</h3><ul>\n<li><strong>在线演示</strong>：<a href=\"https://boltpromothelper.uk/\">Bolt Prompt Helper</a></li>\n<li><strong>源码地址</strong>：<a href=\"https://github.com/KennanYang/bolt-helper\">GitHub仓库</a></li>\n</ul>\n<h3 id=\"💡-开发心得-2\"><a href=\"#💡-开发心得-2\" class=\"headerlink\" title=\"💡 开发心得\"></a>💡 开发心得</h3><p>这是我在@码叔编程线下活动中学到的新技能，使用Bolt New在3-4小时内完成了从零到可用的Chrome插件开发，真正体验到了AI工具在插件开发中的强大能力。</p>\n<hr>\n<h2 id=\"🚀-技术迁移记录\"><a href=\"#🚀-技术迁移记录\" class=\"headerlink\" title=\"🚀 技术迁移记录\"></a>🚀 技术迁移记录</h2><h3 id=\"从传统开发到AI辅助开发\"><a href=\"#从传统开发到AI辅助开发\" class=\"headerlink\" title=\"从传统开发到AI辅助开发\"></a>从传统开发到AI辅助开发</h3><ol>\n<li><strong>开发效率提升</strong>：从传统手动编码到AI辅助开发，效率提升300%</li>\n<li><strong>技术栈扩展</strong>：从Java后端扩展到全栈开发</li>\n<li><strong>工具链优化</strong>：掌握Cursor AI、ChatGPT等AI开发工具</li>\n</ol>\n<h3 id=\"项目特点\"><a href=\"#项目特点\" class=\"headerlink\" title=\"项目特点\"></a>项目特点</h3><ul>\n<li><strong>真实项目</strong>：所有作品都是实际可用的产品</li>\n<li><strong>技术实用</strong>：专注于解决实际问题</li>\n<li><strong>持续更新</strong>：跟随AI技术发展不断迭代</li>\n</ul>\n<hr>\n<h2 id=\"📞-合作交流\"><a href=\"#📞-合作交流\" class=\"headerlink\" title=\"📞 合作交流\"></a>📞 合作交流</h2><p>如果你对我的作品感兴趣，或者想要技术交流，欢迎联系：</p>\n<ul>\n<li><strong>微信</strong>：Kennan1048 （备注 恺南AI实战派）</li>\n<li><strong>邮箱</strong>：kennan1048125026@gmail.com</li>\n</ul>\n<p><strong>让我们一起在AI时代创造更多可能！</strong> 🚀 </p>\n"},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\nlayout: \"tags\"\n---","date":"2022-05-09T12:17:20.042Z","updated":"2022-05-09T12:17:20.042Z","path":"tags/index.html","comments":1,"_id":"cmdq1k3qi000au4vo14in4y16","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World - 用Github pages和Hexo搭建自己的个人主页","date":"2022-02-24T02:54:57.000Z","top":true,"_content":"\n**Hello world**\n欢迎来到我的博客，我是Kennan，一名计算机专业的研究生。以前在不同的地方写一些文章博客，但会受到平台的各种限制和广告。\n这里在前辈的指导下，通过 [github pages平台](https://docs.github.com/en/pages) 和 [Hexo博客框架](https://hexo.io/) 搭建了一个自己的个人主页，在上面分享一些自己的经历和学习心得。\n下面记录一下我的搭建过程，请多多指教，一些相关文件可参考我的 [KennanYang.github.io](https://github.com/KennanYang/KennanYang.github.io) 项目\n<!--more-->\n##  1.搭建Hexo\n[Hexo](https://hexo.io/)是基于Node.js写的，也需要git管理文章上传到github，所以需要先安装git和nodeJS\n### 安装git\nwindows：到git官网上下载,[Download git](https://gitforwindows.org/)\nlinux: \n\n```bash\nsudo apt-get install git\n```\n\n使用`git --version`查看是否安装正确\n### 安装Node.js\nwindows：[Node.js官网](https://nodejs.org/en/)选择LTS版本（稳定版）。\n\nlinux：\n```bash\nsudo apt-get install nodejs\nsudo apt-get install npm\n```\n使用`node -v`和`npm -v`查看是否安装正确\n### 安装Hexo\n创建一个文件夹【filename】(我的叫 hexoblog)，然后`cd`到这个文件夹下\n```bash\nnpm install -g hexo-cli\n```\n用`hexo -v`查看一下版本\n\n至此，安装完毕，开始配置Hexo项目\n### 配置Hexo\n初始化Hexo\n\n```bash\nhexo init hexoblog\ncd hexoblog //进入这个hexoblog文件夹\nnpm install\n```\n然后就可以查看官方的demo了\n\n```bash\nhexo generate //产生网页，可缩写hexo g\nhexo server //挂到本地服务器打开，可缩写hexo s\n```\n\n在浏览器输入localhost:4000就可以看到你生成的博客，官方默认主题是landscope\n\n## 2.部署到github pages\n直接在github page平台上托管我们的博客，便于维护，下面是把Hexo搭好的博客部署到github pages的配置方式。\n### 注册github，新建repo\n新建一个自己用户名命名的仓库，后面加.github.io，像我这样，其他设置默认就好，点击create repository。\n![创建repo](https://img-blog.csdnimg.cn/c5bdfacd70c94789bcbe12c7a1c01da9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n### 生成SSH添加到GitHub\n回到你的git bash中，\n\n```bash\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n然后创建SSH,一路回车\n\n```bash\nssh-keygen -t rsa -C \"youremail\"\n```\n这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。\n![ssh密钥](https://img-blog.csdnimg.cn/1b4a2ce586c5423c91354dd38ecee893.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\nssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。\n![github->settings](https://img-blog.csdnimg.cn/51f61bbe5dc64632be0158105eb15d3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_11,color_FFFFFF,t_70,g_se,x_5)\n\n而后在GitHub的setting中，找到SSH keys的设置选项，点击`New SSH key`把你的`id_rsa.pub`里面的信息复制进去。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b3cb64a9604946a38fc3f8bd85ce4f6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n\n在gitbash中，查看是否成功\n```bash\nssh -T git@github.com\n```\n### 部署Hexo到github\n打开站点配置文件 _config.yml，翻到最后，修改为\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。\n\n```bash\nnpm install hexo-deployer-git --save\n```\n然后\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n\n其中 `hexo clean`清除了你之前生成的东西，也可以不加。\n`hexo generate` 是生成静态文章，可以用 `hexo g`缩写\n`hexo deploy` 部署文章，可以用`hexo d`缩写\n\n注意deploy时可能要你输入username和password。\n\n部署后需要**等待一段时间**，然后就可以在`http://yourname.github.io`看到Hexo 博客了，这里的内容和`hexo server`生成的内容完全相同。\n## 3.绑定个人域名\n完成上面的步骤后，可以使用`http://yourname.github.io`查看个人主页，如何自定义一个属于自己的域名呢？\n### 购买域名\n注册一个[阿里云账户](https://www.aliyun.com/?spm=5176.100251.top-nav.dlogo.5af94f152mfbDz),在阿里云上买一个域名，我买的是`kennan-yang.top`\n\n先实名认证，然后在域名控制台添加解析，这里需要**等半天时间**。\n![域名解析](https://img-blog.csdnimg.cn/05356c75bdfa48d593e1789995afe188.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n登录GitHub，进入之前创建的仓库`yourname.github.io`，点击`settings->pages`，设置`Custom domain`，输入你的域名`kennan-yang.top` 并`save`。\n![Custom domain](https://img-blog.csdnimg.cn/4ca6ad5c655b4eaab7f534ed8cc78ab7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n### 绑定域名\n然后在你的博客文件夹（如我的hexoblog）的`source`目录中创建一个名为`CNAME`文件，不要后缀。写上你的域名。\n![CNAME](https://img-blog.csdnimg.cn/e26efd4edb2a4772a54ded2542a28b14.png)\n然后就是最常用的下面几条命令，当配置完成之后进行这些操作即可。\n```bash\nhexo clean # 清理缓存\nhexo g # hexo generate 生成静态页\nhexo s # hexo server 本地预览（非必须）\nhexo d # hexo deploy 部署到github pages\n```\n部署完成后就可以用你的域名打开自己的博客啦！\n# 参考资料\nHexo还有更多不同的主题和配置，可参考下面的资料进行个性化设置。\n1. [CSDN: hexo史上最全搭建教程](https://blog.csdn.net/sinat_37781304/article/details/82729029)\n 2. [github pages](https://docs.github.com/en/pages) \n 3. [Hexo官方文档](https://hexo.io/)\n 4. [Hexo的岛主题](https://shen-yu.gitee.io/)","source":"_posts/000-hello-world.md","raw":"---\ntitle: Hello World - 用Github pages和Hexo搭建自己的个人主页\ndate: 2022-02-24 10:54:57\ncategories: 搭建环境\ntags:\n- git\n- 搭建环境\n  \ntop: True\n---\n\n**Hello world**\n欢迎来到我的博客，我是Kennan，一名计算机专业的研究生。以前在不同的地方写一些文章博客，但会受到平台的各种限制和广告。\n这里在前辈的指导下，通过 [github pages平台](https://docs.github.com/en/pages) 和 [Hexo博客框架](https://hexo.io/) 搭建了一个自己的个人主页，在上面分享一些自己的经历和学习心得。\n下面记录一下我的搭建过程，请多多指教，一些相关文件可参考我的 [KennanYang.github.io](https://github.com/KennanYang/KennanYang.github.io) 项目\n<!--more-->\n##  1.搭建Hexo\n[Hexo](https://hexo.io/)是基于Node.js写的，也需要git管理文章上传到github，所以需要先安装git和nodeJS\n### 安装git\nwindows：到git官网上下载,[Download git](https://gitforwindows.org/)\nlinux: \n\n```bash\nsudo apt-get install git\n```\n\n使用`git --version`查看是否安装正确\n### 安装Node.js\nwindows：[Node.js官网](https://nodejs.org/en/)选择LTS版本（稳定版）。\n\nlinux：\n```bash\nsudo apt-get install nodejs\nsudo apt-get install npm\n```\n使用`node -v`和`npm -v`查看是否安装正确\n### 安装Hexo\n创建一个文件夹【filename】(我的叫 hexoblog)，然后`cd`到这个文件夹下\n```bash\nnpm install -g hexo-cli\n```\n用`hexo -v`查看一下版本\n\n至此，安装完毕，开始配置Hexo项目\n### 配置Hexo\n初始化Hexo\n\n```bash\nhexo init hexoblog\ncd hexoblog //进入这个hexoblog文件夹\nnpm install\n```\n然后就可以查看官方的demo了\n\n```bash\nhexo generate //产生网页，可缩写hexo g\nhexo server //挂到本地服务器打开，可缩写hexo s\n```\n\n在浏览器输入localhost:4000就可以看到你生成的博客，官方默认主题是landscope\n\n## 2.部署到github pages\n直接在github page平台上托管我们的博客，便于维护，下面是把Hexo搭好的博客部署到github pages的配置方式。\n### 注册github，新建repo\n新建一个自己用户名命名的仓库，后面加.github.io，像我这样，其他设置默认就好，点击create repository。\n![创建repo](https://img-blog.csdnimg.cn/c5bdfacd70c94789bcbe12c7a1c01da9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n### 生成SSH添加到GitHub\n回到你的git bash中，\n\n```bash\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n```\n\n然后创建SSH,一路回车\n\n```bash\nssh-keygen -t rsa -C \"youremail\"\n```\n这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。\n![ssh密钥](https://img-blog.csdnimg.cn/1b4a2ce586c5423c91354dd38ecee893.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\nssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。\n![github->settings](https://img-blog.csdnimg.cn/51f61bbe5dc64632be0158105eb15d3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_11,color_FFFFFF,t_70,g_se,x_5)\n\n而后在GitHub的setting中，找到SSH keys的设置选项，点击`New SSH key`把你的`id_rsa.pub`里面的信息复制进去。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b3cb64a9604946a38fc3f8bd85ce4f6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n\n在gitbash中，查看是否成功\n```bash\nssh -T git@github.com\n```\n### 部署Hexo到github\n打开站点配置文件 _config.yml，翻到最后，修改为\n```bash\ndeploy:\n  type: git\n  repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n  branch: master\n```\n这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。\n\n```bash\nnpm install hexo-deployer-git --save\n```\n然后\n```bash\nhexo clean\nhexo generate\nhexo deploy\n```\n\n其中 `hexo clean`清除了你之前生成的东西，也可以不加。\n`hexo generate` 是生成静态文章，可以用 `hexo g`缩写\n`hexo deploy` 部署文章，可以用`hexo d`缩写\n\n注意deploy时可能要你输入username和password。\n\n部署后需要**等待一段时间**，然后就可以在`http://yourname.github.io`看到Hexo 博客了，这里的内容和`hexo server`生成的内容完全相同。\n## 3.绑定个人域名\n完成上面的步骤后，可以使用`http://yourname.github.io`查看个人主页，如何自定义一个属于自己的域名呢？\n### 购买域名\n注册一个[阿里云账户](https://www.aliyun.com/?spm=5176.100251.top-nav.dlogo.5af94f152mfbDz),在阿里云上买一个域名，我买的是`kennan-yang.top`\n\n先实名认证，然后在域名控制台添加解析，这里需要**等半天时间**。\n![域名解析](https://img-blog.csdnimg.cn/05356c75bdfa48d593e1789995afe188.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n登录GitHub，进入之前创建的仓库`yourname.github.io`，点击`settings->pages`，设置`Custom domain`，输入你的域名`kennan-yang.top` 并`save`。\n![Custom domain](https://img-blog.csdnimg.cn/4ca6ad5c655b4eaab7f534ed8cc78ab7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16)\n### 绑定域名\n然后在你的博客文件夹（如我的hexoblog）的`source`目录中创建一个名为`CNAME`文件，不要后缀。写上你的域名。\n![CNAME](https://img-blog.csdnimg.cn/e26efd4edb2a4772a54ded2542a28b14.png)\n然后就是最常用的下面几条命令，当配置完成之后进行这些操作即可。\n```bash\nhexo clean # 清理缓存\nhexo g # hexo generate 生成静态页\nhexo s # hexo server 本地预览（非必须）\nhexo d # hexo deploy 部署到github pages\n```\n部署完成后就可以用你的域名打开自己的博客啦！\n# 参考资料\nHexo还有更多不同的主题和配置，可参考下面的资料进行个性化设置。\n1. [CSDN: hexo史上最全搭建教程](https://blog.csdn.net/sinat_37781304/article/details/82729029)\n 2. [github pages](https://docs.github.com/en/pages) \n 3. [Hexo官方文档](https://hexo.io/)\n 4. [Hexo的岛主题](https://shen-yu.gitee.io/)","slug":"000-hello-world","published":1,"updated":"2025-07-13T06:57:10.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qa0001u4vo38916jqz","content":"<p><strong>Hello world</strong><br>欢迎来到我的博客，我是Kennan，一名计算机专业的研究生。以前在不同的地方写一些文章博客，但会受到平台的各种限制和广告。<br>这里在前辈的指导下，通过 <a href=\"https://docs.github.com/en/pages\">github pages平台</a> 和 <a href=\"https://hexo.io/\">Hexo博客框架</a> 搭建了一个自己的个人主页，在上面分享一些自己的经历和学习心得。<br>下面记录一下我的搭建过程，请多多指教，一些相关文件可参考我的 <a href=\"https://github.com/KennanYang/KennanYang.github.io\">KennanYang.github.io</a> 项目<br><span id=\"more\"></span></p>\n<h2 id=\"1-搭建Hexo\"><a href=\"#1-搭建Hexo\" class=\"headerlink\" title=\"1.搭建Hexo\"></a>1.搭建Hexo</h2><p><a href=\"https://hexo.io/\">Hexo</a>是基于Node.js写的，也需要git管理文章上传到github，所以需要先安装git和nodeJS</p>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>windows：到git官网上下载,<a href=\"https://gitforwindows.org/\">Download git</a><br>linux: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install git</span><br></pre></td></tr></table></figure>\n<p>使用<code>git --version</code>查看是否安装正确</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>windows：<a href=\"https://nodejs.org/en/\">Node.js官网</a>选择LTS版本（稳定版）。</p>\n<p>linux：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install nodejs</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install npm</span><br></pre></td></tr></table></figure><br>使用<code>node -v</code>和<code>npm -v</code>查看是否安装正确</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>创建一个文件夹【filename】(我的叫 hexoblog)，然后<code>cd</code>到这个文件夹下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><br>用<code>hexo -v</code>查看一下版本</p>\n<p>至此，安装完毕，开始配置Hexo项目</p>\n<h3 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h3><p>初始化Hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init hexoblog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexoblog //进入这个hexoblog文件夹</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>然后就可以查看官方的demo了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate //产生网页，可缩写hexo g</span><br><span class=\"line\">hexo server //挂到本地服务器打开，可缩写hexo s</span><br></pre></td></tr></table></figure>\n<p>在浏览器输入localhost:4000就可以看到你生成的博客，官方默认主题是landscope</p>\n<h2 id=\"2-部署到github-pages\"><a href=\"#2-部署到github-pages\" class=\"headerlink\" title=\"2.部署到github pages\"></a>2.部署到github pages</h2><p>直接在github page平台上托管我们的博客，便于维护，下面是把Hexo搭好的博客部署到github pages的配置方式。</p>\n<h3 id=\"注册github，新建repo\"><a href=\"#注册github，新建repo\" class=\"headerlink\" title=\"注册github，新建repo\"></a>注册github，新建repo</h3><p>新建一个自己用户名命名的仓库，后面加.github.io，像我这样，其他设置默认就好，点击create repository。<br><img src=\"https://img-blog.csdnimg.cn/c5bdfacd70c94789bcbe12c7a1c01da9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"创建repo\"></p>\n<h3 id=\"生成SSH添加到GitHub\"><a href=\"#生成SSH添加到GitHub\" class=\"headerlink\" title=\"生成SSH添加到GitHub\"></a>生成SSH添加到GitHub</h3><p>回到你的git bash中，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;yourname&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n<p>然后创建SSH,一路回车</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。<br><img src=\"https://img-blog.csdnimg.cn/1b4a2ce586c5423c91354dd38ecee893.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"ssh密钥\"><br>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br><img src=\"https://img-blog.csdnimg.cn/51f61bbe5dc64632be0158105eb15d3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_11,color_FFFFFF,t_70,g_se,x_5\" alt=\"github-&gt;settings\"></p>\n<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code>把你的<code>id_rsa.pub</code>里面的信息复制进去。<br><img src=\"https://img-blog.csdnimg.cn/b3cb64a9604946a38fc3f8bd85ce4f6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<p>在gitbash中，查看是否成功<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"部署Hexo到github\"><a href=\"#部署Hexo到github\" class=\"headerlink\" title=\"部署Hexo到github\"></a>部署Hexo到github</h3><p>打开站点配置文件 _config.yml，翻到最后，修改为<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure><br>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 是生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>\n<p>注意deploy时可能要你输入username和password。</p>\n<p>部署后需要<strong>等待一段时间</strong>，然后就可以在<code>http://yourname.github.io</code>看到Hexo 博客了，这里的内容和<code>hexo server</code>生成的内容完全相同。</p>\n<h2 id=\"3-绑定个人域名\"><a href=\"#3-绑定个人域名\" class=\"headerlink\" title=\"3.绑定个人域名\"></a>3.绑定个人域名</h2><p>完成上面的步骤后，可以使用<code>http://yourname.github.io</code>查看个人主页，如何自定义一个属于自己的域名呢？</p>\n<h3 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h3><p>注册一个<a href=\"https://www.aliyun.com/?spm=5176.100251.top-nav.dlogo.5af94f152mfbDz\">阿里云账户</a>,在阿里云上买一个域名，我买的是<code>kennan-yang.top</code></p>\n<p>先实名认证，然后在域名控制台添加解析，这里需要<strong>等半天时间</strong>。<br><img src=\"https://img-blog.csdnimg.cn/05356c75bdfa48d593e1789995afe188.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"域名解析\"><br>登录GitHub，进入之前创建的仓库<code>yourname.github.io</code>，点击<code>settings-&gt;pages</code>，设置<code>Custom domain</code>，输入你的域名<code>kennan-yang.top</code> 并<code>save</code>。<br><img src=\"https://img-blog.csdnimg.cn/4ca6ad5c655b4eaab7f534ed8cc78ab7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"Custom domain\"></p>\n<h3 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h3><p>然后在你的博客文件夹（如我的hexoblog）的<code>source</code>目录中创建一个名为<code>CNAME</code>文件，不要后缀。写上你的域名。<br><img src=\"https://img-blog.csdnimg.cn/e26efd4edb2a4772a54ded2542a28b14.png\" alt=\"CNAME\"><br>然后就是最常用的下面几条命令，当配置完成之后进行这些操作即可。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\"># 清理缓存</span></span><br><span class=\"line\">hexo g <span class=\"comment\"># hexo generate 生成静态页</span></span><br><span class=\"line\">hexo s <span class=\"comment\"># hexo server 本地预览（非必须）</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># hexo deploy 部署到github pages</span></span><br></pre></td></tr></table></figure><br>部署完成后就可以用你的域名打开自己的博客啦！</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>Hexo还有更多不同的主题和配置，可参考下面的资料进行个性化设置。</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">CSDN: hexo史上最全搭建教程</a><ol>\n<li><a href=\"https://docs.github.com/en/pages\">github pages</a> </li>\n<li><a href=\"https://hexo.io/\">Hexo官方文档</a></li>\n<li><a href=\"https://shen-yu.gitee.io/\">Hexo的岛主题</a></li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><strong>Hello world</strong><br>欢迎来到我的博客，我是Kennan，一名计算机专业的研究生。以前在不同的地方写一些文章博客，但会受到平台的各种限制和广告。<br>这里在前辈的指导下，通过 <a href=\"https://docs.github.com/en/pages\">github pages平台</a> 和 <a href=\"https://hexo.io/\">Hexo博客框架</a> 搭建了一个自己的个人主页，在上面分享一些自己的经历和学习心得。<br>下面记录一下我的搭建过程，请多多指教，一些相关文件可参考我的 <a href=\"https://github.com/KennanYang/KennanYang.github.io\">KennanYang.github.io</a> 项目<br>","more":"</p>\n<h2 id=\"1-搭建Hexo\"><a href=\"#1-搭建Hexo\" class=\"headerlink\" title=\"1.搭建Hexo\"></a>1.搭建Hexo</h2><p><a href=\"https://hexo.io/\">Hexo</a>是基于Node.js写的，也需要git管理文章上传到github，所以需要先安装git和nodeJS</p>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>windows：到git官网上下载,<a href=\"https://gitforwindows.org/\">Download git</a><br>linux: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install git</span><br></pre></td></tr></table></figure>\n<p>使用<code>git --version</code>查看是否安装正确</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>windows：<a href=\"https://nodejs.org/en/\">Node.js官网</a>选择LTS版本（稳定版）。</p>\n<p>linux：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install nodejs</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install npm</span><br></pre></td></tr></table></figure><br>使用<code>node -v</code>和<code>npm -v</code>查看是否安装正确</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>创建一个文件夹【filename】(我的叫 hexoblog)，然后<code>cd</code>到这个文件夹下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><br>用<code>hexo -v</code>查看一下版本</p>\n<p>至此，安装完毕，开始配置Hexo项目</p>\n<h3 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h3><p>初始化Hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init hexoblog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexoblog //进入这个hexoblog文件夹</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>然后就可以查看官方的demo了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate //产生网页，可缩写hexo g</span><br><span class=\"line\">hexo server //挂到本地服务器打开，可缩写hexo s</span><br></pre></td></tr></table></figure>\n<p>在浏览器输入localhost:4000就可以看到你生成的博客，官方默认主题是landscope</p>\n<h2 id=\"2-部署到github-pages\"><a href=\"#2-部署到github-pages\" class=\"headerlink\" title=\"2.部署到github pages\"></a>2.部署到github pages</h2><p>直接在github page平台上托管我们的博客，便于维护，下面是把Hexo搭好的博客部署到github pages的配置方式。</p>\n<h3 id=\"注册github，新建repo\"><a href=\"#注册github，新建repo\" class=\"headerlink\" title=\"注册github，新建repo\"></a>注册github，新建repo</h3><p>新建一个自己用户名命名的仓库，后面加.github.io，像我这样，其他设置默认就好，点击create repository。<br><img src=\"https://img-blog.csdnimg.cn/c5bdfacd70c94789bcbe12c7a1c01da9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"创建repo\"></p>\n<h3 id=\"生成SSH添加到GitHub\"><a href=\"#生成SSH添加到GitHub\" class=\"headerlink\" title=\"生成SSH添加到GitHub\"></a>生成SSH添加到GitHub</h3><p>回到你的git bash中，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;yourname&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n<p>然后创建SSH,一路回车</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。<br><img src=\"https://img-blog.csdnimg.cn/1b4a2ce586c5423c91354dd38ecee893.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"ssh密钥\"><br>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br><img src=\"https://img-blog.csdnimg.cn/51f61bbe5dc64632be0158105eb15d3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_11,color_FFFFFF,t_70,g_se,x_5\" alt=\"github-&gt;settings\"></p>\n<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code>把你的<code>id_rsa.pub</code>里面的信息复制进去。<br><img src=\"https://img-blog.csdnimg.cn/b3cb64a9604946a38fc3f8bd85ce4f6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<p>在gitbash中，查看是否成功<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"部署Hexo到github\"><a href=\"#部署Hexo到github\" class=\"headerlink\" title=\"部署Hexo到github\"></a>部署Hexo到github</h3><p>打开站点配置文件 _config.yml，翻到最后，修改为<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure><br>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 是生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>\n<p>注意deploy时可能要你输入username和password。</p>\n<p>部署后需要<strong>等待一段时间</strong>，然后就可以在<code>http://yourname.github.io</code>看到Hexo 博客了，这里的内容和<code>hexo server</code>生成的内容完全相同。</p>\n<h2 id=\"3-绑定个人域名\"><a href=\"#3-绑定个人域名\" class=\"headerlink\" title=\"3.绑定个人域名\"></a>3.绑定个人域名</h2><p>完成上面的步骤后，可以使用<code>http://yourname.github.io</code>查看个人主页，如何自定义一个属于自己的域名呢？</p>\n<h3 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h3><p>注册一个<a href=\"https://www.aliyun.com/?spm=5176.100251.top-nav.dlogo.5af94f152mfbDz\">阿里云账户</a>,在阿里云上买一个域名，我买的是<code>kennan-yang.top</code></p>\n<p>先实名认证，然后在域名控制台添加解析，这里需要<strong>等半天时间</strong>。<br><img src=\"https://img-blog.csdnimg.cn/05356c75bdfa48d593e1789995afe188.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"域名解析\"><br>登录GitHub，进入之前创建的仓库<code>yourname.github.io</code>，点击<code>settings-&gt;pages</code>，设置<code>Custom domain</code>，输入你的域名<code>kennan-yang.top</code> 并<code>save</code>。<br><img src=\"https://img-blog.csdnimg.cn/4ca6ad5c655b4eaab7f534ed8cc78ab7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"Custom domain\"></p>\n<h3 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h3><p>然后在你的博客文件夹（如我的hexoblog）的<code>source</code>目录中创建一个名为<code>CNAME</code>文件，不要后缀。写上你的域名。<br><img src=\"https://img-blog.csdnimg.cn/e26efd4edb2a4772a54ded2542a28b14.png\" alt=\"CNAME\"><br>然后就是最常用的下面几条命令，当配置完成之后进行这些操作即可。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean <span class=\"comment\"># 清理缓存</span></span><br><span class=\"line\">hexo g <span class=\"comment\"># hexo generate 生成静态页</span></span><br><span class=\"line\">hexo s <span class=\"comment\"># hexo server 本地预览（非必须）</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># hexo deploy 部署到github pages</span></span><br></pre></td></tr></table></figure><br>部署完成后就可以用你的域名打开自己的博客啦！</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>Hexo还有更多不同的主题和配置，可参考下面的资料进行个性化设置。</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/sinat_37781304/article/details/82729029\">CSDN: hexo史上最全搭建教程</a><ol>\n<li><a href=\"https://docs.github.com/en/pages\">github pages</a> </li>\n<li><a href=\"https://hexo.io/\">Hexo官方文档</a></li>\n<li><a href=\"https://shen-yu.gitee.io/\">Hexo的岛主题</a></li>\n</ol>\n</li>\n</ol>"},{"title":"如何连接实验室的服务器进行网络训练？","date":"2022-02-24T10:48:44.000Z","_content":"我在用电脑训练CNN时遇到了性能瓶颈（显存不够），当得知实验室的服务器算力更强时，去请教师兄怎么连。\n\n实验室的师兄甩过来服务器的ip和用户名密码，说直接连就行。\n\n直接连？linux都不太会用的小白，咋连？\n\n首先确保连接到实验室的网络，我这边是用校园网或者挂校园网的VPN，然后有下面几种配置方法（方法应该很多，只是列出了我尝试过的这三种）：\n<!--more-->\n# 方法一：wsl（Windows Subsystem for Linux）\n1.下载wsl2\n参考\n[https://docs.microsoft.com/zh-cn/windows/wsl/install-win10](https://docs.microsoft.com/zh-cn/windows/wsl/install-win10)\n\n2.下载windows终端windows terminal（非必须，也可直接用power shell）\n[https://docs.microsoft.com/zh-cn/windows/terminal/get-started](https://docs.microsoft.com/zh-cn/windows/terminal/get-started)\n\n3.使用ssh命令进行外部链接\n\n```bash\n-> ssh 用户@ip\n-> 密码\n```\n\n# 方法二：vscode\n1.vscode下载remote-ssh和remote wsl\n![](https://img-blog.csdnimg.cn/20210519110928571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n2.连接服务器\n\n选择左下角的标志\n![](https://img-blog.csdnimg.cn/20210519111221622.png)\n会弹出一个菜单栏，选择Connect to Host...，输入用户名和密码即可\n![](https://img-blog.csdnimg.cn/20210519111159132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n# 方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\n[https://www.netsarang.com/zh/free-for-home-school/](https://www.netsarang.com/zh/free-for-home-school/)\n![](https://img-blog.csdnimg.cn/2021051911143257.png)\n\nXShell用来输入指令\n\nXFtp方便文件管理和传输\n\n当连接完成之后，就可以把使用GPU的网络训练代码放在服务器上跑了。。\n","source":"_posts/001-link-to-server.md","raw":"---\ntitle: 如何连接实验室的服务器进行网络训练？\ndate: 2022-02-24 18:48:44\ncategories: 搭建环境\ntags: \n- 服务器\n- linux\n---\n我在用电脑训练CNN时遇到了性能瓶颈（显存不够），当得知实验室的服务器算力更强时，去请教师兄怎么连。\n\n实验室的师兄甩过来服务器的ip和用户名密码，说直接连就行。\n\n直接连？linux都不太会用的小白，咋连？\n\n首先确保连接到实验室的网络，我这边是用校园网或者挂校园网的VPN，然后有下面几种配置方法（方法应该很多，只是列出了我尝试过的这三种）：\n<!--more-->\n# 方法一：wsl（Windows Subsystem for Linux）\n1.下载wsl2\n参考\n[https://docs.microsoft.com/zh-cn/windows/wsl/install-win10](https://docs.microsoft.com/zh-cn/windows/wsl/install-win10)\n\n2.下载windows终端windows terminal（非必须，也可直接用power shell）\n[https://docs.microsoft.com/zh-cn/windows/terminal/get-started](https://docs.microsoft.com/zh-cn/windows/terminal/get-started)\n\n3.使用ssh命令进行外部链接\n\n```bash\n-> ssh 用户@ip\n-> 密码\n```\n\n# 方法二：vscode\n1.vscode下载remote-ssh和remote wsl\n![](https://img-blog.csdnimg.cn/20210519110928571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n2.连接服务器\n\n选择左下角的标志\n![](https://img-blog.csdnimg.cn/20210519111221622.png)\n会弹出一个菜单栏，选择Connect to Host...，输入用户名和密码即可\n![](https://img-blog.csdnimg.cn/20210519111159132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n# 方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\n[https://www.netsarang.com/zh/free-for-home-school/](https://www.netsarang.com/zh/free-for-home-school/)\n![](https://img-blog.csdnimg.cn/2021051911143257.png)\n\nXShell用来输入指令\n\nXFtp方便文件管理和传输\n\n当连接完成之后，就可以把使用GPU的网络训练代码放在服务器上跑了。。\n","slug":"001-link-to-server","published":1,"updated":"2025-07-13T06:57:17.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qd0003u4vo8a35h43u","content":"<p>我在用电脑训练CNN时遇到了性能瓶颈（显存不够），当得知实验室的服务器算力更强时，去请教师兄怎么连。</p>\n<p>实验室的师兄甩过来服务器的ip和用户名密码，说直接连就行。</p>\n<p>直接连？linux都不太会用的小白，咋连？</p>\n<p>首先确保连接到实验室的网络，我这边是用校园网或者挂校园网的VPN，然后有下面几种配置方法（方法应该很多，只是列出了我尝试过的这三种）：<br><span id=\"more\"></span></p>\n<h1 id=\"方法一：wsl（Windows-Subsystem-for-Linux）\"><a href=\"#方法一：wsl（Windows-Subsystem-for-Linux）\" class=\"headerlink\" title=\"方法一：wsl（Windows Subsystem for Linux）\"></a>方法一：wsl（Windows Subsystem for Linux）</h1><p>1.下载wsl2<br>参考<br><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10\">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></p>\n<p>2.下载windows终端windows terminal（非必须，也可直接用power shell）<br><a href=\"https://docs.microsoft.com/zh-cn/windows/terminal/get-started\">https://docs.microsoft.com/zh-cn/windows/terminal/get-started</a></p>\n<p>3.使用ssh命令进行外部链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ssh 用户@ip</span><br><span class=\"line\">-&gt; 密码</span><br></pre></td></tr></table></figure>\n<h1 id=\"方法二：vscode\"><a href=\"#方法二：vscode\" class=\"headerlink\" title=\"方法二：vscode\"></a>方法二：vscode</h1><p>1.vscode下载remote-ssh和remote wsl<br><img src=\"https://img-blog.csdnimg.cn/20210519110928571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p>2.连接服务器</p>\n<p>选择左下角的标志<br><img src=\"https://img-blog.csdnimg.cn/20210519111221622.png\" alt=\"\"><br>会弹出一个菜单栏，选择Connect to Host…，输入用户名和密码即可<br><img src=\"https://img-blog.csdnimg.cn/20210519111159132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h1 id=\"方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\"><a href=\"#方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\" class=\"headerlink\" title=\"方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\"></a>方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版</h1><p><a href=\"https://www.netsarang.com/zh/free-for-home-school/\">https://www.netsarang.com/zh/free-for-home-school/</a><br><img src=\"https://img-blog.csdnimg.cn/2021051911143257.png\" alt=\"\"></p>\n<p>XShell用来输入指令</p>\n<p>XFtp方便文件管理和传输</p>\n<p>当连接完成之后，就可以把使用GPU的网络训练代码放在服务器上跑了。。</p>\n","site":{"data":{}},"excerpt":"<p>我在用电脑训练CNN时遇到了性能瓶颈（显存不够），当得知实验室的服务器算力更强时，去请教师兄怎么连。</p>\n<p>实验室的师兄甩过来服务器的ip和用户名密码，说直接连就行。</p>\n<p>直接连？linux都不太会用的小白，咋连？</p>\n<p>首先确保连接到实验室的网络，我这边是用校园网或者挂校园网的VPN，然后有下面几种配置方法（方法应该很多，只是列出了我尝试过的这三种）：<br>","more":"</p>\n<h1 id=\"方法一：wsl（Windows-Subsystem-for-Linux）\"><a href=\"#方法一：wsl（Windows-Subsystem-for-Linux）\" class=\"headerlink\" title=\"方法一：wsl（Windows Subsystem for Linux）\"></a>方法一：wsl（Windows Subsystem for Linux）</h1><p>1.下载wsl2<br>参考<br><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10\">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></p>\n<p>2.下载windows终端windows terminal（非必须，也可直接用power shell）<br><a href=\"https://docs.microsoft.com/zh-cn/windows/terminal/get-started\">https://docs.microsoft.com/zh-cn/windows/terminal/get-started</a></p>\n<p>3.使用ssh命令进行外部链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; ssh 用户@ip</span><br><span class=\"line\">-&gt; 密码</span><br></pre></td></tr></table></figure>\n<h1 id=\"方法二：vscode\"><a href=\"#方法二：vscode\" class=\"headerlink\" title=\"方法二：vscode\"></a>方法二：vscode</h1><p>1.vscode下载remote-ssh和remote wsl<br><img src=\"https://img-blog.csdnimg.cn/20210519110928571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p>2.连接服务器</p>\n<p>选择左下角的标志<br><img src=\"https://img-blog.csdnimg.cn/20210519111221622.png\" alt=\"\"><br>会弹出一个菜单栏，选择Connect to Host…，输入用户名和密码即可<br><img src=\"https://img-blog.csdnimg.cn/20210519111159132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h1 id=\"方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\"><a href=\"#方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\" class=\"headerlink\" title=\"方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版\"></a>方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版</h1><p><a href=\"https://www.netsarang.com/zh/free-for-home-school/\">https://www.netsarang.com/zh/free-for-home-school/</a><br><img src=\"https://img-blog.csdnimg.cn/2021051911143257.png\" alt=\"\"></p>\n<p>XShell用来输入指令</p>\n<p>XFtp方便文件管理和传输</p>\n<p>当连接完成之后，就可以把使用GPU的网络训练代码放在服务器上跑了。。</p>"},{"title":"win10安装python3.9.1+cuda11.1+cudnn+pytorch+opencv记录","date":"2022-02-26T10:54:57.000Z","_content":"最近由于机器学习大作业需要用到神经网络，记录一下配置环境的过程。\n前人铺路，我只是结合自己的环境做了一个简单的总结，写的不好多多见谅。\n<!--more-->\n# 1.安装python3.9\n首先是python的安装，选用当前时间最新版的python3.9.1\n官网下载安装包即可[https://www.python.org/downloads/](https://www.python.org/downloads/)\n![](https://img-blog.csdnimg.cn/20201219134620158.png)\n\n一路“下一步”，建议安装到默认路径。\n\n然后，配置环境变量：\n找到安装的位置，把图中所示的两个路径加入环境变量。\n我的路径是：\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\Scripts\n![](https://img-blog.csdnimg.cn/20201219134237283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n补充一点：\nconda里python中的pytorch比较老，遇到没法调用的问题（这里没有深究），所以没有用anaconda，而是直接官网找最新的python。\n# 2.安装cuda（需要vs环境，我的是vs2015）\n\nCUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。\n\n我当前的环境是vs2015，电脑配置是\n\n![](https://img-blog.csdnimg.cn/20201219142426303.png)\n![](https://img-blog.csdnimg.cn/20201219142440290.png)\n注意CUDA的版本不能超过GPU的版本。\n\n官网的CUDA安装路径如下：\n[https://developer.nvidia.com/zh-cn/cuda-downloads](https://developer.nvidia.com/zh-cn/cuda-downloads)\n![](https://img-blog.csdnimg.cn/20201219142239715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n圈出来的部分，前者是一个比较大的安装包，下载到本地安装，后者是很小的安装包，但是需要联网，我选的前者。\n![](https://img-blog.csdnimg.cn/20201219142349445.png)\n\n仍然选择当前最新的版本11.1，安装到默认路径下：\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\n\n# 3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\nNVIDIA cuDNN是用于深度神经网络的GPU加速库。\n老规矩，走官网。\n[https://developer.nvidia.com/rdp/cudnn-archive](https://developer.nvidia.com/rdp/cudnn-archive)\n![](https://img-blog.csdnimg.cn/20201219140906756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n这里的下载需要注册，有个技巧是复制链接，在迅雷打开可以直接下载。\n![](https://img-blog.csdnimg.cn/20201219135916291.png)\n\n下载好的压缩包解压之后，会发现三个文件夹。\n分别把文件放到cuda路径对应的文件夹下。\n![](https://img-blog.csdnimg.cn/20201219135443329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n# 4.安装pytorch\n它是一个基于Python的可续计算包，提供两个高级功能：1、具有强大的GPU加速的张量计算（如NumPy）。2、包含自动求导系统的深度神经网络。\n官网：\n[https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)\n![](https://img-blog.csdnimg.cn/20201219140414305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n可以通过pip安装，最下面的命令行在cmd中打开即可。\n由于速度慢，所以直接从别人那里拷贝过来了。\n\n可以在python中通过下面的代码来检验，True表示pytorch的cuda配置成功\n![](https://img-blog.csdnimg.cn/20201219142901202.png)\n\n# 5.安装opencv\n方法一：\n打开cmd，输入`pip install opencv-python`即可，但超级慢还可能断开连接。\n此处建议清华镜像下载\n\n```bash\npip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\n```\n\n方法二：\n下载相应Python版本的OpenCV的whl文件\nhttps://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\n然后打开cmd，在whl文件对应文件夹路径下，使用pip安装，如\n![](https://img-blog.csdnimg.cn/20201219141255475.png)\n\n## 至此我需要的环境已经配置完成。\n","source":"_posts/002-config-pytorch.md","raw":"---\ntitle: win10安装python3.9.1+cuda11.1+cudnn+pytorch+opencv记录\ndate: 2022-02-26 18:54:57\ncategories: python\ntags: python\n---\n最近由于机器学习大作业需要用到神经网络，记录一下配置环境的过程。\n前人铺路，我只是结合自己的环境做了一个简单的总结，写的不好多多见谅。\n<!--more-->\n# 1.安装python3.9\n首先是python的安装，选用当前时间最新版的python3.9.1\n官网下载安装包即可[https://www.python.org/downloads/](https://www.python.org/downloads/)\n![](https://img-blog.csdnimg.cn/20201219134620158.png)\n\n一路“下一步”，建议安装到默认路径。\n\n然后，配置环境变量：\n找到安装的位置，把图中所示的两个路径加入环境变量。\n我的路径是：\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\Scripts\n![](https://img-blog.csdnimg.cn/20201219134237283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n补充一点：\nconda里python中的pytorch比较老，遇到没法调用的问题（这里没有深究），所以没有用anaconda，而是直接官网找最新的python。\n# 2.安装cuda（需要vs环境，我的是vs2015）\n\nCUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。\n\n我当前的环境是vs2015，电脑配置是\n\n![](https://img-blog.csdnimg.cn/20201219142426303.png)\n![](https://img-blog.csdnimg.cn/20201219142440290.png)\n注意CUDA的版本不能超过GPU的版本。\n\n官网的CUDA安装路径如下：\n[https://developer.nvidia.com/zh-cn/cuda-downloads](https://developer.nvidia.com/zh-cn/cuda-downloads)\n![](https://img-blog.csdnimg.cn/20201219142239715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n圈出来的部分，前者是一个比较大的安装包，下载到本地安装，后者是很小的安装包，但是需要联网，我选的前者。\n![](https://img-blog.csdnimg.cn/20201219142349445.png)\n\n仍然选择当前最新的版本11.1，安装到默认路径下：\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\n\n# 3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\nNVIDIA cuDNN是用于深度神经网络的GPU加速库。\n老规矩，走官网。\n[https://developer.nvidia.com/rdp/cudnn-archive](https://developer.nvidia.com/rdp/cudnn-archive)\n![](https://img-blog.csdnimg.cn/20201219140906756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n\n这里的下载需要注册，有个技巧是复制链接，在迅雷打开可以直接下载。\n![](https://img-blog.csdnimg.cn/20201219135916291.png)\n\n下载好的压缩包解压之后，会发现三个文件夹。\n分别把文件放到cuda路径对应的文件夹下。\n![](https://img-blog.csdnimg.cn/20201219135443329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n# 4.安装pytorch\n它是一个基于Python的可续计算包，提供两个高级功能：1、具有强大的GPU加速的张量计算（如NumPy）。2、包含自动求导系统的深度神经网络。\n官网：\n[https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)\n![](https://img-blog.csdnimg.cn/20201219140414305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70)\n可以通过pip安装，最下面的命令行在cmd中打开即可。\n由于速度慢，所以直接从别人那里拷贝过来了。\n\n可以在python中通过下面的代码来检验，True表示pytorch的cuda配置成功\n![](https://img-blog.csdnimg.cn/20201219142901202.png)\n\n# 5.安装opencv\n方法一：\n打开cmd，输入`pip install opencv-python`即可，但超级慢还可能断开连接。\n此处建议清华镜像下载\n\n```bash\npip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\n```\n\n方法二：\n下载相应Python版本的OpenCV的whl文件\nhttps://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\n然后打开cmd，在whl文件对应文件夹路径下，使用pip安装，如\n![](https://img-blog.csdnimg.cn/20201219141255475.png)\n\n## 至此我需要的环境已经配置完成。\n","slug":"002-config-pytorch","published":1,"updated":"2025-07-13T06:57:17.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qh0007u4vo7mebcycj","content":"<p>最近由于机器学习大作业需要用到神经网络，记录一下配置环境的过程。<br>前人铺路，我只是结合自己的环境做了一个简单的总结，写的不好多多见谅。<br><span id=\"more\"></span></p>\n<h1 id=\"1-安装python3-9\"><a href=\"#1-安装python3-9\" class=\"headerlink\" title=\"1.安装python3.9\"></a>1.安装python3.9</h1><p>首先是python的安装，选用当前时间最新版的python3.9.1<br>官网下载安装包即可<a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a><br><img src=\"https://img-blog.csdnimg.cn/20201219134620158.png\" alt=\"\"></p>\n<p>一路“下一步”，建议安装到默认路径。</p>\n<p>然后，配置环境变量：<br>找到安装的位置，把图中所示的两个路径加入环境变量。<br>我的路径是：<br>C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39<br>C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\Scripts<br><img src=\"https://img-blog.csdnimg.cn/20201219134237283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"><br>补充一点：<br>conda里python中的pytorch比较老，遇到没法调用的问题（这里没有深究），所以没有用anaconda，而是直接官网找最新的python。</p>\n<h1 id=\"2-安装cuda（需要vs环境，我的是vs2015）\"><a href=\"#2-安装cuda（需要vs环境，我的是vs2015）\" class=\"headerlink\" title=\"2.安装cuda（需要vs环境，我的是vs2015）\"></a>2.安装cuda（需要vs环境，我的是vs2015）</h1><p>CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。</p>\n<p>我当前的环境是vs2015，电脑配置是</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201219142426303.png\" alt=\"\"><br><img src=\"https://img-blog.csdnimg.cn/20201219142440290.png\" alt=\"\"><br>注意CUDA的版本不能超过GPU的版本。</p>\n<p>官网的CUDA安装路径如下：<br><a href=\"https://developer.nvidia.com/zh-cn/cuda-downloads\">https://developer.nvidia.com/zh-cn/cuda-downloads</a><br><img src=\"https://img-blog.csdnimg.cn/20201219142239715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"><br>圈出来的部分，前者是一个比较大的安装包，下载到本地安装，后者是很小的安装包，但是需要联网，我选的前者。<br><img src=\"https://img-blog.csdnimg.cn/20201219142349445.png\" alt=\"\"></p>\n<p>仍然选择当前最新的版本11.1，安装到默认路径下：<br>C:\\Program Files\\NVIDIA GPU Computing Toolkit</p>\n<h1 id=\"3-安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\"><a href=\"#3-安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\" class=\"headerlink\" title=\"3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\"></a>3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）</h1><p>NVIDIA cuDNN是用于深度神经网络的GPU加速库。<br>老规矩，走官网。<br><a href=\"https://developer.nvidia.com/rdp/cudnn-archive\">https://developer.nvidia.com/rdp/cudnn-archive</a><br><img src=\"https://img-blog.csdnimg.cn/20201219140906756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p>这里的下载需要注册，有个技巧是复制链接，在迅雷打开可以直接下载。<br><img src=\"https://img-blog.csdnimg.cn/20201219135916291.png\" alt=\"\"></p>\n<p>下载好的压缩包解压之后，会发现三个文件夹。<br>分别把文件放到cuda路径对应的文件夹下。<br><img src=\"https://img-blog.csdnimg.cn/20201219135443329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h1 id=\"4-安装pytorch\"><a href=\"#4-安装pytorch\" class=\"headerlink\" title=\"4.安装pytorch\"></a>4.安装pytorch</h1><p>它是一个基于Python的可续计算包，提供两个高级功能：1、具有强大的GPU加速的张量计算（如NumPy）。2、包含自动求导系统的深度神经网络。<br>官网：<br><a href=\"https://pytorch.org/get-started/locally/\">https://pytorch.org/get-started/locally/</a><br><img src=\"https://img-blog.csdnimg.cn/20201219140414305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"><br>可以通过pip安装，最下面的命令行在cmd中打开即可。<br>由于速度慢，所以直接从别人那里拷贝过来了。</p>\n<p>可以在python中通过下面的代码来检验，True表示pytorch的cuda配置成功<br><img src=\"https://img-blog.csdnimg.cn/20201219142901202.png\" alt=\"\"></p>\n<h1 id=\"5-安装opencv\"><a href=\"#5-安装opencv\" class=\"headerlink\" title=\"5.安装opencv\"></a>5.安装opencv</h1><p>方法一：<br>打开cmd，输入<code>pip install opencv-python</code>即可，但超级慢还可能断开连接。<br>此处建议清华镜像下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure>\n<p>方法二：<br>下载相应Python版本的OpenCV的whl文件<br><a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\">https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv</a><br>然后打开cmd，在whl文件对应文件夹路径下，使用pip安装，如<br><img src=\"https://img-blog.csdnimg.cn/20201219141255475.png\" alt=\"\"></p>\n<h2 id=\"至此我需要的环境已经配置完成。\"><a href=\"#至此我需要的环境已经配置完成。\" class=\"headerlink\" title=\"至此我需要的环境已经配置完成。\"></a>至此我需要的环境已经配置完成。</h2>","site":{"data":{}},"excerpt":"<p>最近由于机器学习大作业需要用到神经网络，记录一下配置环境的过程。<br>前人铺路，我只是结合自己的环境做了一个简单的总结，写的不好多多见谅。<br>","more":"</p>\n<h1 id=\"1-安装python3-9\"><a href=\"#1-安装python3-9\" class=\"headerlink\" title=\"1.安装python3.9\"></a>1.安装python3.9</h1><p>首先是python的安装，选用当前时间最新版的python3.9.1<br>官网下载安装包即可<a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a><br><img src=\"https://img-blog.csdnimg.cn/20201219134620158.png\" alt=\"\"></p>\n<p>一路“下一步”，建议安装到默认路径。</p>\n<p>然后，配置环境变量：<br>找到安装的位置，把图中所示的两个路径加入环境变量。<br>我的路径是：<br>C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39<br>C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python39\\Scripts<br><img src=\"https://img-blog.csdnimg.cn/20201219134237283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"><br>补充一点：<br>conda里python中的pytorch比较老，遇到没法调用的问题（这里没有深究），所以没有用anaconda，而是直接官网找最新的python。</p>\n<h1 id=\"2-安装cuda（需要vs环境，我的是vs2015）\"><a href=\"#2-安装cuda（需要vs环境，我的是vs2015）\" class=\"headerlink\" title=\"2.安装cuda（需要vs环境，我的是vs2015）\"></a>2.安装cuda（需要vs环境，我的是vs2015）</h1><p>CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。</p>\n<p>我当前的环境是vs2015，电脑配置是</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201219142426303.png\" alt=\"\"><br><img src=\"https://img-blog.csdnimg.cn/20201219142440290.png\" alt=\"\"><br>注意CUDA的版本不能超过GPU的版本。</p>\n<p>官网的CUDA安装路径如下：<br><a href=\"https://developer.nvidia.com/zh-cn/cuda-downloads\">https://developer.nvidia.com/zh-cn/cuda-downloads</a><br><img src=\"https://img-blog.csdnimg.cn/20201219142239715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"><br>圈出来的部分，前者是一个比较大的安装包，下载到本地安装，后者是很小的安装包，但是需要联网，我选的前者。<br><img src=\"https://img-blog.csdnimg.cn/20201219142349445.png\" alt=\"\"></p>\n<p>仍然选择当前最新的版本11.1，安装到默认路径下：<br>C:\\Program Files\\NVIDIA GPU Computing Toolkit</p>\n<h1 id=\"3-安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\"><a href=\"#3-安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\" class=\"headerlink\" title=\"3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）\"></a>3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）</h1><p>NVIDIA cuDNN是用于深度神经网络的GPU加速库。<br>老规矩，走官网。<br><a href=\"https://developer.nvidia.com/rdp/cudnn-archive\">https://developer.nvidia.com/rdp/cudnn-archive</a><br><img src=\"https://img-blog.csdnimg.cn/20201219140906756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p>这里的下载需要注册，有个技巧是复制链接，在迅雷打开可以直接下载。<br><img src=\"https://img-blog.csdnimg.cn/20201219135916291.png\" alt=\"\"></p>\n<p>下载好的压缩包解压之后，会发现三个文件夹。<br>分别把文件放到cuda路径对应的文件夹下。<br><img src=\"https://img-blog.csdnimg.cn/20201219135443329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<h1 id=\"4-安装pytorch\"><a href=\"#4-安装pytorch\" class=\"headerlink\" title=\"4.安装pytorch\"></a>4.安装pytorch</h1><p>它是一个基于Python的可续计算包，提供两个高级功能：1、具有强大的GPU加速的张量计算（如NumPy）。2、包含自动求导系统的深度神经网络。<br>官网：<br><a href=\"https://pytorch.org/get-started/locally/\">https://pytorch.org/get-started/locally/</a><br><img src=\"https://img-blog.csdnimg.cn/20201219140414305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70\" alt=\"\"><br>可以通过pip安装，最下面的命令行在cmd中打开即可。<br>由于速度慢，所以直接从别人那里拷贝过来了。</p>\n<p>可以在python中通过下面的代码来检验，True表示pytorch的cuda配置成功<br><img src=\"https://img-blog.csdnimg.cn/20201219142901202.png\" alt=\"\"></p>\n<h1 id=\"5-安装opencv\"><a href=\"#5-安装opencv\" class=\"headerlink\" title=\"5.安装opencv\"></a>5.安装opencv</h1><p>方法一：<br>打开cmd，输入<code>pip install opencv-python</code>即可，但超级慢还可能断开连接。<br>此处建议清华镜像下载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure>\n<p>方法二：<br>下载相应Python版本的OpenCV的whl文件<br><a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\">https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv</a><br>然后打开cmd，在whl文件对应文件夹路径下，使用pip安装，如<br><img src=\"https://img-blog.csdnimg.cn/20201219141255475.png\" alt=\"\"></p>\n<h2 id=\"至此我需要的环境已经配置完成。\"><a href=\"#至此我需要的环境已经配置完成。\" class=\"headerlink\" title=\"至此我需要的环境已经配置完成。\"></a>至此我需要的环境已经配置完成。</h2>"},{"title":"go入门，学习用goroutine开启并发","date":"2022-03-02T00:03:04.000Z","_content":"\n**为了学习go语言，和了解并行的基本写法，这里通过一个demo练习**\n由于已经有了c++和python的基础，所以了解基本语法很快，主要是学习go面向消息的传递机制，以及使用goroutine进行并发操作。\n参考资料：\n[Go 语言教程-Go并发](https://www.runoob.com/go/go-concurrent.html)\n\n### 代码\nhello.go\n\n```go\n/*一个go的并行计算demo,学习go的基本语法，并计算两个数组元素值为1的数目*/\n\n//包声明：必须在源文件中非注释的第一行指明这个文件属于哪个包\n//每个Go程序都包含一个名为main的包\npackage main \n\n//import告诉Go编译器使用\"fmt\"包里的元素\n//fmt包实现了格式化IO函数\nimport \"fmt\"\n\n\n/*\n函数声明方式\nfunc function_name([parameter list])[return_types]{\n    函数体\n}\n*/\nfunc sum(arr []int, c chan int){\n    /*\n    变量声明的两种方式：\n    1.var v_name v_type = value\n    2.v_name := value 根据值自行判定变量类型\n\n    注：标识符首字母大写，如Group 1，则可被外部包调用，称为导出。以小写字母开头则只能内部可见。\n    */\n    sum := 0\n\n    /*\n    循环定义方式 \n    1.for init; condition； post{}\n    2.for condition{}\n    3.for key, value := range iter{}  用range对slice、map、数组等迭代循环\n    */\n\n    for _, value := range arr {\n        /*\n        条件语句\n        if 布尔表达式{\n            //语句\n        }\n        */\n        if value == 1{\n            //运算符同c++，包括++，--\n            sum++\n        }\n    }\n    //值保存到通道（channel）方便并行\n    c <- sum\n}\n\n//main函数是程序开始执行的函数\nfunc main( ){\n    //字符串输出到控制台，并结尾增加换行符'\\n'\n    fmt.Println(\"hello world!\")\n\n    // 创建数组方式一: var variable_name = [SIZE] variable_type{,,,...}\n    var arr_a =[]int  {2, 1, 3, 1, 4, 1, 5}\n    // 创建数组方式二: variable_name := [SIZE] variable_type{,,,...}\n    arr_b := []int {1, 4, 5, 2, 1}\n    \n    /*\n\n    */\n    ch := make(chan int)\n\n    /*\n    函数调用方式: func([parameter_list])\n    \n    goroutine: 轻量级线程，支持并发\n    如果用goroutine调度，则前加go关键字，如go f(x,y,z)\n    */\n    go sum(arr_a, ch)\n    go sum(arr_b, ch)\n\n    /*\n    通道（channel）可用于两个goroutine之间通过传递一个指定的值来同步运行和通讯。\n    操作符<-用于指定通道的方向，发送或接收。如：\n    ch <- v //把v发送到通道ch\n    v := <- ch //从ch接收数据，并把值赋给v\n    */\n    result_a, result_b := <- ch, <- ch\n    \n    //输出计算结果\n    fmt.Println(\"results\", result_a, result_b, result_a + result_b)\n}\n\n```\n\n### 输出结果\n![输出结果](/images/helloworld.png)\n","source":"_posts/003-goroutine.md","raw":"---\ntitle: go入门，学习用goroutine开启并发\ndate: 2022-03-02 08:03:04\ncategories: go\ntags: \n- go\n- 并发\n---\n\n**为了学习go语言，和了解并行的基本写法，这里通过一个demo练习**\n由于已经有了c++和python的基础，所以了解基本语法很快，主要是学习go面向消息的传递机制，以及使用goroutine进行并发操作。\n参考资料：\n[Go 语言教程-Go并发](https://www.runoob.com/go/go-concurrent.html)\n\n### 代码\nhello.go\n\n```go\n/*一个go的并行计算demo,学习go的基本语法，并计算两个数组元素值为1的数目*/\n\n//包声明：必须在源文件中非注释的第一行指明这个文件属于哪个包\n//每个Go程序都包含一个名为main的包\npackage main \n\n//import告诉Go编译器使用\"fmt\"包里的元素\n//fmt包实现了格式化IO函数\nimport \"fmt\"\n\n\n/*\n函数声明方式\nfunc function_name([parameter list])[return_types]{\n    函数体\n}\n*/\nfunc sum(arr []int, c chan int){\n    /*\n    变量声明的两种方式：\n    1.var v_name v_type = value\n    2.v_name := value 根据值自行判定变量类型\n\n    注：标识符首字母大写，如Group 1，则可被外部包调用，称为导出。以小写字母开头则只能内部可见。\n    */\n    sum := 0\n\n    /*\n    循环定义方式 \n    1.for init; condition； post{}\n    2.for condition{}\n    3.for key, value := range iter{}  用range对slice、map、数组等迭代循环\n    */\n\n    for _, value := range arr {\n        /*\n        条件语句\n        if 布尔表达式{\n            //语句\n        }\n        */\n        if value == 1{\n            //运算符同c++，包括++，--\n            sum++\n        }\n    }\n    //值保存到通道（channel）方便并行\n    c <- sum\n}\n\n//main函数是程序开始执行的函数\nfunc main( ){\n    //字符串输出到控制台，并结尾增加换行符'\\n'\n    fmt.Println(\"hello world!\")\n\n    // 创建数组方式一: var variable_name = [SIZE] variable_type{,,,...}\n    var arr_a =[]int  {2, 1, 3, 1, 4, 1, 5}\n    // 创建数组方式二: variable_name := [SIZE] variable_type{,,,...}\n    arr_b := []int {1, 4, 5, 2, 1}\n    \n    /*\n\n    */\n    ch := make(chan int)\n\n    /*\n    函数调用方式: func([parameter_list])\n    \n    goroutine: 轻量级线程，支持并发\n    如果用goroutine调度，则前加go关键字，如go f(x,y,z)\n    */\n    go sum(arr_a, ch)\n    go sum(arr_b, ch)\n\n    /*\n    通道（channel）可用于两个goroutine之间通过传递一个指定的值来同步运行和通讯。\n    操作符<-用于指定通道的方向，发送或接收。如：\n    ch <- v //把v发送到通道ch\n    v := <- ch //从ch接收数据，并把值赋给v\n    */\n    result_a, result_b := <- ch, <- ch\n    \n    //输出计算结果\n    fmt.Println(\"results\", result_a, result_b, result_a + result_b)\n}\n\n```\n\n### 输出结果\n![输出结果](/images/helloworld.png)\n","slug":"003-goroutine","published":1,"updated":"2025-07-13T06:57:17.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qi0009u4vo8uwcch5p","content":"<p><strong>为了学习go语言，和了解并行的基本写法，这里通过一个demo练习</strong><br>由于已经有了c++和python的基础，所以了解基本语法很快，主要是学习go面向消息的传递机制，以及使用goroutine进行并发操作。<br>参考资料：<br><a href=\"https://www.runoob.com/go/go-concurrent.html\">Go 语言教程-Go并发</a></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>hello.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*一个go的并行计算demo,学习go的基本语法，并计算两个数组元素值为1的数目*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//包声明：必须在源文件中非注释的第一行指明这个文件属于哪个包</span></span><br><span class=\"line\"><span class=\"comment\">//每个Go程序都包含一个名为main的包</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//import告诉Go编译器使用&quot;fmt&quot;包里的元素</span></span><br><span class=\"line\"><span class=\"comment\">//fmt包实现了格式化IO函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数声明方式</span></span><br><span class=\"line\"><span class=\"comment\">func function_name([parameter list])[return_types]&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    函数体</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(arr []<span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    变量声明的两种方式：</span></span><br><span class=\"line\"><span class=\"comment\">    1.var v_name v_type = value</span></span><br><span class=\"line\"><span class=\"comment\">    2.v_name := value 根据值自行判定变量类型</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    注：标识符首字母大写，如Group 1，则可被外部包调用，称为导出。以小写字母开头则只能内部可见。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    sum := <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    循环定义方式 </span></span><br><span class=\"line\"><span class=\"comment\">    1.for init; condition； post&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    2.for condition&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    3.for key, value := range iter&#123;&#125;  用range对slice、map、数组等迭代循环</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        条件语句</span></span><br><span class=\"line\"><span class=\"comment\">        if 布尔表达式&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //语句</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> value == <span class=\"number\">1</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//运算符同c++，包括++，--</span></span><br><span class=\"line\">            sum++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//值保存到通道（channel）方便并行</span></span><br><span class=\"line\">    c &lt;- sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main函数是程序开始执行的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">( )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//字符串输出到控制台，并结尾增加换行符&#x27;\\n&#x27;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;hello world!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建数组方式一: var variable_name = [SIZE] variable_type&#123;,,,...&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr_a =[]<span class=\"type\">int</span>  &#123;<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建数组方式二: variable_name := [SIZE] variable_type&#123;,,,...&#125;</span></span><br><span class=\"line\">    arr_b := []<span class=\"type\">int</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    函数调用方式: func([parameter_list])</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    goroutine: 轻量级线程，支持并发</span></span><br><span class=\"line\"><span class=\"comment\">    如果用goroutine调度，则前加go关键字，如go f(x,y,z)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">go</span> sum(arr_a, ch)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> sum(arr_b, ch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    通道（channel）可用于两个goroutine之间通过传递一个指定的值来同步运行和通讯。</span></span><br><span class=\"line\"><span class=\"comment\">    操作符&lt;-用于指定通道的方向，发送或接收。如：</span></span><br><span class=\"line\"><span class=\"comment\">    ch &lt;- v //把v发送到通道ch</span></span><br><span class=\"line\"><span class=\"comment\">    v := &lt;- ch //从ch接收数据，并把值赋给v</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    result_a, result_b := &lt;- ch, &lt;- ch</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//输出计算结果</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;results&quot;</span>, result_a, result_b, result_a + result_b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h3><p><img src=\"/images/helloworld.png\" alt=\"输出结果\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>为了学习go语言，和了解并行的基本写法，这里通过一个demo练习</strong><br>由于已经有了c++和python的基础，所以了解基本语法很快，主要是学习go面向消息的传递机制，以及使用goroutine进行并发操作。<br>参考资料：<br><a href=\"https://www.runoob.com/go/go-concurrent.html\">Go 语言教程-Go并发</a></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>hello.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*一个go的并行计算demo,学习go的基本语法，并计算两个数组元素值为1的数目*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//包声明：必须在源文件中非注释的第一行指明这个文件属于哪个包</span></span><br><span class=\"line\"><span class=\"comment\">//每个Go程序都包含一个名为main的包</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//import告诉Go编译器使用&quot;fmt&quot;包里的元素</span></span><br><span class=\"line\"><span class=\"comment\">//fmt包实现了格式化IO函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数声明方式</span></span><br><span class=\"line\"><span class=\"comment\">func function_name([parameter list])[return_types]&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    函数体</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(arr []<span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    变量声明的两种方式：</span></span><br><span class=\"line\"><span class=\"comment\">    1.var v_name v_type = value</span></span><br><span class=\"line\"><span class=\"comment\">    2.v_name := value 根据值自行判定变量类型</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    注：标识符首字母大写，如Group 1，则可被外部包调用，称为导出。以小写字母开头则只能内部可见。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    sum := <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    循环定义方式 </span></span><br><span class=\"line\"><span class=\"comment\">    1.for init; condition； post&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    2.for condition&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    3.for key, value := range iter&#123;&#125;  用range对slice、map、数组等迭代循环</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        条件语句</span></span><br><span class=\"line\"><span class=\"comment\">        if 布尔表达式&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //语句</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> value == <span class=\"number\">1</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//运算符同c++，包括++，--</span></span><br><span class=\"line\">            sum++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//值保存到通道（channel）方便并行</span></span><br><span class=\"line\">    c &lt;- sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main函数是程序开始执行的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">( )</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//字符串输出到控制台，并结尾增加换行符&#x27;\\n&#x27;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;hello world!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建数组方式一: var variable_name = [SIZE] variable_type&#123;,,,...&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr_a =[]<span class=\"type\">int</span>  &#123;<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建数组方式二: variable_name := [SIZE] variable_type&#123;,,,...&#125;</span></span><br><span class=\"line\">    arr_b := []<span class=\"type\">int</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    函数调用方式: func([parameter_list])</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    goroutine: 轻量级线程，支持并发</span></span><br><span class=\"line\"><span class=\"comment\">    如果用goroutine调度，则前加go关键字，如go f(x,y,z)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">go</span> sum(arr_a, ch)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> sum(arr_b, ch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    通道（channel）可用于两个goroutine之间通过传递一个指定的值来同步运行和通讯。</span></span><br><span class=\"line\"><span class=\"comment\">    操作符&lt;-用于指定通道的方向，发送或接收。如：</span></span><br><span class=\"line\"><span class=\"comment\">    ch &lt;- v //把v发送到通道ch</span></span><br><span class=\"line\"><span class=\"comment\">    v := &lt;- ch //从ch接收数据，并把值赋给v</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    result_a, result_b := &lt;- ch, &lt;- ch</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//输出计算结果</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;results&quot;</span>, result_a, result_b, result_a + result_b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h3><p><img src=\"/images/helloworld.png\" alt=\"输出结果\"></p>\n"},{"title":"数据结构总结 —— 树","date":"2022-03-12T00:59:29.000Z","_content":"\n# 引言\n\n[《c语言学习网》数据结构总结——树](http://c.biancheng.net/view/3390.html)\n本文旨在根据教程巩固树的数据结构知识和c语言指针的应用，记录一下自己学习过程中的代码，知识讲解参考教程。\n## 一、树的基本概念和术语\n\n树结构是一种非线性存储结构，存储的是具有“一对多”关系的数据元素的集合。如图 是使用树结构存储的集合 {A,B,C,D,E,F,G,H,I,J,K,L,M} 的示意图。对于数据 A 来说，和数据 B、C、D 有关系；对于数据 B 来说，和 E、F 有关系。这就是“一对多”的关系。\n![图 1（A）树的示例](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NDMwMTQ5My0wLnBuZw?x-oss-process=image/format,png)\n<!--more-->\n\n### 1.树的节点\n结点：使用树结构存储的每一个数据元素都被称为“结点”。例如，图 1（A）中，数据元素 A 就是一个结点；\n\n父结点（双亲结点）、子结点和兄弟结点：对于图 1（A）中的结点 A、B、C、D 来说，A 是 B、C、D 结点的父结点（也称为“双亲结点”），而 B、C、D 都是 A 结点的子结点（也称“孩子结点”）。对于 B、C、D 来说，它们都有相同的父结点，所以它们互为兄弟结点。\n\n树根结点（简称“根结点”）：每一个非空树都有且只有一个被称为根的结点。图 1（A）中，结点 A 就是整棵树的根结点。\n\n> 树根的判断依据为：如果一个结点没有父结点，那么这个结点就是整棵树的根结点。\n\n叶子结点：如果结点没有任何子结点，那么此结点称为叶子结点（叶结点）。例如图 1（A）中，结点 K、L、F、G、M、I、J 都是这棵树的叶子结点。\n### 2.子树和空树\n子树：如图 1（A）中，整棵树的根结点为结点 A，而如果单看结点 B、E、F、K、L 组成的部分来说，也是棵树，而且节点 B 为这棵树的根结点。所以称 B、E、F、K、L 这几个结点组成的树为整棵树的子树；同样，结点 E、K、L 构成的也是一棵子树，根结点为 E。\n\n> 注意：单个结点也是一棵树，只不过根结点就是它本身。图 1（A）中，结点 K、L、F 等都是树，且都是整棵树的子树。\n\n知道了子树的概念后，树也可以这样定义：树是由根结点和若干棵子树构成的。\n\n空树：如果集合本身为空，那么构成的树就被称为空树。空树中没有结点。\n\n> 补充：在树结构中，对于具有同一个根结点的各个子树，相互之间不能有交集。例如，图 1（A）中，除了根结点\n> A，其余元素又各自构成了三个子树，根结点分别为 B、C、D，这三个子树相互之间没有相同的结点。如果有，就破坏了树的结构，不能算做是一棵树。\n\n### 3.结点的度和层次\n对于一个结点，拥有的子树数（结点有多少分支）称为结点的度（Degree）。例如，图 1（A）中，根结点 A 下分出了 3 个子树，所以，结点 A 的度为 3。\n\n> 一棵树的度是树内各结点的度的最大值。图 1（A）表示的树中，各个结点的度的最大值为 3，所以，整棵树的度的值是 3。\n\n结点的层次：从一棵树的树根开始，树根所在层为第一层，根的孩子结点所在的层为第二层，依次类推。对于图 1（A）来说，A 结点在第一层，B、C、D 为第二层，E、F、G、H、I、J 在第三层，K、L、M 在第四层。\n\n> 一棵树的深度（高度）是树中结点所在的最大的层次。图 1（A）树的深度为 4。\n\n如果两个结点的父结点虽不相同，但是它们的父结点处在同一层次上，那么这两个结点互为堂兄弟。例如，图 1（A）中，结点 G 和 E、F、H、I、J 的父结点都在第二层，所以之间为堂兄弟的关系。\n\n### 4.有序树和无序树\n如果树中结点的子树从左到右看，谁在左边，谁在右边，是有规定的，这棵树称为有序树；反之称为无序树。\n\n> 在有序树中，一个结点最左边的子树称为\"第一个孩子\"，最右边的称为\"最后一个孩子\"。\n\n拿图 1（A）来说，如果是其本身是一棵有序树，则以结点 B 为根结点的子树为整棵树的第一个孩子，以结点 D 为根结点的子树为整棵树的最后一个孩子。\n\n### 5.森林\n由 m（m >= 0）个互不相交的树组成的集合被称为森林。图 1（A）中，分别以 B、C、D 为根结点的三棵子树就可以称为森林。\n\n前面讲到，树可以理解为是由根结点和若干子树构成的，而这若干子树本身是一个森林，所以，树还可以理解为是由根结点和森林组成的。用一个式子表示为：\n\n```\n> Tree =（root,F）\n```\n\n其中，root 表示树的根结点，F 表示由 m（m >= 0）棵树组成的森林。\n## 二、二叉树及其性质\n简单地理解，满足以下两个条件的树就是二叉树：\n1.本身是有序树；\n2.树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2；\n例如，图 1 a) 就是一棵二叉树，而图 1 b) 则不是。\n\n![图 2 a)  二叉树](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJMUjEtMC5naWY)\n### 1.二叉树的性质\n二叉树具有以下几个性质：\n1.二叉树中，第 i 层最多有 2^i-1^ 个结点。\n2.如果二叉树的深度为 K，那么此二叉树最多有 2^K^-1 个结点。\n3.二叉树中，终端结点数（叶子结点数）为 n~0~，度为 2 的结点数为 n~2~，则 n~0~=n~2~+1。\n\n> 性质 3 的计算方法为：对于一个二叉树来说，除了度为 0 的叶子结点和度为 2 的结点，剩下的就是度为 1 的结点（设为 n1），那么总结点\n> n=n~0~+n~1~+n~2~。 同时，对于每一个结点来说都是由其父结点分支表示的，假设树中分枝数为 B，那么总结点数 n=B+1。而分枝数是可以通过\n> n~1~ 和 n~2~ 表示的，即 B=n~1~+2*n~2~。所以，n 用另外一种方式表示为 n=n~1~+2*n~2~+1。 两种方式得到的 n\n> 值组成一个方程组，就可以得出 n~0~=n~2~+1。\n\n二叉树还可以继续分类，衍生出满二叉树和完全二叉树。\n### 2.满二叉树\n如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为满二叉树。\n\n满二叉树示意图\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJIRzgtMS5naWY)\n图 2 满二叉树示意图\n\n如图 2 所示就是一棵满二叉树。\n\n满二叉树除了满足普通二叉树的性质，还具有以下性质：\n满二叉树中第 i 层的节点数为 2^n-1^ 个。\n深度为 k 的满二叉树必有 2^k-1^ 个节点 ，叶子数为 2^k-1^。\n满二叉树中不存在度为 1 的节点，每一个分支点中都两棵深度相同的子树，且叶子节点都在最底层。\n具有 n 个节点的满二叉树的深度为 log~2~(n+1)。\n\n### 3.完全二叉树\n如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。\n\n完全二叉树示意图\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJNYjUtMi5naWY)\n图 3 完全二叉树示意图\n\n如图 3a) 所示是一棵完全二叉树，图 3b) 由于最后一层的节点没有按照从左向右分布，因此只能算作是普通的二叉树。\n\n完全二叉树除了具有普通二叉树的性质，它自身也具有一些独特的性质，比如说，n 个结点的完全二叉树的深度为 ⌊log~2~n⌋+1。\n\n> ⌊log~2~n⌋ 表示取小于 log~2~n 的最大整数。例如，⌊log~2~4⌋ = 2，而 ⌊log~2~5⌋ 结果也是 2。\n\n对于任意一个完全二叉树来说，如果将含有的结点按照层次从左到右依次标号（如图 3a)），对于任意一个结点 i ，完全二叉树还有以下几个结论成立：\n当 i>1 时，父亲结点为结点 [i/2] 。（i=1 时，表示的是根结点，无父亲结点）\n如果 2*i>n（总结点的个数） ，则结点 i 肯定没有左孩子（为叶子结点）；否则其左孩子是结点 2*i 。\n如果 2*i+1>n ，则结点 i 肯定没有右孩子；否则右孩子是结点 2*i+1 。\n\n\n## 三、树的存储结构\n\n### 1.二叉树的顺序存储\n二叉树的顺序存储，指的是使用顺序表（数组）存储二叉树。**注：顺序存储只适用于完全二叉树。**\n\n>  如果我们想顺序存储普通二叉树，需要提前将普通二叉树转化为完全二叉树。如下图所示：\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NjI0TTAyLTAucG5n?x-oss-process=image/format,png)\n\n完全二叉树的顺序存储，仅需从根节点开始，按照层次依次将树中节点存储到数组即可。\n比如上面的图2，存储结构如下：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NjI0RjA0LTMucG5n?x-oss-process=image/format,png)\n普通二叉树使用顺序表存储或多或多会存在空间浪费的现象，因此引入下面的链式存储。\n### 2.二叉树的链式存储\n二叉树链式存储结构示意图：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0R0oyWi0xLmdpZg)\n采用链式存储二叉树时，其节点结构由 3 部分构成（如图所示）：\n指向左孩子节点的指针（Lchild）；\n节点存储的数据（data）；\n指向右孩子节点的指针（Rchild）；\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0R0swMzQtMi5naWY)\n数据结构为：\n```c\ntypedef struct BiTNode{\n    TElemType data;//数据域\n    struct BiTNode *lchild,*rchild;//左右孩子指针\n    struct BiTNode *parent;\n}BiTNode,*BiTree;\n```\n下面是一段完整的c语言代码\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n\n//Struct of binary tree node\ntypedef struct BiTNode {\n\tELEMTYPE data;\n\tstruct BiTNode *lchild, *rchild;//child node pointer\n\tstruct BiTNode *parent;//parent node pointer\n}BiTNode, *BiTree;\n\n/**\n*Function:\tcreate a tree\n*Input:\t\tBitree\n*return\n*/\nvoid createTree(BiTree *T) {\n\tprintf(\"Tree Graph:\\n\");\n\tprintf(\"1:       1\t\t\\n\");\n\tprintf(\"        /\\\\\t\t\\n\");\n\tprintf(\"2:     2  3\t\t\\n\");\n\tprintf(\"      /\t\t\t\\n\");\n\tprintf(\"3:   4\t\t\t\\n\");\n\n\t//Depth: 1\n\t*T = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->data = 1;\n\n\t//Depth: 2\n\t(*T)->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->data = 2;\n\t(*T)->lchild->parent = *T;\n\n\t(*T)->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->data = 3;\n\t(*T)->rchild->parent = *T;\n\n\t//Depth: 3\n\t(*T)->lchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->lchild->data = 4;\n\t(*T)->lchild->lchild->parent = (*T)->lchild;\n\n\t(*T)->lchild->rchild = NULL;\n\t(*T)->rchild->lchild = NULL;\n\t(*T)->rchild->rchild = NULL;\n\n\t//Depth: 4\n\t(*T)->lchild->lchild->lchild = NULL;\n\t(*T)->lchild->lchild->rchild = NULL;\n\n}\n\nint main() {\n\tBiTree tree;\n\tcreateTree(&tree);\n\tprintf(\"Root is:%d\\n\",tree->data);\n\tprintf(\"Parent of the fourth node is:%d\\n\", tree->lchild->lchild->parent->data);\n\tgetchar();\n\treturn 0;\n}\n```\n\n\n**三叉链表**：在某些实际场景中，可能会做 \"查找某节点的父节点\" 的操作，这时可以在节点结构中再添加一个指针域，用于各个节点指向其父亲节点。\n\n## 四、先序遍历\n二叉树先序遍历的实现思想是：\n1.访问根节点；\n2.访问当前节点的左子树；\n3.若当前节点无左子树，则访问当前节点的右子树；\n如图所示二叉树：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png)\n### 递归方法：\n二叉树的先序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归）：\n\n```c\nvoid Preorder(BiTree T) {\n\tif (T) {\n\t\tVisit(T);\n\t\tPreorder(T->lchild);\n\t\tPreorder(T->rchild);\n\t}\n\treturn;\n}\n```\n\n### 非递归方法：\n而递归的底层实现依靠的是栈存储结构，因此，二叉树的先序遍历既可以直接采用递归思想实现，也可以使用栈的存储结构模拟递归的思想实现，思路如下：\n1.对于每个节点判断是否有左右节点，\n2.如果有左节点则继续访问左孩子节点，并判断其是否有右节点，如果有则入栈，没有则忽略。\n3.如果当前节点没有左孩子节点，则继续判断栈是否有元素，如果有则回到栈节点继续访问右子树。如果没有则前序遍历完成。\n\n其 C 语言实现代码为：\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n#define MAXSIZE 100\n\nstatic int top = -1;\n//Struct of binary tree node\ntypedef struct BiTNode {\n\tELEMTYPE data;\n\tstruct BiTNode *lchild, *rchild;//child node pointer\n}BiTNode, *BiTree;\n\n/**\n*Function:\tcreate a tree\n*Input:\t\tBitree\n*return\n*/\nvoid CreateTree(BiTree *T) {\n\tprintf(\"Tree Graph:\\n\");\n\tprintf(\"1:       1\t\t\\n\");\n\tprintf(\"        /\\\\\t\t\\n\");\n\tprintf(\"2:     2  3\t\t\\n\");\n\tprintf(\"      /\\\\  /\\\\ \t\\n\");\n\tprintf(\"3:   4 5  6 7\t\\n\");\n\n\t//Depth: 1\n\t*T = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->data = 1;\n\n\t//Depth: 2\n\t(*T)->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->data = 2;\n\n\t(*T)->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->data = 3;\n\n\t//Depth: 3\n\t(*T)->lchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->lchild->data = 4;\n\n\t(*T)->lchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->rchild->data = 5;\n\n\t(*T)->rchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->lchild->data = 6;\n\n\t(*T)->rchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->rchild->data = 7;\n\n\t//Depth: 4\n\t(*T)->lchild->lchild->lchild = NULL;\n\t(*T)->lchild->lchild->rchild = NULL;\n\n\t(*T)->lchild->rchild->lchild = NULL;\n\t(*T)->lchild->rchild->rchild = NULL;\n\n\t(*T)->rchild->lchild->lchild = NULL;\n\t(*T)->rchild->lchild->rchild = NULL;\n\n\t(*T)->rchild->rchild->lchild = NULL;\n\t(*T)->rchild->rchild->rchild = NULL;\n\n}\n/**\n*Function:\tvisit a node\n*Input:\t\tBiTNode\n*return\n*/\nvoid Visit(BiTNode *T) {\n\tprintf(\"Preorder:%d\\n\", T->data);\n}\n/**\n*Function:\tpreorder visit a tree\n*Input:\t\tBitree\n*return\n*/\nvoid Preorder(BiTree T) {\n\tif (T) {\n\t\tVisit(T);\n\t\tPreorder(T->lchild);\n\t\tPreorder(T->rchild);\n\t}\n\treturn;\n}\n/**\n*Function:\tpop\n*Input:\t\tBiTNode*[]\n*return\t\tBiTNode*--The top element of stack.\n*/\nBiTNode* pop(BiTNode* Stack[]) {\n\tBiTNode* a = Stack[top--];\n\treturn a;\n}\n/**\n*Function:\tpush\n*Input:\t\tBiTNode*[], BiTNode*\n*return\n*/\nvoid push(BiTNode* Stack[], BiTNode* a) {\n\tStack[++top] = a;\n}\n/**\n*Function:\tpreorder visit a tree by using a stack\n*Input:\t\tBitree\n*return\n*/\nvoid PreorderStack(BiTree T) {\n\tBiTNode* Stack[MAXSIZE];//Initialize the stack\n\twhile (T) {\n\t\tVisit(T);\n\t\tif (T->lchild) {//If T has left child\n\t\t\tif (T->rchild) {\t//If T has left and right child\n\t\t\t\tpush(Stack,T->rchild);\n\t\t\t}\n\t\t\tT = T->lchild;\n\t\t}\n\t\telse if(T->rchild){//If T only has right child\n\t\t\tT = T->rchild;\n\t\t}\n\t\telse if(top>=0){//If Stack has elements\n\t\t\tBiTNode *a = pop(Stack);\n\t\t\tT = a;\n\t\t}\n\t\telse {//If T is last node in preorder.\n\t\t\tbreak;\n\t\t}\n\t}\n\n\n\treturn;\n}\nint main() {\n\tBiTree tree;\n\tCreateTree(&tree);\n\t//recursive\n\tprintf(\"Recursive PreOrder\\n\");\n\tPreorder(tree);\n\n\t//not recursive\n\tprintf(\"Non-recursive PreOrder\\n\");\n\tPreorderStack(tree);\n\tgetchar();\n\treturn 0;\n}\n```\n\n\n## 五、中序遍历\n二叉树中序遍历的实现思想是：\n1.访问当前节点的左子树；\n2.访问根节点；\n3.访问当前节点的右子树；\n\n如图所示二叉树：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png)\n### 递归方法\n二叉树的中序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归方法）：\n\n```c\n/**\n*Function:\tInOrder visit a tree\n*Input:\t\tBitree\n*return\n*/\nvoid InOrder(BiTree T) {\n\tif (T) {\n\t\tInOrder(T->lchild);\n\t\tVisit(T);\n\t\tInOrder(T->rchild);\n\t}\n\treturn;\n}\n```\n### 非递归方法\n我的思路如下：\n访问根节点，判断其是否有左右孩子。\n如果有左孩子，则根节点入栈，继续访问左子树。如果左子树为空，则访问出栈元素，然后访问其右子树。\n如果没有左孩子，则判断是否有右孩子，并访问当前节点。\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n#define MAXSIZE 100\n\nstatic int top = -1;\n//Struct of binary tree node\ntypedef struct BiTNode {\n\tELEMTYPE data;\n\tstruct BiTNode *lchild, *rchild;//child node pointer\n}BiTNode, *BiTree;\n\n/**\n*Function:\tcreate a tree\n*Input:\t\tBitree\n*return\n*/\nvoid CreateTree(BiTree *T) {\n\tprintf(\"Tree Graph:\\n\");\n\tprintf(\"1:       1\t\t\\n\");\n\tprintf(\"        /\\\\\t\t\\n\");\n\tprintf(\"2:     2  3\t\t\\n\");\n\tprintf(\"      /\\\\  /\\\\ \t\\n\");\n\tprintf(\"3:   4 5  6 7\t\\n\");\n\n\t//Depth: 1\n\t*T = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->data = 1;\n\n\t//Depth: 2\n\t(*T)->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->data = 2;\n\n\t(*T)->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->data = 3;\n\n\t//Depth: 3\n\t(*T)->lchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->lchild->data = 4;\n\n\t(*T)->lchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->rchild->data = 5;\n\n\t(*T)->rchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->lchild->data = 6;\n\n\t(*T)->rchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->rchild->data = 7;\n\n\t//Depth: 4\n\t(*T)->lchild->lchild->lchild = NULL;\n\t(*T)->lchild->lchild->rchild = NULL;\n\n\t(*T)->lchild->rchild->lchild = NULL;\n\t(*T)->lchild->rchild->rchild = NULL;\n\n\t(*T)->rchild->lchild->lchild = NULL;\n\t(*T)->rchild->lchild->rchild = NULL;\n\n\t(*T)->rchild->rchild->lchild = NULL;\n\t(*T)->rchild->rchild->rchild = NULL;\n\n}\n/**\n*Function:\tvisit a node\n*Input:\t\tBiTNode\n*return\n*/\nvoid Visit(BiTNode *T) {\n\tprintf(\"InOrder:%d\\n\", T->data);\n}\n/**\n*Function:\tInOrder visit a tree\n*Input:\t\tBitree\n*return\n*/\nvoid InOrder(BiTree T) {\n\tif (T) {\n\t\tInOrder(T->lchild);\n\t\tVisit(T);\n\t\tInOrder(T->rchild);\n\t}\n\treturn;\n}\n/**\n*Function:\tpop\n*Input:\t\tBiTNode*[]\n*return\t\tBiTNode*--The top element of stack.\n*/\nBiTNode* pop(BiTNode* Stack[]) {\n\tBiTNode* a = Stack[top--];\n\treturn a;\n}\n/**\n*Function:\tpush\n*Input:\t\tBiTNode*[], BiTNode*\n*return\n*/\nvoid push(BiTNode* Stack[], BiTNode* a) {\n\tStack[++top] = a;\n}\n/**\n*Function:\tInOrder visit a tree by using a stack\n*Input:\t\tBitree\n*return\n*/\nvoid InOrderStack(BiTree T) {\n\tBiTNode* Stack[MAXSIZE];//Initialize the stack\n\twhile (T) {\n\t\tif (T->lchild) {//If T has left child\n\t\t\tpush(Stack, T);\n\t\t\tT = T->lchild;\n\t\t}\n\t\telse {\n\t\t\tVisit(T);\n\t\t\tif (T->rchild) {//If T has right child\n\t\t\t\tT = T->rchild;\n\t\t\t}\n\t\t\telse if (top >= 0) {//If Stack has elements\n\t\t\t\tBiTNode *a = pop(Stack);\n\t\t\t\tVisit(a);\n\t\t\t\tT = a->rchild;\n\t\t\t}\n\t\t\telse {//If T is last node in preorder.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\n\treturn;\n}\nint main() {\n\tBiTree tree;\n\tCreateTree(&tree);\n\tprintf(\"Recursive InOrder\\n\");\n\t//recursive\n\tInOrder(tree);\n\n\tprintf(\"Non-recursive InOrder\\n\");\n\t//not recursive\n\tInOrderStack(tree);\n\tgetchar();\n\treturn 0;\n}\n```\n\n两种更标准的方法如下：\n中序遍历的非递归方式实现思想是：从根结点开始，遍历左孩子同时压栈，当遍历结束，说明当前遍历的结点没有左孩子，从栈中取出来调用操作函数，然后访问该结点的右孩子，继续以上重复性的操作。\n\n除此之外，还有另一种实现思想：中序遍历过程中，只需将每个结点的左子树压栈即可，右子树不需要压栈。当结点的左子树遍历完成后，只需要以栈顶结点的右孩子为根结点，继续循环遍历即可。\n\n\n## 六、后序遍历\n\n二叉树中序遍历的实现思想是：\n1.访问当前节点的左子树；\n2.访问当前节点的右子树；\n3.访问根节点；\n\n如图所示二叉树：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png)\n### 递归方法\n二叉树的后序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归方法）：\n\n```c\n/**\n*Function:\tRecursive method to traverse a tree in post-order\n*Input:\t\tBitree\n*return\n*/\nvoid PostOrder(const BiTree T) {\n\tif (T) {\n\t\tPostOrder(T->lchild);\n\t\tPostOrder(T->rchild);\n\t\tVisit(T);\n\t}\n\treturn;\n}\n```\n### 非递归方法\n非递归算法的思路是：\n后序遍历的逆序 是 先序遍历交换左右子树遍历顺序。\n因此用两个栈来实现。\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n#define MAXSIZE 100\n\nstatic int top = -1;   //index of stack\nstatic int printtop = -1; //index of printstack\n//Struct of binary tree node\ntypedef struct BiTNode {\n\tELEMTYPE data;\n\tstruct BiTNode *lchild, *rchild;//child node pointer\n}BiTNode, *BiTree;\n\n/**\n*Function:\tcreate a tree\n*Input:\t\tBitree\n*return\n*/\nvoid CreateTree(BiTree *T) {\n\tprintf(\"Tree Graph:\\n\");\n\tprintf(\"1:       1\t\t\\n\");\n\tprintf(\"        /\\\\\t\t\\n\");\n\tprintf(\"2:     2  3\t\t\\n\");\n\tprintf(\"      /\\\\  /\\\\ \t\\n\");\n\tprintf(\"3:   4 5  6 7\t\\n\");\n\n\t//Depth: 1\n\t*T = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->data = 1;\n\n\t//Depth: 2\n\t(*T)->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->data = 2;\n\n\t(*T)->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->data = 3;\n\n\t//Depth: 3\n\t(*T)->lchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->lchild->data = 4;\n\n\t(*T)->lchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->rchild->data = 5;\n\n\t(*T)->rchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->lchild->data = 6;\n\n\t(*T)->rchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->rchild->data = 7;\n\n\t//Depth: 4\n\t(*T)->lchild->lchild->lchild = NULL;\n\t(*T)->lchild->lchild->rchild = NULL;\n\n\t(*T)->lchild->rchild->lchild = NULL;\n\t(*T)->lchild->rchild->rchild = NULL;\n\n\t(*T)->rchild->lchild->lchild = NULL;\n\t(*T)->rchild->lchild->rchild = NULL;\n\n\t(*T)->rchild->rchild->lchild = NULL;\n\t(*T)->rchild->rchild->rchild = NULL;\n\n}\n/**\n*Function:\tvisit a node\n*Input:\t\tBiTNode\n*return\n*/\nvoid Visit(BiTNode *T) {\n\tprintf(\"PostOrder:%d\\n\", T->data);\n}\n/**\n*Function:\tRecursive method to traverse a tree in post-order\n*Input:\t\tBitree\n*return\n*/\nvoid PostOrder(const BiTree T) {\n\tif (T) {\n\t\tPostOrder(T->lchild);\n\t\tPostOrder(T->rchild);\n\t\tVisit(T);\n\t}\n\treturn;\n}\n/**\n*Function:\tpop\n*Input:\t\tBiTNode*[]\n*return\t\tBiTNode*--The top element of stack.\n*/\nBiTNode* pop(BiTNode* Stack[]) {\n\tBiTNode* a = Stack[top--];\n\treturn a;\n}\n/**\n*Function:\tpush\n*Input:\t\tBiTNode*[], BiTNode*\n*return\n*/\nvoid push(BiTNode* Stack[], BiTNode* a) {\n\tStack[++top] = a;\n}\n/**\n*Function:\tprintpop for printstack\n*Input:\t\tBiTNode*[]\n*return\t\tBiTNode*--The top element of stack.\n*/\nBiTNode* printpop(BiTNode* Stack[]) {\n\tBiTNode* a = Stack[printtop--];\n\treturn a;\n}\n/**\n*Function:\tprintpush for printstack\n*Input:\t\tBiTNode*[], BiTNode*\n*return\n*/\nvoid printpush(BiTNode* Stack[], BiTNode* a) {\n\tStack[++printtop] = a;\n}\n/**\n*Function:\tPostOrder visit a tree by using two stacks\n*Input:\t\tBitree\n*return\n*/\nvoid PostOrderStack(BiTree T) {\n\tBiTNode* Stack[MAXSIZE];//Initialize the stack\n\tBiTNode* PrintStack[MAXSIZE];//Initialize the stack\n\twhile (T) {\n\t\tprintpush(PrintStack, T);\n\t\tif (T->rchild) {//If T has left child\n\t\t\tif (T->lchild) {\t//If T has left and right child\n\t\t\t\tpush(Stack, T->lchild);\n\t\t\t}\n\t\t\tT = T->rchild;\n\t\t}\n\t\telse if (T->lchild) {//If T only has right child\n\t\t\tT = T->lchild;\n\t\t}\n\t\telse if (top >= 0) {//If Stack has elements\n\t\t\tBiTNode *a = pop(Stack);\n\t\t\tT = a;\n\t\t}\n\t\telse {//If T is last node in preorder.\n\t\t\tbreak;\n\t\t}\n\t}\n\n\twhile (printtop >= 0) {\n\t\tVisit(printpop(PrintStack));\n\t}\n\n\treturn;\n}\n\nint main() {\n\tBiTree tree;\n\tCreateTree(&tree);\n\tprintf(\"Recursive method\\n\");\n\t//Recursive method to traverse a tree in post-order\n\tPostOrder(tree);\n\n\tprintf(\"Non-recursive method\\n\");\n\t//Non-recursive method to traverse a tree in post-order\n\tPostOrderStack(tree);\n\tgetchar();\n\tdelete tree;\n\treturn 0;\n}\n```\n另一种算法思路：\n用一个栈，但是设置标志位。\n后序遍历是在遍历完当前结点的左右孩子之后，才调用操作函数，所以需要在操作结点进栈时，为每个结点配备一个标志位。当遍历该结点的左孩子时，设置当前结点的标志位为 0，进栈；当要遍历该结点的右孩子时，设置当前结点的标志位为 1，进栈。\n\n这样，当遍历完成，该结点弹栈时，查看该结点的标志位的值：如果是 0，表示该结点的右孩子还没有遍历；反之如果是 1，说明该结点的左右孩子都遍历完成，可以调用操作函数。\n[代码实现](http://c.biancheng.net/view/3390.html)\n## 七、层次遍历\n按照二叉树中的层次从左到右依次遍历每层中的结点。\n具体的实现思路是：通过使用队列的数据结构，从树的根结点开始，依次将其左孩子和右孩子入队。而后每次队列中一个结点出队，都将其左孩子和右孩子入队，直到树中所有结点都出队，出队结点的先后顺序就是层次遍历的最终结果。\n\n如图1所示二叉树：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png)\n例如，层次遍历图 1 中的二叉树：\n首先，根结点 1 入队；\n根结点 1 出队，出队的同时，将左孩子 2 和右孩子 3 分别入队；\n队头结点 2 出队，出队的同时，将结点 2 的左孩子 4 和右孩子 5 依次入队；\n队头结点 3 出队，出队的同时，将结点 3 的左孩子 6 和右孩子 7 依次入队；\n不断地循环，直至队列内为空。\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n#define MAXSIZE 100\n\nstatic int front = 0, rear = 0;\n//Struct of binary tree node\ntypedef struct BiTNode {\n\tELEMTYPE data;\n\tstruct BiTNode *lchild, *rchild;//child node pointer\n}BiTNode, *BiTree;\n\n/**\n*Function:\tcreate a tree\n*Input:\t\tBitree\n*return\n*/\nvoid CreateTree(BiTree *T) {\n\tprintf(\"Tree Graph:\\n\");\n\tprintf(\"1:       1\t\t\\n\");\n\tprintf(\"        /\\\\\t\t\\n\");\n\tprintf(\"2:     2  3\t\t\\n\");\n\tprintf(\"      /\\\\  /\\\\ \t\\n\");\n\tprintf(\"3:   4 5  6 7\t\\n\");\n\n\t//Depth: 1\n\t*T = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->data = 1;\n\n\t//Depth: 2\n\t(*T)->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->data = 2;\n\n\t(*T)->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->data = 3;\n\n\t//Depth: 3\n\t(*T)->lchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->lchild->data = 4;\n\n\t(*T)->lchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->rchild->data = 5;\n\n\t(*T)->rchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->lchild->data = 6;\n\n\t(*T)->rchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->rchild->data = 7;\n\n\t//Depth: 4\n\t(*T)->lchild->lchild->lchild = NULL;\n\t(*T)->lchild->lchild->rchild = NULL;\n\n\t(*T)->lchild->rchild->lchild = NULL;\n\t(*T)->lchild->rchild->rchild = NULL;\n\n\t(*T)->rchild->lchild->lchild = NULL;\n\t(*T)->rchild->lchild->rchild = NULL;\n\n\t(*T)->rchild->rchild->lchild = NULL;\n\t(*T)->rchild->rchild->rchild = NULL;\n\n}\n/**\n*Function:\tvisit a node\n*Input:\t\tBiTNode\n*return\n*/\nvoid Visit(BiTNode *T) {\n\tprintf(\"Hierarchical traversal:%d\\n\", T->data);\n}\n\nvoid EnQueue(BiTNode * queue[],BiTNode * a) {\n\tqueue[rear++] = a;\n}\nBiTNode * DeQueue(BiTNode * queue[]) {\n\tBiTNode *b = queue[front++];\n\treturn b;\n}\n/**\n*Function:\tHierarchical traversal\n*Input:\t\tBitree\n*return\n*/\nvoid Hierarchical(const BiTree T) {\n\tBiTNode* Queue[MAXSIZE];\n\tBiTree q = T;\n\tEnQueue(Queue,q);\n\twhile (front<rear) {\n\t\tBiTNode* node = DeQueue(Queue);\n\t\tVisit(node);\n\t\tif (node->lchild!=NULL) {\n\t\t\tEnQueue(Queue, node->lchild);\n\t\t}\n\t\tif (node->rchild != NULL) {\n\t\t\tEnQueue(Queue, node->rchild);\n\t\t}\n\t}\n\treturn;\n}\n\nint main() {\n\tBiTree tree;\n\tCreateTree(&tree);\n\t//Hierarchical traversal\n\tHierarchical(tree);\n\tgetchar();\n\tdelete tree;\n\treturn 0;\n}\n```\n\n## 八、哈夫曼树\n### 基本概念\n路径：在一棵树中，一个结点到另一个结点之间的通路，称为路径。图 1 中，从根结点到结点 a 之间的通路就是一条路径。\n\n路径长度：在一条路径中，每经过一个结点，路径长度都要加 1 。例如在一棵树中，规定根结点所在层数为1层，那么从根结点到第 i 层结点的路径长度为 i - 1 。图 1 中从根结点到结点 c 的路径长度为 3。\n\n结点的权：给每一个结点赋予一个新的数值，被称为这个结点的权。例如，图 1 中结点 a 的权为 7，结点 b 的权为 5。\n\n结点的带权路径长度：指的是从根结点到该结点之间的路径长度与该结点的权的乘积。例如，图 1 中结点 b 的带权路径长度为 2 * 5 = 10 \n\n![在这里插入图片描述](https://img-blog.csdn.net/20131205224108125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd3RmbW9ua2luZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n哈夫曼树：又称最优二叉树。它是 n 个带权叶子结点构成的所有二叉树中，带权路径长度 WPL 最小的二叉树。\n如下图：\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk1NjNUYjAtMC5wbmc?x-oss-process=image/format,png)\n### 构建过程\n对于给定的有各自权值的 n 个结点，构建哈夫曼树有一个行之有效的办法：\n在 n 个权值中选出两个最小的权值，对应的两个结点组成一个新的二叉树，且新二叉树的根结点的权值为左右孩子权值的和；\n在原有的 n 个权值中删除那两个最小的权值，同时将新的权值加入到 n–2 个权值的行列中，以此类推；\n重复 1 和 2 ，直到所以的结点构建成了一棵二叉树为止，这棵树就是哈夫曼树。\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk1NjNRUzUtMS5wbmc?x-oss-process=image/format,png)\n### 哈弗曼树中结点结构\n构建哈夫曼树时，首先需要确定树中结点的构成。由于哈夫曼树的构建是从叶子结点开始，不断地构建新的父结点，直至树根，所以结点中应包含指向父结点的指针。但是在使用哈夫曼树时是从树根开始，根据需求遍历树中的结点，因此每个结点需要有指向其左孩子和右孩子的指针。\n\n所以，哈夫曼树中结点构成用代码表示为：\n\n```c\n//Struct of huffman tree\ntypedef struct BTNode {\n\tELEMTYPE data;\n\tstruct BTNode *left, *right;//child node pointer\n\tstruct BTNode *parent;//child node pointer\n}BTNode, *HFTree;\n```\n### 构建哈弗曼树的算法实现及WPL的计算\n构建哈夫曼树时，需要每次根据各个结点的权重值，筛选出其中值最小的两个结点，然后构建二叉树。\n\n大佬的思路：查找权重值最小的两个结点的思想是：从树组起始位置开始，首先找到两个无父结点的结点（说明还未使用其构建成树），然后和后续无父结点的结点依次做比较，有两种情况需要考虑：\n如果比两个结点中较小的那个还小，就保留这个结点，删除原来较大的结点；\n如果介于两个结点权重值之间，替换原来较大的结点；\n参考：[哈夫曼树c语言实现](https://blog.csdn.net/wtfmonking/article/details/17150499)\n我的思路：\n建立一个哈夫曼树：\n创建工作指针p+tmp，\n对于一组数，依次找出最小的数加入树中(选择排序思想)，\n如果树没有创建，则创建一个结点存入第一个数。工作指针指向这个结点\n如果工作指针没有左孩子，则工作指针左孩子指向下一个结点\n如果工作指针没有右孩子，则工作指针右孩子指向下一个结点\n如果工作指针有两个孩子，则创建一个空结点，左孩子指向工作指针，右孩子指向下一个结点，并将工作指针指向该结点。\n计算wpl:\n递归计算，\n如果结点没有左右孩子则为叶子结点，返回权值*高度.\n如果有孩子，则返回左子树wpl和右子树wpl之和.\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n#define MAXSIZE 100\n\nstatic int top = -1;\n//Struct of huffman tree\ntypedef struct BTNode {\n\tELEMTYPE data;\n\tstruct BTNode *left, *right;//child node pointer\n\tstruct BTNode *parent;//child node pointer\n}BTNode, *HFTree;\n\n/**\n*Function:\tcreate a huffman tree\n*Input:\t\tint *nums--numbers to create tree,int n--num[] size\n*return\n*/\nHFTree CreateTree(int *nums,int n) {\n\tBTNode *p_tmp =(BTNode*)malloc(sizeof(BTNode)); //work pointer\n\tp_tmp->left = NULL;\n\tp_tmp->right = NULL;\n\tp_tmp->parent = NULL;\n\n\tint lastnum = 0;//Initilize with a num less than the min num\n\tfor (int i = 0; i < n; i++) {\n\t\tint min = 100;//Initilize with a num larger than the max num\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (min>nums[j] && lastnum<nums[j]) {\n\t\t\t\tmin = nums[j];\n\t\t\t}\n\t\t}\n\t\tlastnum = min;\n\t\t//create a new node\n\t\tBTNode *p_newchild= (BTNode*)malloc(sizeof(BTNode));\n\t\tp_newchild->data = min;\n\t\tp_newchild->left = NULL;\n\t\tp_newchild->right = NULL;\n\t\tp_newchild->parent = NULL;\n\n\t\tif (1 == n) {\n\t\t\treturn p_newchild;\n\t\t}\n\t\tif (p_tmp->left==NULL) { //add node to left of p_tmp\n\t\t\tp_tmp->left = p_newchild;\n\t\t\tp_newchild->parent = p_tmp;\n\t\t}\n\t\telse if(p_tmp->right == NULL){//add node to right of p_tmp\n\t\t\tp_tmp->right = p_newchild;\n\t\t\tp_tmp->data = p_tmp->left->data + p_tmp->right->data;\n\t\t\tp_newchild->parent =p_tmp;\n\t\t}\n\t\telse {//add brother node of p_tmp and create p_newparent\n\t\t\tBTNode *p_newparent = (BTNode*)malloc(sizeof(BTNode));\n\t\t\tp_newparent->data = p_tmp->data+min;\n\t\t\tif (p_tmp->data<=min) {\n\t\t\t\tp_newparent->left = p_tmp;\n\t\t\t\tp_newparent->right = p_newchild;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp_newparent->left = p_newchild;\n\t\t\t\tp_newparent->right = p_tmp;\n\t\t\t}\n\t\t\tp_newparent->parent = NULL;\n\t\t\tp_newchild->parent = p_newparent;\n\t\t\tp_tmp = p_newparent;\n\t\t}\n\t}\n\treturn p_tmp;\n}\n/**\n*Function:\tvisit a node\n*Input:\t\tBiTNode\n*return\n*/\nvoid Visit(BTNode *T) {\n\tprintf(\"PreOrder:%d\\n\", T->data);\n}\n/**\n*Function:\tPreOrder visit a tree\n*Input:\t\tBitree\n*return\n*/\nvoid PreOrder(HFTree T) {\n\tif (T) {\n\t\tVisit(T);\n\t\tPreOrder(T->left);\n\t\tPreOrder(T->right);\n\t}\n\treturn;\n}\n/**\n*Function:\tcalculate the weight path length of HFTree\n*Input:\t\tHFTree T, int len--depth\n*return\t\twpl\n*/\nint cal_wpl(HFTree T, int len) {\n\tif (T) {\n\t\t//If leaf node\n\t\tif (T->left==NULL && T->right==NULL) {\n\t\t\treturn T->data*len;\n\t\t}\n\t\telse {\n\t\t\t//If not leaf node, return left child tree wpl and right child tree wpl\n\t\t\treturn cal_wpl(T->left,len+1) + cal_wpl(T->left,len+1);\n\t\t}\n\t}\n\t//Null tree return 0;\n\treturn 0;\n}\nint main() {\n\t\n\tint nums[5] = {9,5,1,2,18};\n\tHFTree tree=CreateTree(nums,5);\n\n\t//recursive visit tree node\n\tPreOrder(tree);\n\tprintf(\"%d\",cal_wpl(tree,0));\n\tgetchar();\n\treturn 0;\n}\n```\n","source":"_posts/004-tree-datatype.md","raw":"---\ntitle: 数据结构总结 —— 树\ndate: 2022-03-12 08:59:29\ncategories: 数据结构\ntags: \n- c\n- 数据结构\n---\n\n# 引言\n\n[《c语言学习网》数据结构总结——树](http://c.biancheng.net/view/3390.html)\n本文旨在根据教程巩固树的数据结构知识和c语言指针的应用，记录一下自己学习过程中的代码，知识讲解参考教程。\n## 一、树的基本概念和术语\n\n树结构是一种非线性存储结构，存储的是具有“一对多”关系的数据元素的集合。如图 是使用树结构存储的集合 {A,B,C,D,E,F,G,H,I,J,K,L,M} 的示意图。对于数据 A 来说，和数据 B、C、D 有关系；对于数据 B 来说，和 E、F 有关系。这就是“一对多”的关系。\n![图 1（A）树的示例](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NDMwMTQ5My0wLnBuZw?x-oss-process=image/format,png)\n<!--more-->\n\n### 1.树的节点\n结点：使用树结构存储的每一个数据元素都被称为“结点”。例如，图 1（A）中，数据元素 A 就是一个结点；\n\n父结点（双亲结点）、子结点和兄弟结点：对于图 1（A）中的结点 A、B、C、D 来说，A 是 B、C、D 结点的父结点（也称为“双亲结点”），而 B、C、D 都是 A 结点的子结点（也称“孩子结点”）。对于 B、C、D 来说，它们都有相同的父结点，所以它们互为兄弟结点。\n\n树根结点（简称“根结点”）：每一个非空树都有且只有一个被称为根的结点。图 1（A）中，结点 A 就是整棵树的根结点。\n\n> 树根的判断依据为：如果一个结点没有父结点，那么这个结点就是整棵树的根结点。\n\n叶子结点：如果结点没有任何子结点，那么此结点称为叶子结点（叶结点）。例如图 1（A）中，结点 K、L、F、G、M、I、J 都是这棵树的叶子结点。\n### 2.子树和空树\n子树：如图 1（A）中，整棵树的根结点为结点 A，而如果单看结点 B、E、F、K、L 组成的部分来说，也是棵树，而且节点 B 为这棵树的根结点。所以称 B、E、F、K、L 这几个结点组成的树为整棵树的子树；同样，结点 E、K、L 构成的也是一棵子树，根结点为 E。\n\n> 注意：单个结点也是一棵树，只不过根结点就是它本身。图 1（A）中，结点 K、L、F 等都是树，且都是整棵树的子树。\n\n知道了子树的概念后，树也可以这样定义：树是由根结点和若干棵子树构成的。\n\n空树：如果集合本身为空，那么构成的树就被称为空树。空树中没有结点。\n\n> 补充：在树结构中，对于具有同一个根结点的各个子树，相互之间不能有交集。例如，图 1（A）中，除了根结点\n> A，其余元素又各自构成了三个子树，根结点分别为 B、C、D，这三个子树相互之间没有相同的结点。如果有，就破坏了树的结构，不能算做是一棵树。\n\n### 3.结点的度和层次\n对于一个结点，拥有的子树数（结点有多少分支）称为结点的度（Degree）。例如，图 1（A）中，根结点 A 下分出了 3 个子树，所以，结点 A 的度为 3。\n\n> 一棵树的度是树内各结点的度的最大值。图 1（A）表示的树中，各个结点的度的最大值为 3，所以，整棵树的度的值是 3。\n\n结点的层次：从一棵树的树根开始，树根所在层为第一层，根的孩子结点所在的层为第二层，依次类推。对于图 1（A）来说，A 结点在第一层，B、C、D 为第二层，E、F、G、H、I、J 在第三层，K、L、M 在第四层。\n\n> 一棵树的深度（高度）是树中结点所在的最大的层次。图 1（A）树的深度为 4。\n\n如果两个结点的父结点虽不相同，但是它们的父结点处在同一层次上，那么这两个结点互为堂兄弟。例如，图 1（A）中，结点 G 和 E、F、H、I、J 的父结点都在第二层，所以之间为堂兄弟的关系。\n\n### 4.有序树和无序树\n如果树中结点的子树从左到右看，谁在左边，谁在右边，是有规定的，这棵树称为有序树；反之称为无序树。\n\n> 在有序树中，一个结点最左边的子树称为\"第一个孩子\"，最右边的称为\"最后一个孩子\"。\n\n拿图 1（A）来说，如果是其本身是一棵有序树，则以结点 B 为根结点的子树为整棵树的第一个孩子，以结点 D 为根结点的子树为整棵树的最后一个孩子。\n\n### 5.森林\n由 m（m >= 0）个互不相交的树组成的集合被称为森林。图 1（A）中，分别以 B、C、D 为根结点的三棵子树就可以称为森林。\n\n前面讲到，树可以理解为是由根结点和若干子树构成的，而这若干子树本身是一个森林，所以，树还可以理解为是由根结点和森林组成的。用一个式子表示为：\n\n```\n> Tree =（root,F）\n```\n\n其中，root 表示树的根结点，F 表示由 m（m >= 0）棵树组成的森林。\n## 二、二叉树及其性质\n简单地理解，满足以下两个条件的树就是二叉树：\n1.本身是有序树；\n2.树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2；\n例如，图 1 a) 就是一棵二叉树，而图 1 b) 则不是。\n\n![图 2 a)  二叉树](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJMUjEtMC5naWY)\n### 1.二叉树的性质\n二叉树具有以下几个性质：\n1.二叉树中，第 i 层最多有 2^i-1^ 个结点。\n2.如果二叉树的深度为 K，那么此二叉树最多有 2^K^-1 个结点。\n3.二叉树中，终端结点数（叶子结点数）为 n~0~，度为 2 的结点数为 n~2~，则 n~0~=n~2~+1。\n\n> 性质 3 的计算方法为：对于一个二叉树来说，除了度为 0 的叶子结点和度为 2 的结点，剩下的就是度为 1 的结点（设为 n1），那么总结点\n> n=n~0~+n~1~+n~2~。 同时，对于每一个结点来说都是由其父结点分支表示的，假设树中分枝数为 B，那么总结点数 n=B+1。而分枝数是可以通过\n> n~1~ 和 n~2~ 表示的，即 B=n~1~+2*n~2~。所以，n 用另外一种方式表示为 n=n~1~+2*n~2~+1。 两种方式得到的 n\n> 值组成一个方程组，就可以得出 n~0~=n~2~+1。\n\n二叉树还可以继续分类，衍生出满二叉树和完全二叉树。\n### 2.满二叉树\n如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为满二叉树。\n\n满二叉树示意图\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJIRzgtMS5naWY)\n图 2 满二叉树示意图\n\n如图 2 所示就是一棵满二叉树。\n\n满二叉树除了满足普通二叉树的性质，还具有以下性质：\n满二叉树中第 i 层的节点数为 2^n-1^ 个。\n深度为 k 的满二叉树必有 2^k-1^ 个节点 ，叶子数为 2^k-1^。\n满二叉树中不存在度为 1 的节点，每一个分支点中都两棵深度相同的子树，且叶子节点都在最底层。\n具有 n 个节点的满二叉树的深度为 log~2~(n+1)。\n\n### 3.完全二叉树\n如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。\n\n完全二叉树示意图\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJNYjUtMi5naWY)\n图 3 完全二叉树示意图\n\n如图 3a) 所示是一棵完全二叉树，图 3b) 由于最后一层的节点没有按照从左向右分布，因此只能算作是普通的二叉树。\n\n完全二叉树除了具有普通二叉树的性质，它自身也具有一些独特的性质，比如说，n 个结点的完全二叉树的深度为 ⌊log~2~n⌋+1。\n\n> ⌊log~2~n⌋ 表示取小于 log~2~n 的最大整数。例如，⌊log~2~4⌋ = 2，而 ⌊log~2~5⌋ 结果也是 2。\n\n对于任意一个完全二叉树来说，如果将含有的结点按照层次从左到右依次标号（如图 3a)），对于任意一个结点 i ，完全二叉树还有以下几个结论成立：\n当 i>1 时，父亲结点为结点 [i/2] 。（i=1 时，表示的是根结点，无父亲结点）\n如果 2*i>n（总结点的个数） ，则结点 i 肯定没有左孩子（为叶子结点）；否则其左孩子是结点 2*i 。\n如果 2*i+1>n ，则结点 i 肯定没有右孩子；否则右孩子是结点 2*i+1 。\n\n\n## 三、树的存储结构\n\n### 1.二叉树的顺序存储\n二叉树的顺序存储，指的是使用顺序表（数组）存储二叉树。**注：顺序存储只适用于完全二叉树。**\n\n>  如果我们想顺序存储普通二叉树，需要提前将普通二叉树转化为完全二叉树。如下图所示：\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NjI0TTAyLTAucG5n?x-oss-process=image/format,png)\n\n完全二叉树的顺序存储，仅需从根节点开始，按照层次依次将树中节点存储到数组即可。\n比如上面的图2，存储结构如下：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NjI0RjA0LTMucG5n?x-oss-process=image/format,png)\n普通二叉树使用顺序表存储或多或多会存在空间浪费的现象，因此引入下面的链式存储。\n### 2.二叉树的链式存储\n二叉树链式存储结构示意图：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0R0oyWi0xLmdpZg)\n采用链式存储二叉树时，其节点结构由 3 部分构成（如图所示）：\n指向左孩子节点的指针（Lchild）；\n节点存储的数据（data）；\n指向右孩子节点的指针（Rchild）；\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0R0swMzQtMi5naWY)\n数据结构为：\n```c\ntypedef struct BiTNode{\n    TElemType data;//数据域\n    struct BiTNode *lchild,*rchild;//左右孩子指针\n    struct BiTNode *parent;\n}BiTNode,*BiTree;\n```\n下面是一段完整的c语言代码\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n\n//Struct of binary tree node\ntypedef struct BiTNode {\n\tELEMTYPE data;\n\tstruct BiTNode *lchild, *rchild;//child node pointer\n\tstruct BiTNode *parent;//parent node pointer\n}BiTNode, *BiTree;\n\n/**\n*Function:\tcreate a tree\n*Input:\t\tBitree\n*return\n*/\nvoid createTree(BiTree *T) {\n\tprintf(\"Tree Graph:\\n\");\n\tprintf(\"1:       1\t\t\\n\");\n\tprintf(\"        /\\\\\t\t\\n\");\n\tprintf(\"2:     2  3\t\t\\n\");\n\tprintf(\"      /\t\t\t\\n\");\n\tprintf(\"3:   4\t\t\t\\n\");\n\n\t//Depth: 1\n\t*T = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->data = 1;\n\n\t//Depth: 2\n\t(*T)->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->data = 2;\n\t(*T)->lchild->parent = *T;\n\n\t(*T)->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->data = 3;\n\t(*T)->rchild->parent = *T;\n\n\t//Depth: 3\n\t(*T)->lchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->lchild->data = 4;\n\t(*T)->lchild->lchild->parent = (*T)->lchild;\n\n\t(*T)->lchild->rchild = NULL;\n\t(*T)->rchild->lchild = NULL;\n\t(*T)->rchild->rchild = NULL;\n\n\t//Depth: 4\n\t(*T)->lchild->lchild->lchild = NULL;\n\t(*T)->lchild->lchild->rchild = NULL;\n\n}\n\nint main() {\n\tBiTree tree;\n\tcreateTree(&tree);\n\tprintf(\"Root is:%d\\n\",tree->data);\n\tprintf(\"Parent of the fourth node is:%d\\n\", tree->lchild->lchild->parent->data);\n\tgetchar();\n\treturn 0;\n}\n```\n\n\n**三叉链表**：在某些实际场景中，可能会做 \"查找某节点的父节点\" 的操作，这时可以在节点结构中再添加一个指针域，用于各个节点指向其父亲节点。\n\n## 四、先序遍历\n二叉树先序遍历的实现思想是：\n1.访问根节点；\n2.访问当前节点的左子树；\n3.若当前节点无左子树，则访问当前节点的右子树；\n如图所示二叉树：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png)\n### 递归方法：\n二叉树的先序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归）：\n\n```c\nvoid Preorder(BiTree T) {\n\tif (T) {\n\t\tVisit(T);\n\t\tPreorder(T->lchild);\n\t\tPreorder(T->rchild);\n\t}\n\treturn;\n}\n```\n\n### 非递归方法：\n而递归的底层实现依靠的是栈存储结构，因此，二叉树的先序遍历既可以直接采用递归思想实现，也可以使用栈的存储结构模拟递归的思想实现，思路如下：\n1.对于每个节点判断是否有左右节点，\n2.如果有左节点则继续访问左孩子节点，并判断其是否有右节点，如果有则入栈，没有则忽略。\n3.如果当前节点没有左孩子节点，则继续判断栈是否有元素，如果有则回到栈节点继续访问右子树。如果没有则前序遍历完成。\n\n其 C 语言实现代码为：\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n#define MAXSIZE 100\n\nstatic int top = -1;\n//Struct of binary tree node\ntypedef struct BiTNode {\n\tELEMTYPE data;\n\tstruct BiTNode *lchild, *rchild;//child node pointer\n}BiTNode, *BiTree;\n\n/**\n*Function:\tcreate a tree\n*Input:\t\tBitree\n*return\n*/\nvoid CreateTree(BiTree *T) {\n\tprintf(\"Tree Graph:\\n\");\n\tprintf(\"1:       1\t\t\\n\");\n\tprintf(\"        /\\\\\t\t\\n\");\n\tprintf(\"2:     2  3\t\t\\n\");\n\tprintf(\"      /\\\\  /\\\\ \t\\n\");\n\tprintf(\"3:   4 5  6 7\t\\n\");\n\n\t//Depth: 1\n\t*T = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->data = 1;\n\n\t//Depth: 2\n\t(*T)->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->data = 2;\n\n\t(*T)->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->data = 3;\n\n\t//Depth: 3\n\t(*T)->lchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->lchild->data = 4;\n\n\t(*T)->lchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->rchild->data = 5;\n\n\t(*T)->rchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->lchild->data = 6;\n\n\t(*T)->rchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->rchild->data = 7;\n\n\t//Depth: 4\n\t(*T)->lchild->lchild->lchild = NULL;\n\t(*T)->lchild->lchild->rchild = NULL;\n\n\t(*T)->lchild->rchild->lchild = NULL;\n\t(*T)->lchild->rchild->rchild = NULL;\n\n\t(*T)->rchild->lchild->lchild = NULL;\n\t(*T)->rchild->lchild->rchild = NULL;\n\n\t(*T)->rchild->rchild->lchild = NULL;\n\t(*T)->rchild->rchild->rchild = NULL;\n\n}\n/**\n*Function:\tvisit a node\n*Input:\t\tBiTNode\n*return\n*/\nvoid Visit(BiTNode *T) {\n\tprintf(\"Preorder:%d\\n\", T->data);\n}\n/**\n*Function:\tpreorder visit a tree\n*Input:\t\tBitree\n*return\n*/\nvoid Preorder(BiTree T) {\n\tif (T) {\n\t\tVisit(T);\n\t\tPreorder(T->lchild);\n\t\tPreorder(T->rchild);\n\t}\n\treturn;\n}\n/**\n*Function:\tpop\n*Input:\t\tBiTNode*[]\n*return\t\tBiTNode*--The top element of stack.\n*/\nBiTNode* pop(BiTNode* Stack[]) {\n\tBiTNode* a = Stack[top--];\n\treturn a;\n}\n/**\n*Function:\tpush\n*Input:\t\tBiTNode*[], BiTNode*\n*return\n*/\nvoid push(BiTNode* Stack[], BiTNode* a) {\n\tStack[++top] = a;\n}\n/**\n*Function:\tpreorder visit a tree by using a stack\n*Input:\t\tBitree\n*return\n*/\nvoid PreorderStack(BiTree T) {\n\tBiTNode* Stack[MAXSIZE];//Initialize the stack\n\twhile (T) {\n\t\tVisit(T);\n\t\tif (T->lchild) {//If T has left child\n\t\t\tif (T->rchild) {\t//If T has left and right child\n\t\t\t\tpush(Stack,T->rchild);\n\t\t\t}\n\t\t\tT = T->lchild;\n\t\t}\n\t\telse if(T->rchild){//If T only has right child\n\t\t\tT = T->rchild;\n\t\t}\n\t\telse if(top>=0){//If Stack has elements\n\t\t\tBiTNode *a = pop(Stack);\n\t\t\tT = a;\n\t\t}\n\t\telse {//If T is last node in preorder.\n\t\t\tbreak;\n\t\t}\n\t}\n\n\n\treturn;\n}\nint main() {\n\tBiTree tree;\n\tCreateTree(&tree);\n\t//recursive\n\tprintf(\"Recursive PreOrder\\n\");\n\tPreorder(tree);\n\n\t//not recursive\n\tprintf(\"Non-recursive PreOrder\\n\");\n\tPreorderStack(tree);\n\tgetchar();\n\treturn 0;\n}\n```\n\n\n## 五、中序遍历\n二叉树中序遍历的实现思想是：\n1.访问当前节点的左子树；\n2.访问根节点；\n3.访问当前节点的右子树；\n\n如图所示二叉树：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png)\n### 递归方法\n二叉树的中序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归方法）：\n\n```c\n/**\n*Function:\tInOrder visit a tree\n*Input:\t\tBitree\n*return\n*/\nvoid InOrder(BiTree T) {\n\tif (T) {\n\t\tInOrder(T->lchild);\n\t\tVisit(T);\n\t\tInOrder(T->rchild);\n\t}\n\treturn;\n}\n```\n### 非递归方法\n我的思路如下：\n访问根节点，判断其是否有左右孩子。\n如果有左孩子，则根节点入栈，继续访问左子树。如果左子树为空，则访问出栈元素，然后访问其右子树。\n如果没有左孩子，则判断是否有右孩子，并访问当前节点。\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n#define MAXSIZE 100\n\nstatic int top = -1;\n//Struct of binary tree node\ntypedef struct BiTNode {\n\tELEMTYPE data;\n\tstruct BiTNode *lchild, *rchild;//child node pointer\n}BiTNode, *BiTree;\n\n/**\n*Function:\tcreate a tree\n*Input:\t\tBitree\n*return\n*/\nvoid CreateTree(BiTree *T) {\n\tprintf(\"Tree Graph:\\n\");\n\tprintf(\"1:       1\t\t\\n\");\n\tprintf(\"        /\\\\\t\t\\n\");\n\tprintf(\"2:     2  3\t\t\\n\");\n\tprintf(\"      /\\\\  /\\\\ \t\\n\");\n\tprintf(\"3:   4 5  6 7\t\\n\");\n\n\t//Depth: 1\n\t*T = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->data = 1;\n\n\t//Depth: 2\n\t(*T)->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->data = 2;\n\n\t(*T)->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->data = 3;\n\n\t//Depth: 3\n\t(*T)->lchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->lchild->data = 4;\n\n\t(*T)->lchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->rchild->data = 5;\n\n\t(*T)->rchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->lchild->data = 6;\n\n\t(*T)->rchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->rchild->data = 7;\n\n\t//Depth: 4\n\t(*T)->lchild->lchild->lchild = NULL;\n\t(*T)->lchild->lchild->rchild = NULL;\n\n\t(*T)->lchild->rchild->lchild = NULL;\n\t(*T)->lchild->rchild->rchild = NULL;\n\n\t(*T)->rchild->lchild->lchild = NULL;\n\t(*T)->rchild->lchild->rchild = NULL;\n\n\t(*T)->rchild->rchild->lchild = NULL;\n\t(*T)->rchild->rchild->rchild = NULL;\n\n}\n/**\n*Function:\tvisit a node\n*Input:\t\tBiTNode\n*return\n*/\nvoid Visit(BiTNode *T) {\n\tprintf(\"InOrder:%d\\n\", T->data);\n}\n/**\n*Function:\tInOrder visit a tree\n*Input:\t\tBitree\n*return\n*/\nvoid InOrder(BiTree T) {\n\tif (T) {\n\t\tInOrder(T->lchild);\n\t\tVisit(T);\n\t\tInOrder(T->rchild);\n\t}\n\treturn;\n}\n/**\n*Function:\tpop\n*Input:\t\tBiTNode*[]\n*return\t\tBiTNode*--The top element of stack.\n*/\nBiTNode* pop(BiTNode* Stack[]) {\n\tBiTNode* a = Stack[top--];\n\treturn a;\n}\n/**\n*Function:\tpush\n*Input:\t\tBiTNode*[], BiTNode*\n*return\n*/\nvoid push(BiTNode* Stack[], BiTNode* a) {\n\tStack[++top] = a;\n}\n/**\n*Function:\tInOrder visit a tree by using a stack\n*Input:\t\tBitree\n*return\n*/\nvoid InOrderStack(BiTree T) {\n\tBiTNode* Stack[MAXSIZE];//Initialize the stack\n\twhile (T) {\n\t\tif (T->lchild) {//If T has left child\n\t\t\tpush(Stack, T);\n\t\t\tT = T->lchild;\n\t\t}\n\t\telse {\n\t\t\tVisit(T);\n\t\t\tif (T->rchild) {//If T has right child\n\t\t\t\tT = T->rchild;\n\t\t\t}\n\t\t\telse if (top >= 0) {//If Stack has elements\n\t\t\t\tBiTNode *a = pop(Stack);\n\t\t\t\tVisit(a);\n\t\t\t\tT = a->rchild;\n\t\t\t}\n\t\t\telse {//If T is last node in preorder.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\n\treturn;\n}\nint main() {\n\tBiTree tree;\n\tCreateTree(&tree);\n\tprintf(\"Recursive InOrder\\n\");\n\t//recursive\n\tInOrder(tree);\n\n\tprintf(\"Non-recursive InOrder\\n\");\n\t//not recursive\n\tInOrderStack(tree);\n\tgetchar();\n\treturn 0;\n}\n```\n\n两种更标准的方法如下：\n中序遍历的非递归方式实现思想是：从根结点开始，遍历左孩子同时压栈，当遍历结束，说明当前遍历的结点没有左孩子，从栈中取出来调用操作函数，然后访问该结点的右孩子，继续以上重复性的操作。\n\n除此之外，还有另一种实现思想：中序遍历过程中，只需将每个结点的左子树压栈即可，右子树不需要压栈。当结点的左子树遍历完成后，只需要以栈顶结点的右孩子为根结点，继续循环遍历即可。\n\n\n## 六、后序遍历\n\n二叉树中序遍历的实现思想是：\n1.访问当前节点的左子树；\n2.访问当前节点的右子树；\n3.访问根节点；\n\n如图所示二叉树：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png)\n### 递归方法\n二叉树的后序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归方法）：\n\n```c\n/**\n*Function:\tRecursive method to traverse a tree in post-order\n*Input:\t\tBitree\n*return\n*/\nvoid PostOrder(const BiTree T) {\n\tif (T) {\n\t\tPostOrder(T->lchild);\n\t\tPostOrder(T->rchild);\n\t\tVisit(T);\n\t}\n\treturn;\n}\n```\n### 非递归方法\n非递归算法的思路是：\n后序遍历的逆序 是 先序遍历交换左右子树遍历顺序。\n因此用两个栈来实现。\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n#define MAXSIZE 100\n\nstatic int top = -1;   //index of stack\nstatic int printtop = -1; //index of printstack\n//Struct of binary tree node\ntypedef struct BiTNode {\n\tELEMTYPE data;\n\tstruct BiTNode *lchild, *rchild;//child node pointer\n}BiTNode, *BiTree;\n\n/**\n*Function:\tcreate a tree\n*Input:\t\tBitree\n*return\n*/\nvoid CreateTree(BiTree *T) {\n\tprintf(\"Tree Graph:\\n\");\n\tprintf(\"1:       1\t\t\\n\");\n\tprintf(\"        /\\\\\t\t\\n\");\n\tprintf(\"2:     2  3\t\t\\n\");\n\tprintf(\"      /\\\\  /\\\\ \t\\n\");\n\tprintf(\"3:   4 5  6 7\t\\n\");\n\n\t//Depth: 1\n\t*T = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->data = 1;\n\n\t//Depth: 2\n\t(*T)->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->data = 2;\n\n\t(*T)->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->data = 3;\n\n\t//Depth: 3\n\t(*T)->lchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->lchild->data = 4;\n\n\t(*T)->lchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->rchild->data = 5;\n\n\t(*T)->rchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->lchild->data = 6;\n\n\t(*T)->rchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->rchild->data = 7;\n\n\t//Depth: 4\n\t(*T)->lchild->lchild->lchild = NULL;\n\t(*T)->lchild->lchild->rchild = NULL;\n\n\t(*T)->lchild->rchild->lchild = NULL;\n\t(*T)->lchild->rchild->rchild = NULL;\n\n\t(*T)->rchild->lchild->lchild = NULL;\n\t(*T)->rchild->lchild->rchild = NULL;\n\n\t(*T)->rchild->rchild->lchild = NULL;\n\t(*T)->rchild->rchild->rchild = NULL;\n\n}\n/**\n*Function:\tvisit a node\n*Input:\t\tBiTNode\n*return\n*/\nvoid Visit(BiTNode *T) {\n\tprintf(\"PostOrder:%d\\n\", T->data);\n}\n/**\n*Function:\tRecursive method to traverse a tree in post-order\n*Input:\t\tBitree\n*return\n*/\nvoid PostOrder(const BiTree T) {\n\tif (T) {\n\t\tPostOrder(T->lchild);\n\t\tPostOrder(T->rchild);\n\t\tVisit(T);\n\t}\n\treturn;\n}\n/**\n*Function:\tpop\n*Input:\t\tBiTNode*[]\n*return\t\tBiTNode*--The top element of stack.\n*/\nBiTNode* pop(BiTNode* Stack[]) {\n\tBiTNode* a = Stack[top--];\n\treturn a;\n}\n/**\n*Function:\tpush\n*Input:\t\tBiTNode*[], BiTNode*\n*return\n*/\nvoid push(BiTNode* Stack[], BiTNode* a) {\n\tStack[++top] = a;\n}\n/**\n*Function:\tprintpop for printstack\n*Input:\t\tBiTNode*[]\n*return\t\tBiTNode*--The top element of stack.\n*/\nBiTNode* printpop(BiTNode* Stack[]) {\n\tBiTNode* a = Stack[printtop--];\n\treturn a;\n}\n/**\n*Function:\tprintpush for printstack\n*Input:\t\tBiTNode*[], BiTNode*\n*return\n*/\nvoid printpush(BiTNode* Stack[], BiTNode* a) {\n\tStack[++printtop] = a;\n}\n/**\n*Function:\tPostOrder visit a tree by using two stacks\n*Input:\t\tBitree\n*return\n*/\nvoid PostOrderStack(BiTree T) {\n\tBiTNode* Stack[MAXSIZE];//Initialize the stack\n\tBiTNode* PrintStack[MAXSIZE];//Initialize the stack\n\twhile (T) {\n\t\tprintpush(PrintStack, T);\n\t\tif (T->rchild) {//If T has left child\n\t\t\tif (T->lchild) {\t//If T has left and right child\n\t\t\t\tpush(Stack, T->lchild);\n\t\t\t}\n\t\t\tT = T->rchild;\n\t\t}\n\t\telse if (T->lchild) {//If T only has right child\n\t\t\tT = T->lchild;\n\t\t}\n\t\telse if (top >= 0) {//If Stack has elements\n\t\t\tBiTNode *a = pop(Stack);\n\t\t\tT = a;\n\t\t}\n\t\telse {//If T is last node in preorder.\n\t\t\tbreak;\n\t\t}\n\t}\n\n\twhile (printtop >= 0) {\n\t\tVisit(printpop(PrintStack));\n\t}\n\n\treturn;\n}\n\nint main() {\n\tBiTree tree;\n\tCreateTree(&tree);\n\tprintf(\"Recursive method\\n\");\n\t//Recursive method to traverse a tree in post-order\n\tPostOrder(tree);\n\n\tprintf(\"Non-recursive method\\n\");\n\t//Non-recursive method to traverse a tree in post-order\n\tPostOrderStack(tree);\n\tgetchar();\n\tdelete tree;\n\treturn 0;\n}\n```\n另一种算法思路：\n用一个栈，但是设置标志位。\n后序遍历是在遍历完当前结点的左右孩子之后，才调用操作函数，所以需要在操作结点进栈时，为每个结点配备一个标志位。当遍历该结点的左孩子时，设置当前结点的标志位为 0，进栈；当要遍历该结点的右孩子时，设置当前结点的标志位为 1，进栈。\n\n这样，当遍历完成，该结点弹栈时，查看该结点的标志位的值：如果是 0，表示该结点的右孩子还没有遍历；反之如果是 1，说明该结点的左右孩子都遍历完成，可以调用操作函数。\n[代码实现](http://c.biancheng.net/view/3390.html)\n## 七、层次遍历\n按照二叉树中的层次从左到右依次遍历每层中的结点。\n具体的实现思路是：通过使用队列的数据结构，从树的根结点开始，依次将其左孩子和右孩子入队。而后每次队列中一个结点出队，都将其左孩子和右孩子入队，直到树中所有结点都出队，出队结点的先后顺序就是层次遍历的最终结果。\n\n如图1所示二叉树：\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png)\n例如，层次遍历图 1 中的二叉树：\n首先，根结点 1 入队；\n根结点 1 出队，出队的同时，将左孩子 2 和右孩子 3 分别入队；\n队头结点 2 出队，出队的同时，将结点 2 的左孩子 4 和右孩子 5 依次入队；\n队头结点 3 出队，出队的同时，将结点 3 的左孩子 6 和右孩子 7 依次入队；\n不断地循环，直至队列内为空。\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n#define MAXSIZE 100\n\nstatic int front = 0, rear = 0;\n//Struct of binary tree node\ntypedef struct BiTNode {\n\tELEMTYPE data;\n\tstruct BiTNode *lchild, *rchild;//child node pointer\n}BiTNode, *BiTree;\n\n/**\n*Function:\tcreate a tree\n*Input:\t\tBitree\n*return\n*/\nvoid CreateTree(BiTree *T) {\n\tprintf(\"Tree Graph:\\n\");\n\tprintf(\"1:       1\t\t\\n\");\n\tprintf(\"        /\\\\\t\t\\n\");\n\tprintf(\"2:     2  3\t\t\\n\");\n\tprintf(\"      /\\\\  /\\\\ \t\\n\");\n\tprintf(\"3:   4 5  6 7\t\\n\");\n\n\t//Depth: 1\n\t*T = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->data = 1;\n\n\t//Depth: 2\n\t(*T)->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->data = 2;\n\n\t(*T)->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->data = 3;\n\n\t//Depth: 3\n\t(*T)->lchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->lchild->data = 4;\n\n\t(*T)->lchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->lchild->rchild->data = 5;\n\n\t(*T)->rchild->lchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->lchild->data = 6;\n\n\t(*T)->rchild->rchild = (BiTNode*)malloc(sizeof(BiTNode));\n\t(*T)->rchild->rchild->data = 7;\n\n\t//Depth: 4\n\t(*T)->lchild->lchild->lchild = NULL;\n\t(*T)->lchild->lchild->rchild = NULL;\n\n\t(*T)->lchild->rchild->lchild = NULL;\n\t(*T)->lchild->rchild->rchild = NULL;\n\n\t(*T)->rchild->lchild->lchild = NULL;\n\t(*T)->rchild->lchild->rchild = NULL;\n\n\t(*T)->rchild->rchild->lchild = NULL;\n\t(*T)->rchild->rchild->rchild = NULL;\n\n}\n/**\n*Function:\tvisit a node\n*Input:\t\tBiTNode\n*return\n*/\nvoid Visit(BiTNode *T) {\n\tprintf(\"Hierarchical traversal:%d\\n\", T->data);\n}\n\nvoid EnQueue(BiTNode * queue[],BiTNode * a) {\n\tqueue[rear++] = a;\n}\nBiTNode * DeQueue(BiTNode * queue[]) {\n\tBiTNode *b = queue[front++];\n\treturn b;\n}\n/**\n*Function:\tHierarchical traversal\n*Input:\t\tBitree\n*return\n*/\nvoid Hierarchical(const BiTree T) {\n\tBiTNode* Queue[MAXSIZE];\n\tBiTree q = T;\n\tEnQueue(Queue,q);\n\twhile (front<rear) {\n\t\tBiTNode* node = DeQueue(Queue);\n\t\tVisit(node);\n\t\tif (node->lchild!=NULL) {\n\t\t\tEnQueue(Queue, node->lchild);\n\t\t}\n\t\tif (node->rchild != NULL) {\n\t\t\tEnQueue(Queue, node->rchild);\n\t\t}\n\t}\n\treturn;\n}\n\nint main() {\n\tBiTree tree;\n\tCreateTree(&tree);\n\t//Hierarchical traversal\n\tHierarchical(tree);\n\tgetchar();\n\tdelete tree;\n\treturn 0;\n}\n```\n\n## 八、哈夫曼树\n### 基本概念\n路径：在一棵树中，一个结点到另一个结点之间的通路，称为路径。图 1 中，从根结点到结点 a 之间的通路就是一条路径。\n\n路径长度：在一条路径中，每经过一个结点，路径长度都要加 1 。例如在一棵树中，规定根结点所在层数为1层，那么从根结点到第 i 层结点的路径长度为 i - 1 。图 1 中从根结点到结点 c 的路径长度为 3。\n\n结点的权：给每一个结点赋予一个新的数值，被称为这个结点的权。例如，图 1 中结点 a 的权为 7，结点 b 的权为 5。\n\n结点的带权路径长度：指的是从根结点到该结点之间的路径长度与该结点的权的乘积。例如，图 1 中结点 b 的带权路径长度为 2 * 5 = 10 \n\n![在这里插入图片描述](https://img-blog.csdn.net/20131205224108125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd3RmbW9ua2luZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n哈夫曼树：又称最优二叉树。它是 n 个带权叶子结点构成的所有二叉树中，带权路径长度 WPL 最小的二叉树。\n如下图：\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk1NjNUYjAtMC5wbmc?x-oss-process=image/format,png)\n### 构建过程\n对于给定的有各自权值的 n 个结点，构建哈夫曼树有一个行之有效的办法：\n在 n 个权值中选出两个最小的权值，对应的两个结点组成一个新的二叉树，且新二叉树的根结点的权值为左右孩子权值的和；\n在原有的 n 个权值中删除那两个最小的权值，同时将新的权值加入到 n–2 个权值的行列中，以此类推；\n重复 1 和 2 ，直到所以的结点构建成了一棵二叉树为止，这棵树就是哈夫曼树。\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk1NjNRUzUtMS5wbmc?x-oss-process=image/format,png)\n### 哈弗曼树中结点结构\n构建哈夫曼树时，首先需要确定树中结点的构成。由于哈夫曼树的构建是从叶子结点开始，不断地构建新的父结点，直至树根，所以结点中应包含指向父结点的指针。但是在使用哈夫曼树时是从树根开始，根据需求遍历树中的结点，因此每个结点需要有指向其左孩子和右孩子的指针。\n\n所以，哈夫曼树中结点构成用代码表示为：\n\n```c\n//Struct of huffman tree\ntypedef struct BTNode {\n\tELEMTYPE data;\n\tstruct BTNode *left, *right;//child node pointer\n\tstruct BTNode *parent;//child node pointer\n}BTNode, *HFTree;\n```\n### 构建哈弗曼树的算法实现及WPL的计算\n构建哈夫曼树时，需要每次根据各个结点的权重值，筛选出其中值最小的两个结点，然后构建二叉树。\n\n大佬的思路：查找权重值最小的两个结点的思想是：从树组起始位置开始，首先找到两个无父结点的结点（说明还未使用其构建成树），然后和后续无父结点的结点依次做比较，有两种情况需要考虑：\n如果比两个结点中较小的那个还小，就保留这个结点，删除原来较大的结点；\n如果介于两个结点权重值之间，替换原来较大的结点；\n参考：[哈夫曼树c语言实现](https://blog.csdn.net/wtfmonking/article/details/17150499)\n我的思路：\n建立一个哈夫曼树：\n创建工作指针p+tmp，\n对于一组数，依次找出最小的数加入树中(选择排序思想)，\n如果树没有创建，则创建一个结点存入第一个数。工作指针指向这个结点\n如果工作指针没有左孩子，则工作指针左孩子指向下一个结点\n如果工作指针没有右孩子，则工作指针右孩子指向下一个结点\n如果工作指针有两个孩子，则创建一个空结点，左孩子指向工作指针，右孩子指向下一个结点，并将工作指针指向该结点。\n计算wpl:\n递归计算，\n如果结点没有左右孩子则为叶子结点，返回权值*高度.\n如果有孩子，则返回左子树wpl和右子树wpl之和.\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#define ELEMTYPE int\n#define MAXSIZE 100\n\nstatic int top = -1;\n//Struct of huffman tree\ntypedef struct BTNode {\n\tELEMTYPE data;\n\tstruct BTNode *left, *right;//child node pointer\n\tstruct BTNode *parent;//child node pointer\n}BTNode, *HFTree;\n\n/**\n*Function:\tcreate a huffman tree\n*Input:\t\tint *nums--numbers to create tree,int n--num[] size\n*return\n*/\nHFTree CreateTree(int *nums,int n) {\n\tBTNode *p_tmp =(BTNode*)malloc(sizeof(BTNode)); //work pointer\n\tp_tmp->left = NULL;\n\tp_tmp->right = NULL;\n\tp_tmp->parent = NULL;\n\n\tint lastnum = 0;//Initilize with a num less than the min num\n\tfor (int i = 0; i < n; i++) {\n\t\tint min = 100;//Initilize with a num larger than the max num\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (min>nums[j] && lastnum<nums[j]) {\n\t\t\t\tmin = nums[j];\n\t\t\t}\n\t\t}\n\t\tlastnum = min;\n\t\t//create a new node\n\t\tBTNode *p_newchild= (BTNode*)malloc(sizeof(BTNode));\n\t\tp_newchild->data = min;\n\t\tp_newchild->left = NULL;\n\t\tp_newchild->right = NULL;\n\t\tp_newchild->parent = NULL;\n\n\t\tif (1 == n) {\n\t\t\treturn p_newchild;\n\t\t}\n\t\tif (p_tmp->left==NULL) { //add node to left of p_tmp\n\t\t\tp_tmp->left = p_newchild;\n\t\t\tp_newchild->parent = p_tmp;\n\t\t}\n\t\telse if(p_tmp->right == NULL){//add node to right of p_tmp\n\t\t\tp_tmp->right = p_newchild;\n\t\t\tp_tmp->data = p_tmp->left->data + p_tmp->right->data;\n\t\t\tp_newchild->parent =p_tmp;\n\t\t}\n\t\telse {//add brother node of p_tmp and create p_newparent\n\t\t\tBTNode *p_newparent = (BTNode*)malloc(sizeof(BTNode));\n\t\t\tp_newparent->data = p_tmp->data+min;\n\t\t\tif (p_tmp->data<=min) {\n\t\t\t\tp_newparent->left = p_tmp;\n\t\t\t\tp_newparent->right = p_newchild;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp_newparent->left = p_newchild;\n\t\t\t\tp_newparent->right = p_tmp;\n\t\t\t}\n\t\t\tp_newparent->parent = NULL;\n\t\t\tp_newchild->parent = p_newparent;\n\t\t\tp_tmp = p_newparent;\n\t\t}\n\t}\n\treturn p_tmp;\n}\n/**\n*Function:\tvisit a node\n*Input:\t\tBiTNode\n*return\n*/\nvoid Visit(BTNode *T) {\n\tprintf(\"PreOrder:%d\\n\", T->data);\n}\n/**\n*Function:\tPreOrder visit a tree\n*Input:\t\tBitree\n*return\n*/\nvoid PreOrder(HFTree T) {\n\tif (T) {\n\t\tVisit(T);\n\t\tPreOrder(T->left);\n\t\tPreOrder(T->right);\n\t}\n\treturn;\n}\n/**\n*Function:\tcalculate the weight path length of HFTree\n*Input:\t\tHFTree T, int len--depth\n*return\t\twpl\n*/\nint cal_wpl(HFTree T, int len) {\n\tif (T) {\n\t\t//If leaf node\n\t\tif (T->left==NULL && T->right==NULL) {\n\t\t\treturn T->data*len;\n\t\t}\n\t\telse {\n\t\t\t//If not leaf node, return left child tree wpl and right child tree wpl\n\t\t\treturn cal_wpl(T->left,len+1) + cal_wpl(T->left,len+1);\n\t\t}\n\t}\n\t//Null tree return 0;\n\treturn 0;\n}\nint main() {\n\t\n\tint nums[5] = {9,5,1,2,18};\n\tHFTree tree=CreateTree(nums,5);\n\n\t//recursive visit tree node\n\tPreOrder(tree);\n\tprintf(\"%d\",cal_wpl(tree,0));\n\tgetchar();\n\treturn 0;\n}\n```\n","slug":"004-tree-datatype","published":1,"updated":"2025-07-13T06:57:17.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qi000bu4voa8ny6k9e","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p><a href=\"http://c.biancheng.net/view/3390.html\">《c语言学习网》数据结构总结——树</a><br>本文旨在根据教程巩固树的数据结构知识和c语言指针的应用，记录一下自己学习过程中的代码，知识讲解参考教程。</p>\n<h2 id=\"一、树的基本概念和术语\"><a href=\"#一、树的基本概念和术语\" class=\"headerlink\" title=\"一、树的基本概念和术语\"></a>一、树的基本概念和术语</h2><p>树结构是一种非线性存储结构，存储的是具有“一对多”关系的数据元素的集合。如图 是使用树结构存储的集合 {A,B,C,D,E,F,G,H,I,J,K,L,M} 的示意图。对于数据 A 来说，和数据 B、C、D 有关系；对于数据 B 来说，和 E、F 有关系。这就是“一对多”的关系。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NDMwMTQ5My0wLnBuZw?x-oss-process=image/format,png\" alt=\"图 1（A）树的示例\"><br><span id=\"more\"></span></p>\n<h3 id=\"1-树的节点\"><a href=\"#1-树的节点\" class=\"headerlink\" title=\"1.树的节点\"></a>1.树的节点</h3><p>结点：使用树结构存储的每一个数据元素都被称为“结点”。例如，图 1（A）中，数据元素 A 就是一个结点；</p>\n<p>父结点（双亲结点）、子结点和兄弟结点：对于图 1（A）中的结点 A、B、C、D 来说，A 是 B、C、D 结点的父结点（也称为“双亲结点”），而 B、C、D 都是 A 结点的子结点（也称“孩子结点”）。对于 B、C、D 来说，它们都有相同的父结点，所以它们互为兄弟结点。</p>\n<p>树根结点（简称“根结点”）：每一个非空树都有且只有一个被称为根的结点。图 1（A）中，结点 A 就是整棵树的根结点。</p>\n<blockquote>\n<p>树根的判断依据为：如果一个结点没有父结点，那么这个结点就是整棵树的根结点。</p>\n</blockquote>\n<p>叶子结点：如果结点没有任何子结点，那么此结点称为叶子结点（叶结点）。例如图 1（A）中，结点 K、L、F、G、M、I、J 都是这棵树的叶子结点。</p>\n<h3 id=\"2-子树和空树\"><a href=\"#2-子树和空树\" class=\"headerlink\" title=\"2.子树和空树\"></a>2.子树和空树</h3><p>子树：如图 1（A）中，整棵树的根结点为结点 A，而如果单看结点 B、E、F、K、L 组成的部分来说，也是棵树，而且节点 B 为这棵树的根结点。所以称 B、E、F、K、L 这几个结点组成的树为整棵树的子树；同样，结点 E、K、L 构成的也是一棵子树，根结点为 E。</p>\n<blockquote>\n<p>注意：单个结点也是一棵树，只不过根结点就是它本身。图 1（A）中，结点 K、L、F 等都是树，且都是整棵树的子树。</p>\n</blockquote>\n<p>知道了子树的概念后，树也可以这样定义：树是由根结点和若干棵子树构成的。</p>\n<p>空树：如果集合本身为空，那么构成的树就被称为空树。空树中没有结点。</p>\n<blockquote>\n<p>补充：在树结构中，对于具有同一个根结点的各个子树，相互之间不能有交集。例如，图 1（A）中，除了根结点<br>A，其余元素又各自构成了三个子树，根结点分别为 B、C、D，这三个子树相互之间没有相同的结点。如果有，就破坏了树的结构，不能算做是一棵树。</p>\n</blockquote>\n<h3 id=\"3-结点的度和层次\"><a href=\"#3-结点的度和层次\" class=\"headerlink\" title=\"3.结点的度和层次\"></a>3.结点的度和层次</h3><p>对于一个结点，拥有的子树数（结点有多少分支）称为结点的度（Degree）。例如，图 1（A）中，根结点 A 下分出了 3 个子树，所以，结点 A 的度为 3。</p>\n<blockquote>\n<p>一棵树的度是树内各结点的度的最大值。图 1（A）表示的树中，各个结点的度的最大值为 3，所以，整棵树的度的值是 3。</p>\n</blockquote>\n<p>结点的层次：从一棵树的树根开始，树根所在层为第一层，根的孩子结点所在的层为第二层，依次类推。对于图 1（A）来说，A 结点在第一层，B、C、D 为第二层，E、F、G、H、I、J 在第三层，K、L、M 在第四层。</p>\n<blockquote>\n<p>一棵树的深度（高度）是树中结点所在的最大的层次。图 1（A）树的深度为 4。</p>\n</blockquote>\n<p>如果两个结点的父结点虽不相同，但是它们的父结点处在同一层次上，那么这两个结点互为堂兄弟。例如，图 1（A）中，结点 G 和 E、F、H、I、J 的父结点都在第二层，所以之间为堂兄弟的关系。</p>\n<h3 id=\"4-有序树和无序树\"><a href=\"#4-有序树和无序树\" class=\"headerlink\" title=\"4.有序树和无序树\"></a>4.有序树和无序树</h3><p>如果树中结点的子树从左到右看，谁在左边，谁在右边，是有规定的，这棵树称为有序树；反之称为无序树。</p>\n<blockquote>\n<p>在有序树中，一个结点最左边的子树称为”第一个孩子”，最右边的称为”最后一个孩子”。</p>\n</blockquote>\n<p>拿图 1（A）来说，如果是其本身是一棵有序树，则以结点 B 为根结点的子树为整棵树的第一个孩子，以结点 D 为根结点的子树为整棵树的最后一个孩子。</p>\n<h3 id=\"5-森林\"><a href=\"#5-森林\" class=\"headerlink\" title=\"5.森林\"></a>5.森林</h3><p>由 m（m &gt;= 0）个互不相交的树组成的集合被称为森林。图 1（A）中，分别以 B、C、D 为根结点的三棵子树就可以称为森林。</p>\n<p>前面讲到，树可以理解为是由根结点和若干子树构成的，而这若干子树本身是一个森林，所以，树还可以理解为是由根结点和森林组成的。用一个式子表示为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Tree =（root,F）</span><br></pre></td></tr></table></figure>\n<p>其中，root 表示树的根结点，F 表示由 m（m &gt;= 0）棵树组成的森林。</p>\n<h2 id=\"二、二叉树及其性质\"><a href=\"#二、二叉树及其性质\" class=\"headerlink\" title=\"二、二叉树及其性质\"></a>二、二叉树及其性质</h2><p>简单地理解，满足以下两个条件的树就是二叉树：<br>1.本身是有序树；<br>2.树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2；<br>例如，图 1 a) 就是一棵二叉树，而图 1 b) 则不是。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJMUjEtMC5naWY\" alt=\"图 2 a)  二叉树\"></p>\n<h3 id=\"1-二叉树的性质\"><a href=\"#1-二叉树的性质\" class=\"headerlink\" title=\"1.二叉树的性质\"></a>1.二叉树的性质</h3><p>二叉树具有以下几个性质：<br>1.二叉树中，第 i 层最多有 2^i-1^ 个结点。<br>2.如果二叉树的深度为 K，那么此二叉树最多有 2^K^-1 个结点。<br>3.二叉树中，终端结点数（叶子结点数）为 n~0~，度为 2 的结点数为 n~2~，则 n~0~=n~2~+1。</p>\n<blockquote>\n<p>性质 3 的计算方法为：对于一个二叉树来说，除了度为 0 的叶子结点和度为 2 的结点，剩下的就是度为 1 的结点（设为 n1），那么总结点<br>n=n~0~+n~1~+n~2~。 同时，对于每一个结点来说都是由其父结点分支表示的，假设树中分枝数为 B，那么总结点数 n=B+1。而分枝数是可以通过<br>n~1~ 和 n~2~ 表示的，即 B=n~1~+2<em>n~2~。所以，n 用另外一种方式表示为 n=n~1~+2</em>n~2~+1。 两种方式得到的 n<br>值组成一个方程组，就可以得出 n~0~=n~2~+1。</p>\n</blockquote>\n<p>二叉树还可以继续分类，衍生出满二叉树和完全二叉树。</p>\n<h3 id=\"2-满二叉树\"><a href=\"#2-满二叉树\" class=\"headerlink\" title=\"2.满二叉树\"></a>2.满二叉树</h3><p>如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为满二叉树。</p>\n<p>满二叉树示意图</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJIRzgtMS5naWY\" alt=\"在这里插入图片描述\"><br>图 2 满二叉树示意图</p>\n<p>如图 2 所示就是一棵满二叉树。</p>\n<p>满二叉树除了满足普通二叉树的性质，还具有以下性质：<br>满二叉树中第 i 层的节点数为 2^n-1^ 个。<br>深度为 k 的满二叉树必有 2^k-1^ 个节点 ，叶子数为 2^k-1^。<br>满二叉树中不存在度为 1 的节点，每一个分支点中都两棵深度相同的子树，且叶子节点都在最底层。<br>具有 n 个节点的满二叉树的深度为 log~2~(n+1)。</p>\n<h3 id=\"3-完全二叉树\"><a href=\"#3-完全二叉树\" class=\"headerlink\" title=\"3.完全二叉树\"></a>3.完全二叉树</h3><p>如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。</p>\n<p>完全二叉树示意图</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJNYjUtMi5naWY\" alt=\"在这里插入图片描述\"><br>图 3 完全二叉树示意图</p>\n<p>如图 3a) 所示是一棵完全二叉树，图 3b) 由于最后一层的节点没有按照从左向右分布，因此只能算作是普通的二叉树。</p>\n<p>完全二叉树除了具有普通二叉树的性质，它自身也具有一些独特的性质，比如说，n 个结点的完全二叉树的深度为 ⌊log~2~n⌋+1。</p>\n<blockquote>\n<p>⌊log~2~n⌋ 表示取小于 log~2~n 的最大整数。例如，⌊log~2~4⌋ = 2，而 ⌊log~2~5⌋ 结果也是 2。</p>\n</blockquote>\n<p>对于任意一个完全二叉树来说，如果将含有的结点按照层次从左到右依次标号（如图 3a)），对于任意一个结点 i ，完全二叉树还有以下几个结论成立：<br>当 i&gt;1 时，父亲结点为结点 [i/2] 。（i=1 时，表示的是根结点，无父亲结点）<br>如果 2<em>i&gt;n（总结点的个数） ，则结点 i 肯定没有左孩子（为叶子结点）；否则其左孩子是结点 2</em>i 。<br>如果 2<em>i+1&gt;n ，则结点 i 肯定没有右孩子；否则右孩子是结点 2</em>i+1 。</p>\n<h2 id=\"三、树的存储结构\"><a href=\"#三、树的存储结构\" class=\"headerlink\" title=\"三、树的存储结构\"></a>三、树的存储结构</h2><h3 id=\"1-二叉树的顺序存储\"><a href=\"#1-二叉树的顺序存储\" class=\"headerlink\" title=\"1.二叉树的顺序存储\"></a>1.二叉树的顺序存储</h3><p>二叉树的顺序存储，指的是使用顺序表（数组）存储二叉树。<strong>注：顺序存储只适用于完全二叉树。</strong></p>\n<blockquote>\n<p> 如果我们想顺序存储普通二叉树，需要提前将普通二叉树转化为完全二叉树。如下图所示：</p>\n</blockquote>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NjI0TTAyLTAucG5n?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<p>完全二叉树的顺序存储，仅需从根节点开始，按照层次依次将树中节点存储到数组即可。<br>比如上面的图2，存储结构如下：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NjI0RjA0LTMucG5n?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"><br>普通二叉树使用顺序表存储或多或多会存在空间浪费的现象，因此引入下面的链式存储。</p>\n<h3 id=\"2-二叉树的链式存储\"><a href=\"#2-二叉树的链式存储\" class=\"headerlink\" title=\"2.二叉树的链式存储\"></a>2.二叉树的链式存储</h3><p>二叉树链式存储结构示意图：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0R0oyWi0xLmdpZg\" alt=\"在这里插入图片描述\"><br>采用链式存储二叉树时，其节点结构由 3 部分构成（如图所示）：<br>指向左孩子节点的指针（Lchild）；<br>节点存储的数据（data）；<br>指向右孩子节点的指针（Rchild）；<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0R0swMzQtMi5naWY\" alt=\"在这里插入图片描述\"><br>数据结构为：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span>&#123;</span></span><br><span class=\"line\">    TElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>,*<span class=\"title\">rchild</span>;</span><span class=\"comment\">//左右孩子指针</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">parent</span>;</span></span><br><span class=\"line\">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure><br>下面是一段完整的c语言代码<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Struct of binary tree node</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">parent</span>;</span><span class=\"comment\">//parent node pointer</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">createTree</span><span class=\"params\">(BiTree *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Tree Graph:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1:       1\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;        /\\\\\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2:     2  3\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;      /\t\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3:   4\t\t\t\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 1</span></span><br><span class=\"line\">\t*T = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 2</span></span><br><span class=\"line\">\t(*T)-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;parent = *T;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;parent = *T;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 3</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;parent = (*T)-&gt;lchild;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 4</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBiTree tree;</span><br><span class=\"line\">\tcreateTree(&amp;tree);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Root is:%d\\n&quot;</span>,tree-&gt;data);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Parent of the fourth node is:%d\\n&quot;</span>, tree-&gt;lchild-&gt;lchild-&gt;parent-&gt;data);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>三叉链表</strong>：在某些实际场景中，可能会做 “查找某节点的父节点” 的操作，这时可以在节点结构中再添加一个指针域，用于各个节点指向其父亲节点。</p>\n<h2 id=\"四、先序遍历\"><a href=\"#四、先序遍历\" class=\"headerlink\" title=\"四、先序遍历\"></a>四、先序遍历</h2><p>二叉树先序遍历的实现思想是：<br>1.访问根节点；<br>2.访问当前节点的左子树；<br>3.若当前节点无左子树，则访问当前节点的右子树；<br>如图所示二叉树：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"递归方法：\"><a href=\"#递归方法：\" class=\"headerlink\" title=\"递归方法：\"></a>递归方法：</h3><p>二叉树的先序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Preorder</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\tPreorder(T-&gt;lchild);</span><br><span class=\"line\">\t\tPreorder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归方法：\"><a href=\"#非递归方法：\" class=\"headerlink\" title=\"非递归方法：\"></a>非递归方法：</h3><p>而递归的底层实现依靠的是栈存储结构，因此，二叉树的先序遍历既可以直接采用递归思想实现，也可以使用栈的存储结构模拟递归的思想实现，思路如下：<br>1.对于每个节点判断是否有左右节点，<br>2.如果有左节点则继续访问左孩子节点，并判断其是否有右节点，如果有则入栈，没有则忽略。<br>3.如果当前节点没有左孩子节点，则继续判断栈是否有元素，如果有则回到栈节点继续访问右子树。如果没有则前序遍历完成。</p>\n<p>其 C 语言实现代码为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> top = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"comment\">//Struct of binary tree node</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreateTree</span><span class=\"params\">(BiTree *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Tree Graph:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1:       1\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;        /\\\\\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2:     2  3\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;      /\\\\  /\\\\ \t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3:   4 5  6 7\t\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 1</span></span><br><span class=\"line\">\t*T = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 2</span></span><br><span class=\"line\">\t(*T)-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 3</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 4</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tvisit a node</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Visit</span><span class=\"params\">(BiTNode *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Preorder:%d\\n&quot;</span>, T-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpreorder visit a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Preorder</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\tPreorder(T-&gt;lchild);</span><br><span class=\"line\">\t\tPreorder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpop</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[]</span></span><br><span class=\"line\"><span class=\"comment\">*return\t\tBiTNode*--The top element of stack.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BiTNode* <span class=\"title function_\">pop</span><span class=\"params\">(BiTNode* Stack[])</span> &#123;</span><br><span class=\"line\">\tBiTNode* a = Stack[top--];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpush</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[], BiTNode*</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class=\"line\">\tStack[++top] = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpreorder visit a tree by using a stack</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PreorderStack</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\tBiTNode* Stack[MAXSIZE];<span class=\"comment\">//Initialize the stack</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (T) &#123;</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (T-&gt;lchild) &#123;<span class=\"comment\">//If T has left child</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (T-&gt;rchild) &#123;\t<span class=\"comment\">//If T has left and right child</span></span><br><span class=\"line\">\t\t\t\tpush(Stack,T-&gt;rchild);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tT = T-&gt;lchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T-&gt;rchild)&#123;<span class=\"comment\">//If T only has right child</span></span><br><span class=\"line\">\t\t\tT = T-&gt;rchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(top&gt;=<span class=\"number\">0</span>)&#123;<span class=\"comment\">//If Stack has elements</span></span><br><span class=\"line\">\t\t\tBiTNode *a = pop(Stack);</span><br><span class=\"line\">\t\t\tT = a;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//If T is last node in preorder.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBiTree tree;</span><br><span class=\"line\">\tCreateTree(&amp;tree);</span><br><span class=\"line\">\t<span class=\"comment\">//recursive</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Recursive PreOrder\\n&quot;</span>);</span><br><span class=\"line\">\tPreorder(tree);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//not recursive</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Non-recursive PreOrder\\n&quot;</span>);</span><br><span class=\"line\">\tPreorderStack(tree);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、中序遍历\"><a href=\"#五、中序遍历\" class=\"headerlink\" title=\"五、中序遍历\"></a>五、中序遍历</h2><p>二叉树中序遍历的实现思想是：<br>1.访问当前节点的左子树；<br>2.访问根节点；<br>3.访问当前节点的右子树；</p>\n<p>如图所示二叉树：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"递归方法\"><a href=\"#递归方法\" class=\"headerlink\" title=\"递归方法\"></a>递归方法</h3><p>二叉树的中序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归方法）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tInOrder visit a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrder</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tInOrder(T-&gt;lchild);</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\tInOrder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归方法\"><a href=\"#非递归方法\" class=\"headerlink\" title=\"非递归方法\"></a>非递归方法</h3><p>我的思路如下：<br>访问根节点，判断其是否有左右孩子。<br>如果有左孩子，则根节点入栈，继续访问左子树。如果左子树为空，则访问出栈元素，然后访问其右子树。<br>如果没有左孩子，则判断是否有右孩子，并访问当前节点。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> top = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"comment\">//Struct of binary tree node</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreateTree</span><span class=\"params\">(BiTree *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Tree Graph:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1:       1\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;        /\\\\\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2:     2  3\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;      /\\\\  /\\\\ \t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3:   4 5  6 7\t\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 1</span></span><br><span class=\"line\">\t*T = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 2</span></span><br><span class=\"line\">\t(*T)-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 3</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 4</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tvisit a node</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Visit</span><span class=\"params\">(BiTNode *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;InOrder:%d\\n&quot;</span>, T-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tInOrder visit a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrder</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tInOrder(T-&gt;lchild);</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\tInOrder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpop</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[]</span></span><br><span class=\"line\"><span class=\"comment\">*return\t\tBiTNode*--The top element of stack.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BiTNode* <span class=\"title function_\">pop</span><span class=\"params\">(BiTNode* Stack[])</span> &#123;</span><br><span class=\"line\">\tBiTNode* a = Stack[top--];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpush</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[], BiTNode*</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class=\"line\">\tStack[++top] = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tInOrder visit a tree by using a stack</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrderStack</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\tBiTNode* Stack[MAXSIZE];<span class=\"comment\">//Initialize the stack</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (T) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (T-&gt;lchild) &#123;<span class=\"comment\">//If T has left child</span></span><br><span class=\"line\">\t\t\tpush(Stack, T);</span><br><span class=\"line\">\t\t\tT = T-&gt;lchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tVisit(T);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (T-&gt;rchild) &#123;<span class=\"comment\">//If T has right child</span></span><br><span class=\"line\">\t\t\t\tT = T-&gt;rchild;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (top &gt;= <span class=\"number\">0</span>) &#123;<span class=\"comment\">//If Stack has elements</span></span><br><span class=\"line\">\t\t\t\tBiTNode *a = pop(Stack);</span><br><span class=\"line\">\t\t\t\tVisit(a);</span><br><span class=\"line\">\t\t\t\tT = a-&gt;rchild;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//If T is last node in preorder.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBiTree tree;</span><br><span class=\"line\">\tCreateTree(&amp;tree);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Recursive InOrder\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//recursive</span></span><br><span class=\"line\">\tInOrder(tree);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Non-recursive InOrder\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//not recursive</span></span><br><span class=\"line\">\tInOrderStack(tree);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两种更标准的方法如下：<br>中序遍历的非递归方式实现思想是：从根结点开始，遍历左孩子同时压栈，当遍历结束，说明当前遍历的结点没有左孩子，从栈中取出来调用操作函数，然后访问该结点的右孩子，继续以上重复性的操作。</p>\n<p>除此之外，还有另一种实现思想：中序遍历过程中，只需将每个结点的左子树压栈即可，右子树不需要压栈。当结点的左子树遍历完成后，只需要以栈顶结点的右孩子为根结点，继续循环遍历即可。</p>\n<h2 id=\"六、后序遍历\"><a href=\"#六、后序遍历\" class=\"headerlink\" title=\"六、后序遍历\"></a>六、后序遍历</h2><p>二叉树中序遍历的实现思想是：<br>1.访问当前节点的左子树；<br>2.访问当前节点的右子树；<br>3.访问根节点；</p>\n<p>如图所示二叉树：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"递归方法-1\"><a href=\"#递归方法-1\" class=\"headerlink\" title=\"递归方法\"></a>递归方法</h3><p>二叉树的后序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归方法）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tRecursive method to traverse a tree in post-order</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostOrder</span><span class=\"params\">(<span class=\"type\">const</span> BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tPostOrder(T-&gt;lchild);</span><br><span class=\"line\">\t\tPostOrder(T-&gt;rchild);</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归方法-1\"><a href=\"#非递归方法-1\" class=\"headerlink\" title=\"非递归方法\"></a>非递归方法</h3><p>非递归算法的思路是：<br>后序遍历的逆序 是 先序遍历交换左右子树遍历顺序。<br>因此用两个栈来实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> top = <span class=\"number\">-1</span>;   <span class=\"comment\">//index of stack</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> printtop = <span class=\"number\">-1</span>; <span class=\"comment\">//index of printstack</span></span><br><span class=\"line\"><span class=\"comment\">//Struct of binary tree node</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreateTree</span><span class=\"params\">(BiTree *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Tree Graph:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1:       1\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;        /\\\\\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2:     2  3\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;      /\\\\  /\\\\ \t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3:   4 5  6 7\t\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 1</span></span><br><span class=\"line\">\t*T = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 2</span></span><br><span class=\"line\">\t(*T)-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 3</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 4</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tvisit a node</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Visit</span><span class=\"params\">(BiTNode *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;PostOrder:%d\\n&quot;</span>, T-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tRecursive method to traverse a tree in post-order</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostOrder</span><span class=\"params\">(<span class=\"type\">const</span> BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tPostOrder(T-&gt;lchild);</span><br><span class=\"line\">\t\tPostOrder(T-&gt;rchild);</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpop</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[]</span></span><br><span class=\"line\"><span class=\"comment\">*return\t\tBiTNode*--The top element of stack.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BiTNode* <span class=\"title function_\">pop</span><span class=\"params\">(BiTNode* Stack[])</span> &#123;</span><br><span class=\"line\">\tBiTNode* a = Stack[top--];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpush</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[], BiTNode*</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class=\"line\">\tStack[++top] = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tprintpop for printstack</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[]</span></span><br><span class=\"line\"><span class=\"comment\">*return\t\tBiTNode*--The top element of stack.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BiTNode* <span class=\"title function_\">printpop</span><span class=\"params\">(BiTNode* Stack[])</span> &#123;</span><br><span class=\"line\">\tBiTNode* a = Stack[printtop--];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tprintpush for printstack</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[], BiTNode*</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printpush</span><span class=\"params\">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class=\"line\">\tStack[++printtop] = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tPostOrder visit a tree by using two stacks</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostOrderStack</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\tBiTNode* Stack[MAXSIZE];<span class=\"comment\">//Initialize the stack</span></span><br><span class=\"line\">\tBiTNode* PrintStack[MAXSIZE];<span class=\"comment\">//Initialize the stack</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (T) &#123;</span><br><span class=\"line\">\t\tprintpush(PrintStack, T);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (T-&gt;rchild) &#123;<span class=\"comment\">//If T has left child</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (T-&gt;lchild) &#123;\t<span class=\"comment\">//If T has left and right child</span></span><br><span class=\"line\">\t\t\t\tpush(Stack, T-&gt;lchild);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tT = T-&gt;rchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (T-&gt;lchild) &#123;<span class=\"comment\">//If T only has right child</span></span><br><span class=\"line\">\t\t\tT = T-&gt;lchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (top &gt;= <span class=\"number\">0</span>) &#123;<span class=\"comment\">//If Stack has elements</span></span><br><span class=\"line\">\t\t\tBiTNode *a = pop(Stack);</span><br><span class=\"line\">\t\t\tT = a;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//If T is last node in preorder.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (printtop &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tVisit(printpop(PrintStack));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBiTree tree;</span><br><span class=\"line\">\tCreateTree(&amp;tree);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Recursive method\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//Recursive method to traverse a tree in post-order</span></span><br><span class=\"line\">\tPostOrder(tree);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Non-recursive method\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//Non-recursive method to traverse a tree in post-order</span></span><br><span class=\"line\">\tPostOrderStack(tree);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tdelete tree;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种算法思路：<br>用一个栈，但是设置标志位。<br>后序遍历是在遍历完当前结点的左右孩子之后，才调用操作函数，所以需要在操作结点进栈时，为每个结点配备一个标志位。当遍历该结点的左孩子时，设置当前结点的标志位为 0，进栈；当要遍历该结点的右孩子时，设置当前结点的标志位为 1，进栈。</p>\n<p>这样，当遍历完成，该结点弹栈时，查看该结点的标志位的值：如果是 0，表示该结点的右孩子还没有遍历；反之如果是 1，说明该结点的左右孩子都遍历完成，可以调用操作函数。<br><a href=\"http://c.biancheng.net/view/3390.html\">代码实现</a></p>\n<h2 id=\"七、层次遍历\"><a href=\"#七、层次遍历\" class=\"headerlink\" title=\"七、层次遍历\"></a>七、层次遍历</h2><p>按照二叉树中的层次从左到右依次遍历每层中的结点。<br>具体的实现思路是：通过使用队列的数据结构，从树的根结点开始，依次将其左孩子和右孩子入队。而后每次队列中一个结点出队，都将其左孩子和右孩子入队，直到树中所有结点都出队，出队结点的先后顺序就是层次遍历的最终结果。</p>\n<p>如图1所示二叉树：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"><br>例如，层次遍历图 1 中的二叉树：<br>首先，根结点 1 入队；<br>根结点 1 出队，出队的同时，将左孩子 2 和右孩子 3 分别入队；<br>队头结点 2 出队，出队的同时，将结点 2 的左孩子 4 和右孩子 5 依次入队；<br>队头结点 3 出队，出队的同时，将结点 3 的左孩子 6 和右孩子 7 依次入队；<br>不断地循环，直至队列内为空。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> front = <span class=\"number\">0</span>, rear = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//Struct of binary tree node</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreateTree</span><span class=\"params\">(BiTree *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Tree Graph:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1:       1\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;        /\\\\\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2:     2  3\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;      /\\\\  /\\\\ \t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3:   4 5  6 7\t\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 1</span></span><br><span class=\"line\">\t*T = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 2</span></span><br><span class=\"line\">\t(*T)-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 3</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 4</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tvisit a node</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Visit</span><span class=\"params\">(BiTNode *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hierarchical traversal:%d\\n&quot;</span>, T-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(BiTNode * <span class=\"built_in\">queue</span>[],BiTNode * a)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>[rear++] = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BiTNode * <span class=\"title function_\">DeQueue</span><span class=\"params\">(BiTNode * <span class=\"built_in\">queue</span>[])</span> &#123;</span><br><span class=\"line\">\tBiTNode *b = <span class=\"built_in\">queue</span>[front++];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tHierarchical traversal</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Hierarchical</span><span class=\"params\">(<span class=\"type\">const</span> BiTree T)</span> &#123;</span><br><span class=\"line\">\tBiTNode* Queue[MAXSIZE];</span><br><span class=\"line\">\tBiTree q = T;</span><br><span class=\"line\">\tEnQueue(Queue,q);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (front&lt;rear) &#123;</span><br><span class=\"line\">\t\tBiTNode* node = DeQueue(Queue);</span><br><span class=\"line\">\t\tVisit(node);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node-&gt;lchild!=<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\tEnQueue(Queue, node-&gt;lchild);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node-&gt;rchild != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\tEnQueue(Queue, node-&gt;rchild);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBiTree tree;</span><br><span class=\"line\">\tCreateTree(&amp;tree);</span><br><span class=\"line\">\t<span class=\"comment\">//Hierarchical traversal</span></span><br><span class=\"line\">\tHierarchical(tree);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tdelete tree;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"八、哈夫曼树\"><a href=\"#八、哈夫曼树\" class=\"headerlink\" title=\"八、哈夫曼树\"></a>八、哈夫曼树</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>路径：在一棵树中，一个结点到另一个结点之间的通路，称为路径。图 1 中，从根结点到结点 a 之间的通路就是一条路径。</p>\n<p>路径长度：在一条路径中，每经过一个结点，路径长度都要加 1 。例如在一棵树中，规定根结点所在层数为1层，那么从根结点到第 i 层结点的路径长度为 i - 1 。图 1 中从根结点到结点 c 的路径长度为 3。</p>\n<p>结点的权：给每一个结点赋予一个新的数值，被称为这个结点的权。例如，图 1 中结点 a 的权为 7，结点 b 的权为 5。</p>\n<p>结点的带权路径长度：指的是从根结点到该结点之间的路径长度与该结点的权的乘积。例如，图 1 中结点 b 的带权路径长度为 2 * 5 = 10 </p>\n<p><img src=\"https://img-blog.csdn.net/20131205224108125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd3RmbW9ua2luZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"在这里插入图片描述\"></p>\n<p>哈夫曼树：又称最优二叉树。它是 n 个带权叶子结点构成的所有二叉树中，带权路径长度 WPL 最小的二叉树。<br>如下图：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk1NjNUYjAtMC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"构建过程\"><a href=\"#构建过程\" class=\"headerlink\" title=\"构建过程\"></a>构建过程</h3><p>对于给定的有各自权值的 n 个结点，构建哈夫曼树有一个行之有效的办法：<br>在 n 个权值中选出两个最小的权值，对应的两个结点组成一个新的二叉树，且新二叉树的根结点的权值为左右孩子权值的和；<br>在原有的 n 个权值中删除那两个最小的权值，同时将新的权值加入到 n–2 个权值的行列中，以此类推；<br>重复 1 和 2 ，直到所以的结点构建成了一棵二叉树为止，这棵树就是哈夫曼树。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk1NjNRUzUtMS5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"哈弗曼树中结点结构\"><a href=\"#哈弗曼树中结点结构\" class=\"headerlink\" title=\"哈弗曼树中结点结构\"></a>哈弗曼树中结点结构</h3><p>构建哈夫曼树时，首先需要确定树中结点的构成。由于哈夫曼树的构建是从叶子结点开始，不断地构建新的父结点，直至树根，所以结点中应包含指向父结点的指针。但是在使用哈夫曼树时是从树根开始，根据需求遍历树中的结点，因此每个结点需要有指向其左孩子和右孩子的指针。</p>\n<p>所以，哈夫曼树中结点构成用代码表示为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Struct of huffman tree</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> *<span class=\"title\">left</span>, *<span class=\"title\">right</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> *<span class=\"title\">parent</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BTNode, *HFTree;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建哈弗曼树的算法实现及WPL的计算\"><a href=\"#构建哈弗曼树的算法实现及WPL的计算\" class=\"headerlink\" title=\"构建哈弗曼树的算法实现及WPL的计算\"></a>构建哈弗曼树的算法实现及WPL的计算</h3><p>构建哈夫曼树时，需要每次根据各个结点的权重值，筛选出其中值最小的两个结点，然后构建二叉树。</p>\n<p>大佬的思路：查找权重值最小的两个结点的思想是：从树组起始位置开始，首先找到两个无父结点的结点（说明还未使用其构建成树），然后和后续无父结点的结点依次做比较，有两种情况需要考虑：<br>如果比两个结点中较小的那个还小，就保留这个结点，删除原来较大的结点；<br>如果介于两个结点权重值之间，替换原来较大的结点；<br>参考：<a href=\"https://blog.csdn.net/wtfmonking/article/details/17150499\">哈夫曼树c语言实现</a><br>我的思路：<br>建立一个哈夫曼树：<br>创建工作指针p+tmp，<br>对于一组数，依次找出最小的数加入树中(选择排序思想)，<br>如果树没有创建，则创建一个结点存入第一个数。工作指针指向这个结点<br>如果工作指针没有左孩子，则工作指针左孩子指向下一个结点<br>如果工作指针没有右孩子，则工作指针右孩子指向下一个结点<br>如果工作指针有两个孩子，则创建一个空结点，左孩子指向工作指针，右孩子指向下一个结点，并将工作指针指向该结点。<br>计算wpl:<br>递归计算，<br>如果结点没有左右孩子则为叶子结点，返回权值*高度.<br>如果有孩子，则返回左子树wpl和右子树wpl之和.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> top = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"comment\">//Struct of huffman tree</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> *<span class=\"title\">left</span>, *<span class=\"title\">right</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> *<span class=\"title\">parent</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BTNode, *HFTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a huffman tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tint *nums--numbers to create tree,int n--num[] size</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">HFTree <span class=\"title function_\">CreateTree</span><span class=\"params\">(<span class=\"type\">int</span> *nums,<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\tBTNode *p_tmp =(BTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BTNode)); <span class=\"comment\">//work pointer</span></span><br><span class=\"line\">\tp_tmp-&gt;left = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tp_tmp-&gt;right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tp_tmp-&gt;parent = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> lastnum = <span class=\"number\">0</span>;<span class=\"comment\">//Initilize with a num less than the min num</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> min = <span class=\"number\">100</span>;<span class=\"comment\">//Initilize with a num larger than the max num</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (min&gt;nums[j] &amp;&amp; lastnum&lt;nums[j]) &#123;</span><br><span class=\"line\">\t\t\t\tmin = nums[j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlastnum = min;</span><br><span class=\"line\">\t\t<span class=\"comment\">//create a new node</span></span><br><span class=\"line\">\t\tBTNode *p_newchild= (BTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BTNode));</span><br><span class=\"line\">\t\tp_newchild-&gt;data = min;</span><br><span class=\"line\">\t\tp_newchild-&gt;left = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tp_newchild-&gt;right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tp_newchild-&gt;parent = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"number\">1</span> == n) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> p_newchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p_tmp-&gt;left==<span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">//add node to left of p_tmp</span></span><br><span class=\"line\">\t\t\tp_tmp-&gt;left = p_newchild;</span><br><span class=\"line\">\t\t\tp_newchild-&gt;parent = p_tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p_tmp-&gt;right == <span class=\"literal\">NULL</span>)&#123;<span class=\"comment\">//add node to right of p_tmp</span></span><br><span class=\"line\">\t\t\tp_tmp-&gt;right = p_newchild;</span><br><span class=\"line\">\t\t\tp_tmp-&gt;data = p_tmp-&gt;left-&gt;data + p_tmp-&gt;right-&gt;data;</span><br><span class=\"line\">\t\t\tp_newchild-&gt;parent =p_tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//add brother node of p_tmp and create p_newparent</span></span><br><span class=\"line\">\t\t\tBTNode *p_newparent = (BTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BTNode));</span><br><span class=\"line\">\t\t\tp_newparent-&gt;data = p_tmp-&gt;data+min;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (p_tmp-&gt;data&lt;=min) &#123;</span><br><span class=\"line\">\t\t\t\tp_newparent-&gt;left = p_tmp;</span><br><span class=\"line\">\t\t\t\tp_newparent-&gt;right = p_newchild;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tp_newparent-&gt;left = p_newchild;</span><br><span class=\"line\">\t\t\t\tp_newparent-&gt;right = p_tmp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tp_newparent-&gt;parent = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\tp_newchild-&gt;parent = p_newparent;</span><br><span class=\"line\">\t\t\tp_tmp = p_newparent;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p_tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tvisit a node</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Visit</span><span class=\"params\">(BTNode *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;PreOrder:%d\\n&quot;</span>, T-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tPreOrder visit a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PreOrder</span><span class=\"params\">(HFTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\tPreOrder(T-&gt;left);</span><br><span class=\"line\">\t\tPreOrder(T-&gt;right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcalculate the weight path length of HFTree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tHFTree T, int len--depth</span></span><br><span class=\"line\"><span class=\"comment\">*return\t\twpl</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cal_wpl</span><span class=\"params\">(HFTree T, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//If leaf node</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (T-&gt;left==<span class=\"literal\">NULL</span> &amp;&amp; T-&gt;right==<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> T-&gt;data*len;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//If not leaf node, return left child tree wpl and right child tree wpl</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> cal_wpl(T-&gt;left,len+<span class=\"number\">1</span>) + cal_wpl(T-&gt;left,len+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//Null tree return 0;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> nums[<span class=\"number\">5</span>] = &#123;<span class=\"number\">9</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\">\tHFTree tree=CreateTree(nums,<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//recursive visit tree node</span></span><br><span class=\"line\">\tPreOrder(tree);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,cal_wpl(tree,<span class=\"number\">0</span>));</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p><a href=\"http://c.biancheng.net/view/3390.html\">《c语言学习网》数据结构总结——树</a><br>本文旨在根据教程巩固树的数据结构知识和c语言指针的应用，记录一下自己学习过程中的代码，知识讲解参考教程。</p>\n<h2 id=\"一、树的基本概念和术语\"><a href=\"#一、树的基本概念和术语\" class=\"headerlink\" title=\"一、树的基本概念和术语\"></a>一、树的基本概念和术语</h2><p>树结构是一种非线性存储结构，存储的是具有“一对多”关系的数据元素的集合。如图 是使用树结构存储的集合 {A,B,C,D,E,F,G,H,I,J,K,L,M} 的示意图。对于数据 A 来说，和数据 B、C、D 有关系；对于数据 B 来说，和 E、F 有关系。这就是“一对多”的关系。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NDMwMTQ5My0wLnBuZw?x-oss-process=image/format,png\" alt=\"图 1（A）树的示例\"><br>","more":"</p>\n<h3 id=\"1-树的节点\"><a href=\"#1-树的节点\" class=\"headerlink\" title=\"1.树的节点\"></a>1.树的节点</h3><p>结点：使用树结构存储的每一个数据元素都被称为“结点”。例如，图 1（A）中，数据元素 A 就是一个结点；</p>\n<p>父结点（双亲结点）、子结点和兄弟结点：对于图 1（A）中的结点 A、B、C、D 来说，A 是 B、C、D 结点的父结点（也称为“双亲结点”），而 B、C、D 都是 A 结点的子结点（也称“孩子结点”）。对于 B、C、D 来说，它们都有相同的父结点，所以它们互为兄弟结点。</p>\n<p>树根结点（简称“根结点”）：每一个非空树都有且只有一个被称为根的结点。图 1（A）中，结点 A 就是整棵树的根结点。</p>\n<blockquote>\n<p>树根的判断依据为：如果一个结点没有父结点，那么这个结点就是整棵树的根结点。</p>\n</blockquote>\n<p>叶子结点：如果结点没有任何子结点，那么此结点称为叶子结点（叶结点）。例如图 1（A）中，结点 K、L、F、G、M、I、J 都是这棵树的叶子结点。</p>\n<h3 id=\"2-子树和空树\"><a href=\"#2-子树和空树\" class=\"headerlink\" title=\"2.子树和空树\"></a>2.子树和空树</h3><p>子树：如图 1（A）中，整棵树的根结点为结点 A，而如果单看结点 B、E、F、K、L 组成的部分来说，也是棵树，而且节点 B 为这棵树的根结点。所以称 B、E、F、K、L 这几个结点组成的树为整棵树的子树；同样，结点 E、K、L 构成的也是一棵子树，根结点为 E。</p>\n<blockquote>\n<p>注意：单个结点也是一棵树，只不过根结点就是它本身。图 1（A）中，结点 K、L、F 等都是树，且都是整棵树的子树。</p>\n</blockquote>\n<p>知道了子树的概念后，树也可以这样定义：树是由根结点和若干棵子树构成的。</p>\n<p>空树：如果集合本身为空，那么构成的树就被称为空树。空树中没有结点。</p>\n<blockquote>\n<p>补充：在树结构中，对于具有同一个根结点的各个子树，相互之间不能有交集。例如，图 1（A）中，除了根结点<br>A，其余元素又各自构成了三个子树，根结点分别为 B、C、D，这三个子树相互之间没有相同的结点。如果有，就破坏了树的结构，不能算做是一棵树。</p>\n</blockquote>\n<h3 id=\"3-结点的度和层次\"><a href=\"#3-结点的度和层次\" class=\"headerlink\" title=\"3.结点的度和层次\"></a>3.结点的度和层次</h3><p>对于一个结点，拥有的子树数（结点有多少分支）称为结点的度（Degree）。例如，图 1（A）中，根结点 A 下分出了 3 个子树，所以，结点 A 的度为 3。</p>\n<blockquote>\n<p>一棵树的度是树内各结点的度的最大值。图 1（A）表示的树中，各个结点的度的最大值为 3，所以，整棵树的度的值是 3。</p>\n</blockquote>\n<p>结点的层次：从一棵树的树根开始，树根所在层为第一层，根的孩子结点所在的层为第二层，依次类推。对于图 1（A）来说，A 结点在第一层，B、C、D 为第二层，E、F、G、H、I、J 在第三层，K、L、M 在第四层。</p>\n<blockquote>\n<p>一棵树的深度（高度）是树中结点所在的最大的层次。图 1（A）树的深度为 4。</p>\n</blockquote>\n<p>如果两个结点的父结点虽不相同，但是它们的父结点处在同一层次上，那么这两个结点互为堂兄弟。例如，图 1（A）中，结点 G 和 E、F、H、I、J 的父结点都在第二层，所以之间为堂兄弟的关系。</p>\n<h3 id=\"4-有序树和无序树\"><a href=\"#4-有序树和无序树\" class=\"headerlink\" title=\"4.有序树和无序树\"></a>4.有序树和无序树</h3><p>如果树中结点的子树从左到右看，谁在左边，谁在右边，是有规定的，这棵树称为有序树；反之称为无序树。</p>\n<blockquote>\n<p>在有序树中，一个结点最左边的子树称为”第一个孩子”，最右边的称为”最后一个孩子”。</p>\n</blockquote>\n<p>拿图 1（A）来说，如果是其本身是一棵有序树，则以结点 B 为根结点的子树为整棵树的第一个孩子，以结点 D 为根结点的子树为整棵树的最后一个孩子。</p>\n<h3 id=\"5-森林\"><a href=\"#5-森林\" class=\"headerlink\" title=\"5.森林\"></a>5.森林</h3><p>由 m（m &gt;= 0）个互不相交的树组成的集合被称为森林。图 1（A）中，分别以 B、C、D 为根结点的三棵子树就可以称为森林。</p>\n<p>前面讲到，树可以理解为是由根结点和若干子树构成的，而这若干子树本身是一个森林，所以，树还可以理解为是由根结点和森林组成的。用一个式子表示为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Tree =（root,F）</span><br></pre></td></tr></table></figure>\n<p>其中，root 表示树的根结点，F 表示由 m（m &gt;= 0）棵树组成的森林。</p>\n<h2 id=\"二、二叉树及其性质\"><a href=\"#二、二叉树及其性质\" class=\"headerlink\" title=\"二、二叉树及其性质\"></a>二、二叉树及其性质</h2><p>简单地理解，满足以下两个条件的树就是二叉树：<br>1.本身是有序树；<br>2.树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2；<br>例如，图 1 a) 就是一棵二叉树，而图 1 b) 则不是。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJMUjEtMC5naWY\" alt=\"图 2 a)  二叉树\"></p>\n<h3 id=\"1-二叉树的性质\"><a href=\"#1-二叉树的性质\" class=\"headerlink\" title=\"1.二叉树的性质\"></a>1.二叉树的性质</h3><p>二叉树具有以下几个性质：<br>1.二叉树中，第 i 层最多有 2^i-1^ 个结点。<br>2.如果二叉树的深度为 K，那么此二叉树最多有 2^K^-1 个结点。<br>3.二叉树中，终端结点数（叶子结点数）为 n~0~，度为 2 的结点数为 n~2~，则 n~0~=n~2~+1。</p>\n<blockquote>\n<p>性质 3 的计算方法为：对于一个二叉树来说，除了度为 0 的叶子结点和度为 2 的结点，剩下的就是度为 1 的结点（设为 n1），那么总结点<br>n=n~0~+n~1~+n~2~。 同时，对于每一个结点来说都是由其父结点分支表示的，假设树中分枝数为 B，那么总结点数 n=B+1。而分枝数是可以通过<br>n~1~ 和 n~2~ 表示的，即 B=n~1~+2<em>n~2~。所以，n 用另外一种方式表示为 n=n~1~+2</em>n~2~+1。 两种方式得到的 n<br>值组成一个方程组，就可以得出 n~0~=n~2~+1。</p>\n</blockquote>\n<p>二叉树还可以继续分类，衍生出满二叉树和完全二叉树。</p>\n<h3 id=\"2-满二叉树\"><a href=\"#2-满二叉树\" class=\"headerlink\" title=\"2.满二叉树\"></a>2.满二叉树</h3><p>如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为满二叉树。</p>\n<p>满二叉树示意图</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJIRzgtMS5naWY\" alt=\"在这里插入图片描述\"><br>图 2 满二叉树示意图</p>\n<p>如图 2 所示就是一棵满二叉树。</p>\n<p>满二叉树除了满足普通二叉树的性质，还具有以下性质：<br>满二叉树中第 i 层的节点数为 2^n-1^ 个。<br>深度为 k 的满二叉树必有 2^k-1^ 个节点 ，叶子数为 2^k-1^。<br>满二叉树中不存在度为 1 的节点，每一个分支点中都两棵深度相同的子树，且叶子节点都在最底层。<br>具有 n 个节点的满二叉树的深度为 log~2~(n+1)。</p>\n<h3 id=\"3-完全二叉树\"><a href=\"#3-完全二叉树\" class=\"headerlink\" title=\"3.完全二叉树\"></a>3.完全二叉树</h3><p>如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。</p>\n<p>完全二叉树示意图</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJNYjUtMi5naWY\" alt=\"在这里插入图片描述\"><br>图 3 完全二叉树示意图</p>\n<p>如图 3a) 所示是一棵完全二叉树，图 3b) 由于最后一层的节点没有按照从左向右分布，因此只能算作是普通的二叉树。</p>\n<p>完全二叉树除了具有普通二叉树的性质，它自身也具有一些独特的性质，比如说，n 个结点的完全二叉树的深度为 ⌊log~2~n⌋+1。</p>\n<blockquote>\n<p>⌊log~2~n⌋ 表示取小于 log~2~n 的最大整数。例如，⌊log~2~4⌋ = 2，而 ⌊log~2~5⌋ 结果也是 2。</p>\n</blockquote>\n<p>对于任意一个完全二叉树来说，如果将含有的结点按照层次从左到右依次标号（如图 3a)），对于任意一个结点 i ，完全二叉树还有以下几个结论成立：<br>当 i&gt;1 时，父亲结点为结点 [i/2] 。（i=1 时，表示的是根结点，无父亲结点）<br>如果 2<em>i&gt;n（总结点的个数） ，则结点 i 肯定没有左孩子（为叶子结点）；否则其左孩子是结点 2</em>i 。<br>如果 2<em>i+1&gt;n ，则结点 i 肯定没有右孩子；否则右孩子是结点 2</em>i+1 。</p>\n<h2 id=\"三、树的存储结构\"><a href=\"#三、树的存储结构\" class=\"headerlink\" title=\"三、树的存储结构\"></a>三、树的存储结构</h2><h3 id=\"1-二叉树的顺序存储\"><a href=\"#1-二叉树的顺序存储\" class=\"headerlink\" title=\"1.二叉树的顺序存储\"></a>1.二叉树的顺序存储</h3><p>二叉树的顺序存储，指的是使用顺序表（数组）存储二叉树。<strong>注：顺序存储只适用于完全二叉树。</strong></p>\n<blockquote>\n<p> 如果我们想顺序存储普通二叉树，需要提前将普通二叉树转化为完全二叉树。如下图所示：</p>\n</blockquote>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NjI0TTAyLTAucG5n?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<p>完全二叉树的顺序存储，仅需从根节点开始，按照层次依次将树中节点存储到数组即可。<br>比如上面的图2，存储结构如下：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NjI0RjA0LTMucG5n?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"><br>普通二叉树使用顺序表存储或多或多会存在空间浪费的现象，因此引入下面的链式存储。</p>\n<h3 id=\"2-二叉树的链式存储\"><a href=\"#2-二叉树的链式存储\" class=\"headerlink\" title=\"2.二叉树的链式存储\"></a>2.二叉树的链式存储</h3><p>二叉树链式存储结构示意图：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0R0oyWi0xLmdpZg\" alt=\"在这里插入图片描述\"><br>采用链式存储二叉树时，其节点结构由 3 部分构成（如图所示）：<br>指向左孩子节点的指针（Lchild）；<br>节点存储的数据（data）；<br>指向右孩子节点的指针（Rchild）；<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0R0swMzQtMi5naWY\" alt=\"在这里插入图片描述\"><br>数据结构为：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span>&#123;</span></span><br><span class=\"line\">    TElemType data;<span class=\"comment\">//数据域</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>,*<span class=\"title\">rchild</span>;</span><span class=\"comment\">//左右孩子指针</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">parent</span>;</span></span><br><span class=\"line\">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure><br>下面是一段完整的c语言代码<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Struct of binary tree node</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">parent</span>;</span><span class=\"comment\">//parent node pointer</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">createTree</span><span class=\"params\">(BiTree *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Tree Graph:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1:       1\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;        /\\\\\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2:     2  3\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;      /\t\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3:   4\t\t\t\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 1</span></span><br><span class=\"line\">\t*T = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 2</span></span><br><span class=\"line\">\t(*T)-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;parent = *T;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;parent = *T;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 3</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;parent = (*T)-&gt;lchild;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 4</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBiTree tree;</span><br><span class=\"line\">\tcreateTree(&amp;tree);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Root is:%d\\n&quot;</span>,tree-&gt;data);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Parent of the fourth node is:%d\\n&quot;</span>, tree-&gt;lchild-&gt;lchild-&gt;parent-&gt;data);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>三叉链表</strong>：在某些实际场景中，可能会做 “查找某节点的父节点” 的操作，这时可以在节点结构中再添加一个指针域，用于各个节点指向其父亲节点。</p>\n<h2 id=\"四、先序遍历\"><a href=\"#四、先序遍历\" class=\"headerlink\" title=\"四、先序遍历\"></a>四、先序遍历</h2><p>二叉树先序遍历的实现思想是：<br>1.访问根节点；<br>2.访问当前节点的左子树；<br>3.若当前节点无左子树，则访问当前节点的右子树；<br>如图所示二叉树：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"递归方法：\"><a href=\"#递归方法：\" class=\"headerlink\" title=\"递归方法：\"></a>递归方法：</h3><p>二叉树的先序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Preorder</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\tPreorder(T-&gt;lchild);</span><br><span class=\"line\">\t\tPreorder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归方法：\"><a href=\"#非递归方法：\" class=\"headerlink\" title=\"非递归方法：\"></a>非递归方法：</h3><p>而递归的底层实现依靠的是栈存储结构，因此，二叉树的先序遍历既可以直接采用递归思想实现，也可以使用栈的存储结构模拟递归的思想实现，思路如下：<br>1.对于每个节点判断是否有左右节点，<br>2.如果有左节点则继续访问左孩子节点，并判断其是否有右节点，如果有则入栈，没有则忽略。<br>3.如果当前节点没有左孩子节点，则继续判断栈是否有元素，如果有则回到栈节点继续访问右子树。如果没有则前序遍历完成。</p>\n<p>其 C 语言实现代码为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> top = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"comment\">//Struct of binary tree node</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreateTree</span><span class=\"params\">(BiTree *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Tree Graph:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1:       1\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;        /\\\\\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2:     2  3\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;      /\\\\  /\\\\ \t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3:   4 5  6 7\t\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 1</span></span><br><span class=\"line\">\t*T = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 2</span></span><br><span class=\"line\">\t(*T)-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 3</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 4</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tvisit a node</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Visit</span><span class=\"params\">(BiTNode *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Preorder:%d\\n&quot;</span>, T-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpreorder visit a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Preorder</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\tPreorder(T-&gt;lchild);</span><br><span class=\"line\">\t\tPreorder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpop</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[]</span></span><br><span class=\"line\"><span class=\"comment\">*return\t\tBiTNode*--The top element of stack.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BiTNode* <span class=\"title function_\">pop</span><span class=\"params\">(BiTNode* Stack[])</span> &#123;</span><br><span class=\"line\">\tBiTNode* a = Stack[top--];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpush</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[], BiTNode*</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class=\"line\">\tStack[++top] = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpreorder visit a tree by using a stack</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PreorderStack</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\tBiTNode* Stack[MAXSIZE];<span class=\"comment\">//Initialize the stack</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (T) &#123;</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (T-&gt;lchild) &#123;<span class=\"comment\">//If T has left child</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (T-&gt;rchild) &#123;\t<span class=\"comment\">//If T has left and right child</span></span><br><span class=\"line\">\t\t\t\tpush(Stack,T-&gt;rchild);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tT = T-&gt;lchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(T-&gt;rchild)&#123;<span class=\"comment\">//If T only has right child</span></span><br><span class=\"line\">\t\t\tT = T-&gt;rchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(top&gt;=<span class=\"number\">0</span>)&#123;<span class=\"comment\">//If Stack has elements</span></span><br><span class=\"line\">\t\t\tBiTNode *a = pop(Stack);</span><br><span class=\"line\">\t\t\tT = a;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//If T is last node in preorder.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBiTree tree;</span><br><span class=\"line\">\tCreateTree(&amp;tree);</span><br><span class=\"line\">\t<span class=\"comment\">//recursive</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Recursive PreOrder\\n&quot;</span>);</span><br><span class=\"line\">\tPreorder(tree);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//not recursive</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Non-recursive PreOrder\\n&quot;</span>);</span><br><span class=\"line\">\tPreorderStack(tree);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、中序遍历\"><a href=\"#五、中序遍历\" class=\"headerlink\" title=\"五、中序遍历\"></a>五、中序遍历</h2><p>二叉树中序遍历的实现思想是：<br>1.访问当前节点的左子树；<br>2.访问根节点；<br>3.访问当前节点的右子树；</p>\n<p>如图所示二叉树：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"递归方法\"><a href=\"#递归方法\" class=\"headerlink\" title=\"递归方法\"></a>递归方法</h3><p>二叉树的中序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归方法）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tInOrder visit a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrder</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tInOrder(T-&gt;lchild);</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\tInOrder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归方法\"><a href=\"#非递归方法\" class=\"headerlink\" title=\"非递归方法\"></a>非递归方法</h3><p>我的思路如下：<br>访问根节点，判断其是否有左右孩子。<br>如果有左孩子，则根节点入栈，继续访问左子树。如果左子树为空，则访问出栈元素，然后访问其右子树。<br>如果没有左孩子，则判断是否有右孩子，并访问当前节点。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> top = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"comment\">//Struct of binary tree node</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreateTree</span><span class=\"params\">(BiTree *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Tree Graph:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1:       1\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;        /\\\\\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2:     2  3\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;      /\\\\  /\\\\ \t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3:   4 5  6 7\t\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 1</span></span><br><span class=\"line\">\t*T = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 2</span></span><br><span class=\"line\">\t(*T)-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 3</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 4</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tvisit a node</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Visit</span><span class=\"params\">(BiTNode *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;InOrder:%d\\n&quot;</span>, T-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tInOrder visit a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrder</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tInOrder(T-&gt;lchild);</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\tInOrder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpop</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[]</span></span><br><span class=\"line\"><span class=\"comment\">*return\t\tBiTNode*--The top element of stack.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BiTNode* <span class=\"title function_\">pop</span><span class=\"params\">(BiTNode* Stack[])</span> &#123;</span><br><span class=\"line\">\tBiTNode* a = Stack[top--];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpush</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[], BiTNode*</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class=\"line\">\tStack[++top] = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tInOrder visit a tree by using a stack</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InOrderStack</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\tBiTNode* Stack[MAXSIZE];<span class=\"comment\">//Initialize the stack</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (T) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (T-&gt;lchild) &#123;<span class=\"comment\">//If T has left child</span></span><br><span class=\"line\">\t\t\tpush(Stack, T);</span><br><span class=\"line\">\t\t\tT = T-&gt;lchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tVisit(T);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (T-&gt;rchild) &#123;<span class=\"comment\">//If T has right child</span></span><br><span class=\"line\">\t\t\t\tT = T-&gt;rchild;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (top &gt;= <span class=\"number\">0</span>) &#123;<span class=\"comment\">//If Stack has elements</span></span><br><span class=\"line\">\t\t\t\tBiTNode *a = pop(Stack);</span><br><span class=\"line\">\t\t\t\tVisit(a);</span><br><span class=\"line\">\t\t\t\tT = a-&gt;rchild;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//If T is last node in preorder.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBiTree tree;</span><br><span class=\"line\">\tCreateTree(&amp;tree);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Recursive InOrder\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//recursive</span></span><br><span class=\"line\">\tInOrder(tree);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Non-recursive InOrder\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//not recursive</span></span><br><span class=\"line\">\tInOrderStack(tree);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>两种更标准的方法如下：<br>中序遍历的非递归方式实现思想是：从根结点开始，遍历左孩子同时压栈，当遍历结束，说明当前遍历的结点没有左孩子，从栈中取出来调用操作函数，然后访问该结点的右孩子，继续以上重复性的操作。</p>\n<p>除此之外，还有另一种实现思想：中序遍历过程中，只需将每个结点的左子树压栈即可，右子树不需要压栈。当结点的左子树遍历完成后，只需要以栈顶结点的右孩子为根结点，继续循环遍历即可。</p>\n<h2 id=\"六、后序遍历\"><a href=\"#六、后序遍历\" class=\"headerlink\" title=\"六、后序遍历\"></a>六、后序遍历</h2><p>二叉树中序遍历的实现思想是：<br>1.访问当前节点的左子树；<br>2.访问当前节点的右子树；<br>3.访问根节点；</p>\n<p>如图所示二叉树：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"递归方法-1\"><a href=\"#递归方法-1\" class=\"headerlink\" title=\"递归方法\"></a>递归方法</h3><p>二叉树的后序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归方法）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tRecursive method to traverse a tree in post-order</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostOrder</span><span class=\"params\">(<span class=\"type\">const</span> BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tPostOrder(T-&gt;lchild);</span><br><span class=\"line\">\t\tPostOrder(T-&gt;rchild);</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归方法-1\"><a href=\"#非递归方法-1\" class=\"headerlink\" title=\"非递归方法\"></a>非递归方法</h3><p>非递归算法的思路是：<br>后序遍历的逆序 是 先序遍历交换左右子树遍历顺序。<br>因此用两个栈来实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> top = <span class=\"number\">-1</span>;   <span class=\"comment\">//index of stack</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> printtop = <span class=\"number\">-1</span>; <span class=\"comment\">//index of printstack</span></span><br><span class=\"line\"><span class=\"comment\">//Struct of binary tree node</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreateTree</span><span class=\"params\">(BiTree *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Tree Graph:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1:       1\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;        /\\\\\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2:     2  3\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;      /\\\\  /\\\\ \t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3:   4 5  6 7\t\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 1</span></span><br><span class=\"line\">\t*T = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 2</span></span><br><span class=\"line\">\t(*T)-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 3</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 4</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tvisit a node</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Visit</span><span class=\"params\">(BiTNode *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;PostOrder:%d\\n&quot;</span>, T-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tRecursive method to traverse a tree in post-order</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostOrder</span><span class=\"params\">(<span class=\"type\">const</span> BiTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tPostOrder(T-&gt;lchild);</span><br><span class=\"line\">\t\tPostOrder(T-&gt;rchild);</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpop</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[]</span></span><br><span class=\"line\"><span class=\"comment\">*return\t\tBiTNode*--The top element of stack.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BiTNode* <span class=\"title function_\">pop</span><span class=\"params\">(BiTNode* Stack[])</span> &#123;</span><br><span class=\"line\">\tBiTNode* a = Stack[top--];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tpush</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[], BiTNode*</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class=\"line\">\tStack[++top] = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tprintpop for printstack</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[]</span></span><br><span class=\"line\"><span class=\"comment\">*return\t\tBiTNode*--The top element of stack.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">BiTNode* <span class=\"title function_\">printpop</span><span class=\"params\">(BiTNode* Stack[])</span> &#123;</span><br><span class=\"line\">\tBiTNode* a = Stack[printtop--];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tprintpush for printstack</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode*[], BiTNode*</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printpush</span><span class=\"params\">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class=\"line\">\tStack[++printtop] = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tPostOrder visit a tree by using two stacks</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PostOrderStack</span><span class=\"params\">(BiTree T)</span> &#123;</span><br><span class=\"line\">\tBiTNode* Stack[MAXSIZE];<span class=\"comment\">//Initialize the stack</span></span><br><span class=\"line\">\tBiTNode* PrintStack[MAXSIZE];<span class=\"comment\">//Initialize the stack</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (T) &#123;</span><br><span class=\"line\">\t\tprintpush(PrintStack, T);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (T-&gt;rchild) &#123;<span class=\"comment\">//If T has left child</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (T-&gt;lchild) &#123;\t<span class=\"comment\">//If T has left and right child</span></span><br><span class=\"line\">\t\t\t\tpush(Stack, T-&gt;lchild);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tT = T-&gt;rchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (T-&gt;lchild) &#123;<span class=\"comment\">//If T only has right child</span></span><br><span class=\"line\">\t\t\tT = T-&gt;lchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (top &gt;= <span class=\"number\">0</span>) &#123;<span class=\"comment\">//If Stack has elements</span></span><br><span class=\"line\">\t\t\tBiTNode *a = pop(Stack);</span><br><span class=\"line\">\t\t\tT = a;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//If T is last node in preorder.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (printtop &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tVisit(printpop(PrintStack));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBiTree tree;</span><br><span class=\"line\">\tCreateTree(&amp;tree);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Recursive method\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//Recursive method to traverse a tree in post-order</span></span><br><span class=\"line\">\tPostOrder(tree);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Non-recursive method\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//Non-recursive method to traverse a tree in post-order</span></span><br><span class=\"line\">\tPostOrderStack(tree);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tdelete tree;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种算法思路：<br>用一个栈，但是设置标志位。<br>后序遍历是在遍历完当前结点的左右孩子之后，才调用操作函数，所以需要在操作结点进栈时，为每个结点配备一个标志位。当遍历该结点的左孩子时，设置当前结点的标志位为 0，进栈；当要遍历该结点的右孩子时，设置当前结点的标志位为 1，进栈。</p>\n<p>这样，当遍历完成，该结点弹栈时，查看该结点的标志位的值：如果是 0，表示该结点的右孩子还没有遍历；反之如果是 1，说明该结点的左右孩子都遍历完成，可以调用操作函数。<br><a href=\"http://c.biancheng.net/view/3390.html\">代码实现</a></p>\n<h2 id=\"七、层次遍历\"><a href=\"#七、层次遍历\" class=\"headerlink\" title=\"七、层次遍历\"></a>七、层次遍历</h2><p>按照二叉树中的层次从左到右依次遍历每层中的结点。<br>具体的实现思路是：通过使用队列的数据结构，从树的根结点开始，依次将其左孩子和右孩子入队。而后每次队列中一个结点出队，都将其左孩子和右孩子入队，直到树中所有结点都出队，出队结点的先后顺序就是层次遍历的最终结果。</p>\n<p>如图1所示二叉树：<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"><br>例如，层次遍历图 1 中的二叉树：<br>首先，根结点 1 入队；<br>根结点 1 出队，出队的同时，将左孩子 2 和右孩子 3 分别入队；<br>队头结点 2 出队，出队的同时，将结点 2 的左孩子 4 和右孩子 5 依次入队；<br>队头结点 3 出队，出队的同时，将结点 3 的左孩子 6 和右孩子 7 依次入队；<br>不断地循环，直至队列内为空。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> front = <span class=\"number\">0</span>, rear = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//Struct of binary tree node</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span> *<span class=\"title\">lchild</span>, *<span class=\"title\">rchild</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreateTree</span><span class=\"params\">(BiTree *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Tree Graph:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1:       1\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;        /\\\\\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;2:     2  3\t\t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;      /\\\\  /\\\\ \t\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;3:   4 5  6 7\t\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 1</span></span><br><span class=\"line\">\t*T = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 2</span></span><br><span class=\"line\">\t(*T)-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 3</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Depth: 4</span></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tvisit a node</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Visit</span><span class=\"params\">(BiTNode *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hierarchical traversal:%d\\n&quot;</span>, T-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(BiTNode * <span class=\"built_in\">queue</span>[],BiTNode * a)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>[rear++] = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BiTNode * <span class=\"title function_\">DeQueue</span><span class=\"params\">(BiTNode * <span class=\"built_in\">queue</span>[])</span> &#123;</span><br><span class=\"line\">\tBiTNode *b = <span class=\"built_in\">queue</span>[front++];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tHierarchical traversal</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Hierarchical</span><span class=\"params\">(<span class=\"type\">const</span> BiTree T)</span> &#123;</span><br><span class=\"line\">\tBiTNode* Queue[MAXSIZE];</span><br><span class=\"line\">\tBiTree q = T;</span><br><span class=\"line\">\tEnQueue(Queue,q);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (front&lt;rear) &#123;</span><br><span class=\"line\">\t\tBiTNode* node = DeQueue(Queue);</span><br><span class=\"line\">\t\tVisit(node);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node-&gt;lchild!=<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\tEnQueue(Queue, node-&gt;lchild);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node-&gt;rchild != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\tEnQueue(Queue, node-&gt;rchild);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBiTree tree;</span><br><span class=\"line\">\tCreateTree(&amp;tree);</span><br><span class=\"line\">\t<span class=\"comment\">//Hierarchical traversal</span></span><br><span class=\"line\">\tHierarchical(tree);</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tdelete tree;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"八、哈夫曼树\"><a href=\"#八、哈夫曼树\" class=\"headerlink\" title=\"八、哈夫曼树\"></a>八、哈夫曼树</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>路径：在一棵树中，一个结点到另一个结点之间的通路，称为路径。图 1 中，从根结点到结点 a 之间的通路就是一条路径。</p>\n<p>路径长度：在一条路径中，每经过一个结点，路径长度都要加 1 。例如在一棵树中，规定根结点所在层数为1层，那么从根结点到第 i 层结点的路径长度为 i - 1 。图 1 中从根结点到结点 c 的路径长度为 3。</p>\n<p>结点的权：给每一个结点赋予一个新的数值，被称为这个结点的权。例如，图 1 中结点 a 的权为 7，结点 b 的权为 5。</p>\n<p>结点的带权路径长度：指的是从根结点到该结点之间的路径长度与该结点的权的乘积。例如，图 1 中结点 b 的带权路径长度为 2 * 5 = 10 </p>\n<p><img src=\"https://img-blog.csdn.net/20131205224108125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd3RmbW9ua2luZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"在这里插入图片描述\"></p>\n<p>哈夫曼树：又称最优二叉树。它是 n 个带权叶子结点构成的所有二叉树中，带权路径长度 WPL 最小的二叉树。<br>如下图：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk1NjNUYjAtMC5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"构建过程\"><a href=\"#构建过程\" class=\"headerlink\" title=\"构建过程\"></a>构建过程</h3><p>对于给定的有各自权值的 n 个结点，构建哈夫曼树有一个行之有效的办法：<br>在 n 个权值中选出两个最小的权值，对应的两个结点组成一个新的二叉树，且新二叉树的根结点的权值为左右孩子权值的和；<br>在原有的 n 个权值中删除那两个最小的权值，同时将新的权值加入到 n–2 个权值的行列中，以此类推；<br>重复 1 和 2 ，直到所以的结点构建成了一棵二叉树为止，这棵树就是哈夫曼树。<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk1NjNRUzUtMS5wbmc?x-oss-process=image/format,png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"哈弗曼树中结点结构\"><a href=\"#哈弗曼树中结点结构\" class=\"headerlink\" title=\"哈弗曼树中结点结构\"></a>哈弗曼树中结点结构</h3><p>构建哈夫曼树时，首先需要确定树中结点的构成。由于哈夫曼树的构建是从叶子结点开始，不断地构建新的父结点，直至树根，所以结点中应包含指向父结点的指针。但是在使用哈夫曼树时是从树根开始，根据需求遍历树中的结点，因此每个结点需要有指向其左孩子和右孩子的指针。</p>\n<p>所以，哈夫曼树中结点构成用代码表示为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Struct of huffman tree</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> *<span class=\"title\">left</span>, *<span class=\"title\">right</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> *<span class=\"title\">parent</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BTNode, *HFTree;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建哈弗曼树的算法实现及WPL的计算\"><a href=\"#构建哈弗曼树的算法实现及WPL的计算\" class=\"headerlink\" title=\"构建哈弗曼树的算法实现及WPL的计算\"></a>构建哈弗曼树的算法实现及WPL的计算</h3><p>构建哈夫曼树时，需要每次根据各个结点的权重值，筛选出其中值最小的两个结点，然后构建二叉树。</p>\n<p>大佬的思路：查找权重值最小的两个结点的思想是：从树组起始位置开始，首先找到两个无父结点的结点（说明还未使用其构建成树），然后和后续无父结点的结点依次做比较，有两种情况需要考虑：<br>如果比两个结点中较小的那个还小，就保留这个结点，删除原来较大的结点；<br>如果介于两个结点权重值之间，替换原来较大的结点；<br>参考：<a href=\"https://blog.csdn.net/wtfmonking/article/details/17150499\">哈夫曼树c语言实现</a><br>我的思路：<br>建立一个哈夫曼树：<br>创建工作指针p+tmp，<br>对于一组数，依次找出最小的数加入树中(选择排序思想)，<br>如果树没有创建，则创建一个结点存入第一个数。工作指针指向这个结点<br>如果工作指针没有左孩子，则工作指针左孩子指向下一个结点<br>如果工作指针没有右孩子，则工作指针右孩子指向下一个结点<br>如果工作指针有两个孩子，则创建一个空结点，左孩子指向工作指针，右孩子指向下一个结点，并将工作指针指向该结点。<br>计算wpl:<br>递归计算，<br>如果结点没有左右孩子则为叶子结点，返回权值*高度.<br>如果有孩子，则返回左子树wpl和右子树wpl之和.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ELEMTYPE int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> top = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"comment\">//Struct of huffman tree</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> &#123;</span></span><br><span class=\"line\">\tELEMTYPE data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> *<span class=\"title\">left</span>, *<span class=\"title\">right</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BTNode</span> *<span class=\"title\">parent</span>;</span><span class=\"comment\">//child node pointer</span></span><br><span class=\"line\">&#125;BTNode, *HFTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcreate a huffman tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tint *nums--numbers to create tree,int n--num[] size</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">HFTree <span class=\"title function_\">CreateTree</span><span class=\"params\">(<span class=\"type\">int</span> *nums,<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\tBTNode *p_tmp =(BTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BTNode)); <span class=\"comment\">//work pointer</span></span><br><span class=\"line\">\tp_tmp-&gt;left = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tp_tmp-&gt;right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tp_tmp-&gt;parent = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> lastnum = <span class=\"number\">0</span>;<span class=\"comment\">//Initilize with a num less than the min num</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> min = <span class=\"number\">100</span>;<span class=\"comment\">//Initilize with a num larger than the max num</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (min&gt;nums[j] &amp;&amp; lastnum&lt;nums[j]) &#123;</span><br><span class=\"line\">\t\t\t\tmin = nums[j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlastnum = min;</span><br><span class=\"line\">\t\t<span class=\"comment\">//create a new node</span></span><br><span class=\"line\">\t\tBTNode *p_newchild= (BTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BTNode));</span><br><span class=\"line\">\t\tp_newchild-&gt;data = min;</span><br><span class=\"line\">\t\tp_newchild-&gt;left = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tp_newchild-&gt;right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\tp_newchild-&gt;parent = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"number\">1</span> == n) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> p_newchild;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p_tmp-&gt;left==<span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">//add node to left of p_tmp</span></span><br><span class=\"line\">\t\t\tp_tmp-&gt;left = p_newchild;</span><br><span class=\"line\">\t\t\tp_newchild-&gt;parent = p_tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p_tmp-&gt;right == <span class=\"literal\">NULL</span>)&#123;<span class=\"comment\">//add node to right of p_tmp</span></span><br><span class=\"line\">\t\t\tp_tmp-&gt;right = p_newchild;</span><br><span class=\"line\">\t\t\tp_tmp-&gt;data = p_tmp-&gt;left-&gt;data + p_tmp-&gt;right-&gt;data;</span><br><span class=\"line\">\t\t\tp_newchild-&gt;parent =p_tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//add brother node of p_tmp and create p_newparent</span></span><br><span class=\"line\">\t\t\tBTNode *p_newparent = (BTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BTNode));</span><br><span class=\"line\">\t\t\tp_newparent-&gt;data = p_tmp-&gt;data+min;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (p_tmp-&gt;data&lt;=min) &#123;</span><br><span class=\"line\">\t\t\t\tp_newparent-&gt;left = p_tmp;</span><br><span class=\"line\">\t\t\t\tp_newparent-&gt;right = p_newchild;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tp_newparent-&gt;left = p_newchild;</span><br><span class=\"line\">\t\t\t\tp_newparent-&gt;right = p_tmp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tp_newparent-&gt;parent = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\tp_newchild-&gt;parent = p_newparent;</span><br><span class=\"line\">\t\t\tp_tmp = p_newparent;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p_tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tvisit a node</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBiTNode</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Visit</span><span class=\"params\">(BTNode *T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;PreOrder:%d\\n&quot;</span>, T-&gt;data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tPreOrder visit a tree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tBitree</span></span><br><span class=\"line\"><span class=\"comment\">*return</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PreOrder</span><span class=\"params\">(HFTree T)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\tVisit(T);</span><br><span class=\"line\">\t\tPreOrder(T-&gt;left);</span><br><span class=\"line\">\t\tPreOrder(T-&gt;right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*Function:\tcalculate the weight path length of HFTree</span></span><br><span class=\"line\"><span class=\"comment\">*Input:\t\tHFTree T, int len--depth</span></span><br><span class=\"line\"><span class=\"comment\">*return\t\twpl</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cal_wpl</span><span class=\"params\">(HFTree T, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (T) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//If leaf node</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (T-&gt;left==<span class=\"literal\">NULL</span> &amp;&amp; T-&gt;right==<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> T-&gt;data*len;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//If not leaf node, return left child tree wpl and right child tree wpl</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> cal_wpl(T-&gt;left,len+<span class=\"number\">1</span>) + cal_wpl(T-&gt;left,len+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//Null tree return 0;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> nums[<span class=\"number\">5</span>] = &#123;<span class=\"number\">9</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\">\tHFTree tree=CreateTree(nums,<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//recursive visit tree node</span></span><br><span class=\"line\">\tPreOrder(tree);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,cal_wpl(tree,<span class=\"number\">0</span>));</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"UDP/TCP协议详解","date":"2022-03-16T04:27:49.000Z","_content":"\n面试中频繁问到UDP/TCP协议，但是经常只知其表，不知其里，因此在这里做一个总结，尽量涵盖可能问到的问题。\n\n\n<!--more-->\n\n## UDP和TCP的特点\n**1.\tTCP与UDP的区别？应用场景都有哪些？**\n1)\tTCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接\n2)\tTCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。\n3)\tUDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。\n4)\t每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信\n5)\tTCP对系统资源要求较多，UDP对系统资源要求较少。\n6)\t若通信数据完整性需让位与通信实时性，则应该选用 TCP 协议（如文件传输、重要状态的更新等）；反之，则使用 UDP 协议（如视频传输、实时通信等）。\n7)\tUDP:DNS   SNMP\n8)\tTCP面向字节流，UTP面向数据包；\n\n**2.\t为什么UDP有时比TCP更有优势?**\n1)\t网速的提升给UDP的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。\n2)\tTCP为了实现网络通信的可靠性，使用了复杂的拥塞控制算法，建立了繁琐的握手过程，由于TCP内置的系统协议栈中，极难对其进行改进。\n3)\t采用TCP，一旦发生丢包，TCP会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于UDP对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响。 \n\n## UDP首部格式\n![UDP首部格式](/images/UDPhead.png)\n首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。\n\n## TCP首部格式\n![TCP首部格式](/images/TCPhead.png)\n**序号** ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。\n\n**确认号** ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。\n\n**数据偏移** ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。\n\n**确认 ACK** ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。\n\n**同步 SYN** ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。\n\n**终止 FIN** ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。\n\n**窗口** ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。\n\n## TCP的三次握手和四次挥手\n**1.三次握手**\n1)\t第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；\n2)\t第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；\n3)\t第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。\n\n![TCP的三次握手和四次挥手](https://pic.imgdb.cn/item/6239213727f86abb2aef1b3b.jpg)\n\n**2.四次挥手**\n当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。\n1)\t第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；\n2)\t第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；\n3)\t第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；\n4)\t第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。\n5)\t六大标志位\nSYN，同步标志位；ACK确认标志位；PSH传送标志位；FIN结束标志位；RST重置标志位；URG紧急标志位；seq序号；ack确认号\n\n## TCP协议计时器\n1)\t重传计时器\n在一个TCP连接中，TCP每发送一个报文段，就对此报文段设置一个超时重传计时器。若在收到了对此特定报文段的确认之前计时器截止期到，则重传此报文段，并将计时器复位。\n2)\t持续计时器\n为了对付零窗口大小通知，TCP需要另一个计时器。假定接收TCP宣布了窗口大小为零。发送TCP就停止传送报文段，直到接收TCP发送确认并宣布一个非零的窗口大小。但这个确认可能会丢失。我们知道在TCP中，对确认是不需要发送确认的。若确认丢失了，接收TCP并不知道，而是会认为它已经完成任务了，并等待着发送TCP接着会发送更多的报文段。但发送TCP由于没有收到确认，就等待对方发送确认来通知窗口的大小。双方的TCP都在永远地等待着对方。要打开这种死锁，TCP为每一个连接使用一个坚持计时器。当发送TCP收到一个窗口大小为零的确认时，就启动坚持计时器。当坚持计时器期限到时，发送TCP就发送一个特殊的报文段， 叫做 探测报文段 。这个报文段只有一个字节的数据。它有一个序号，但它的序号永远不需要确认；甚至在计算对其他部分的数据的确认时该序号也被忽略。探测报文段提醒对端：确认已丢失，必须重传。 \n3)\t保活计时器\n保活计时器使用在某些实现中，用来防止在两个TCP之间的连接出现长时期的空闲。假定客户打开了到服务器的连接，传送了一些数据，然后就保持静默了。也许这个客户出故障了。在这种情况下，这个连接将永远地处理打开状态。 \n4)\t时间等待计时器\n时间等待计时器是在连接终止期间使用的。当TCP关闭一个连接时，它并不认为这个连接马上就真正地关闭了。在时间等待期间中，连接还处于一种中间过渡状态。这就可以使重复的FIN报文段（如果有的话）可以到达目的站因而可将其丢弃。这个计时器的值通常设置为一个报文段的寿命期待值的两倍。\n\n\n## TCP可靠传输\n**如何保证TCP的可靠传输?**\n**1.\t序号**\nTCP首部的序号字段用来保证数据能有序提交给应用层，TCP把数据看成无结构的有序的字节流。数据流中的每一个字节都编上一个序号字段的值是指本报文段所发送的数据的第一个字节序号。\n**2.\t确认**\nTCP首部的确认号是期望收到对方的下一个报文段的数据的第一个字节的序号；\n**3.\t重传**\n超时重传 \n冗余ACK重传\n**4.\t流量控制**\nTCP采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。\n发送窗口在连接建立时由双方商定。但在通信的过程中，接收端可根据自己的资源情况，随时动态地调整对方的发送窗口上限值(可增大或减小)。\n**窗口**\n    接受窗口rwnd，接收端缓冲区大小。接收端将此窗口值放在 TCP 报文的首部中的窗口字段，传送给发送端。\n    拥塞窗口cwnd，发送缓冲区大小。\n    发送窗口swnd, 发送窗口的上限值 = Min [rwnd, cwnd]\n\n**5.\t拥塞控制**\n**6.\t流量控制与拥塞控制的区别**\n所谓拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能承受现有的网络负荷。流量控制往往指的是点对点通信量的控制，是个端到端的问题。流量控制所要做的就是控制发送端发送数据的速率，以便使接收端来得及接受。\n\n## TCP滑动窗口\n![TCP滑动窗口](/images/TCPslice_window.png)\n窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。\n\n发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。\n\n接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。\n\n## TCP流量控制\n1)\t如果发送方把数据发送得过快，接收方可能会来不及接收，这就会造成数据的丢失。TCP的流量控制是利用滑动窗口机制实现的，接收方在返回的ACK中会包含自己的接收窗口的大小，以控制发送方的数据发送。\n2)\t当某个ACK报文丢失了，就会出现A等待B确认，并且B等待A发送数据的死锁状态。为了解决这种问题，TCP引入了持续计时器（Persistence timer），当A收到rwnd=0时，就启用该计时器，时间到了则发送一个1字节的探测报文，询问B是很忙还是上个ACK丢失了，然后B回应自身的接收窗口大小，返回仍为0（A重设持续计时器继续等待）或者会重发rwnd=x。\n\n## TCP拥塞控制\n如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。\n![TCP拥塞控制](/images/TCPcontrol1.png)\nTCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。\n\n发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。\n\n为了便于讨论，做如下假设：\n\n接收方有足够大的接收缓存，因此不会发生流量控制；\n虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。\n**1.\t慢开始**\n发送方维持一个叫做拥塞窗口cwnd（congestion window）的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口，另外考虑到接受方的接收能力，发送窗口可能小于拥塞窗口。慢开始算法的思路就是，不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。\n当然收到单个确认但此确认多个数据报的时候就加相应的数值。所以一次传输轮次之后拥塞窗口就加倍。这就是乘法增长，和后面的拥塞避免算法的加法增长比较。\n为了防止cwnd增长过大引起网络拥塞，还需设置一个慢开始门限ssthresh状态变量。ssthresh的用法如下：\n当cwnd<ssthresh时，使用慢开始算法。\n当cwnd>ssthresh时，改用拥塞避免算法。\n当cwnd=ssthresh时，慢开始与拥塞避免算法任意。\n拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口按线性规律缓慢增长。\n无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。如下图：\n![TCP慢开始](/images/TCPcontrol2.png)\n**2.\t快重传和快恢复**\n快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。\n快重传配合使用的还有快恢复算法，有以下两个要点:\n①当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。\n②考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。如下图：\n\n![TCP快重传](/images/TCPcontrol3.png)\n\n## time_wait与close_wait\n### time_wait\n**1.time_wait与close_wait，time_wait状态持续多长时间？为什么会有time_wait状态？**\n1)\ttime_wait另一边已经初始化一个释放，close_wait连接一端被动关闭；\n2)\t首先调用close()发起主动关闭的一方，在发送最后一个ACK之后会进入time_wait的状态，也就说该发送方会保持2MSL时间之后才会回到初始状态。MSL指的是数据包在网络中的最大生存时间。产生这种结果使得这个TCP连接在2MSL连接等待期间，定义这个连接的四元组（客户端IP地址和端口，服务端IP地址和端口号）不能被使用。\n3)\t为什么存在time_wait\n\n    (1) 为实现TCP全双工连接的可靠释放\n    TCP协议在关闭连接的四次握手过程中，最终的ACK是由主动关闭连接的一端（后面统称A端）发出的，如果这个ACK丢失，对方（后面统称B端）将重发出最终的FIN，因此A端必须维护状态信息（TIME_WAIT）允许它重发最终的ACK。如果A端不维持TIME_WAIT状态，而是处于CLOSED 状态，那么A端将响应RST分节，B端收到后将此分节解释成一个错误。因而，要实现TCP全双工连接的正常终止，必须处理终止过程中四个分节任何一个分节的丢失情况，主动关闭连接的A端必须维持TIME_WAIT状态。\n    由TCP状态变迁图可知，假设发起主动关闭的一方（client）最后发送的ACK在网络中丢失，由于TCP协议的重传机制，执行被动关闭的一方（server）将会重发其FIN，在该FIN到达client之前，client必须维护这条连接状态，也就说这条TCP连接所对应的资源（client方的local_ip,local_port）不能被立即释放或重新分配，直到另一方重发的FIN达到之后，client重发ACK后，经过2MSL时间周期没有再收到另一方的FIN之后，该TCP连接才能恢复初始的CLOSED状态。如果主动关闭一方不维护这样一个TIME_WAIT状态，那么当被动关闭一方重发的FIN到达时，主动关闭一方的TCP传输层会用RST包响应对方，这会被对方认为是有错误发生，然而这事实上只是正常的关闭连接过程，并非异常。\n\n    (2) 为使旧的数据包在网络因过期而消失\n    TCP segment 可能由于路由器异常而“迷途”，在迷途期间，TCP发送端可能因确认超时而重发这个segment，迷途的segment在路由器修复后也会被送到最终目的地，这个迟到的迷途segment到达时可能会引起问题。在关闭“前一个连接”之后，马上又重新建立起一个相同的IP和端口之间的“新连接”，“前一个连接”的迷途重复分组在“前一个连接”终止后到达，而被“新连接”收到了。为了避免这个情况，TCP协议不允许处于TIME_WAIT状态的连接启动一个新的可用连接，因为TIME_WAIT状态持续2MSL，就可以保证当成功建立一个新TCP连接的时候，来自旧连接重复分组已经在网络中消逝。\n    为说明这个问题，我们先假设TCP协议中不存在TIME_WAIT状态的限制，再假设当前有一条TCP连接：(local_ip, local_port, remote_ip,remote_port)，因某些原因，我们先关闭，接着很快以相同的四元组建立一条新连接。本文前面介绍过，TCP连接由四元组唯一标识，因此，在我们假设的情况中，TCP协议栈是无法区分前后两条TCP连接的不同的，在它看来，这根本就是同一条连接，中间先释放再建立的过程对其来说是“感知”不到的。这样就可能发生这样的情况：前一条TCP连接由local peer发送的数据到达remote peer后，会被该remot peer的TCP传输层当做当前TCP连接的正常数据接收并向上传递至应用层（而事实上，在我们假设的场景下，这些旧数据到达remote peer前，旧连接已断开且一条由相同四元组构成的新TCP连接已建立，因此，这些旧数据是不应该被向上传递至应用层的），从而引起数据错乱进而导致各种无法预知的诡异现象。作为一种可靠的传输协议，TCP必须在协议层面考虑并避免这种情况的发生，这正是TIME_WAIT状态存在的第2个原因。\n4)\t如果time_wait维持的时间过长，主动关闭连接端迟迟无法关闭连接，占用程序资源。\n5)\t如果服务器程序TCP连接一直保持在CLOSE_WAIT状态，那么只有一种情况，就是在对方关闭连接之后服务器程序自己没有进一步发出ack信号。换句话说，就是在对方连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着。\n6)\ttime_wait状态如何避免\n首先服务器可以设置SO_REUSEADDR套接字选项来通知内核，如果端口忙，但TCP连接位于TIME_WAIT状态时可以重用端口。在一个非常有用的场景就是，如果你的服务器程序停止后想立即重启，而新的套接字依旧希望使用同一端口，此时SO_REUSEADDR选项就可以避免TIME_WAIT状态。\n1)  Time_wait为什么是2MSL的时间长度\nTIME_WAIT的状态是为了等待连接上所有的分组的消失。单纯的想法，发送端只需要等待一个MSL就足够了。这是不够的，假设现在一个MSL的时候，接收端需要发送一个应答，这时候，我们也必须等待这个应答的消失，这个应答的消失也是需要一个MSL，所以我们需要等待2MSL。\n\n### close_wait\n1)\t产生原因\n在被动关闭连接情况下，在已经接收到FIN，但是还没有发送自己的FIN的时刻，连接处于CLOSE_WAIT状态。通常来讲，CLOSE_WAIT状态的持续时间应该很短，正如SYN_RCVD状态。但是在一些特殊情况下，就会出现连接长时间处于CLOSE_WAIT状态的情况。出现大量close_wait的现象，主要原因是某种情况下对方关闭了socket链接，但是我方忙与读或者写，没有关闭连接。代码需要判断socket，一旦读到0，断开连接，read返回负，检查一下errno，如果不是AGAIN，就断开连接。对方关闭连接之后服务器程序自己没有进一步发出ack信号。换句话说，就是在对方连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着。\n2)\t解决方法\n要检测出对方已经关闭的socket，然后关闭它。\n\n\n## socket编程\n**TCP过程：**\n客户端：\n　　1、创建socket\n　　2、绑定ip、端口号到socket字\n　　3、连接服务器，connect()\n　　4、收发数据，send()、recv()\n　　5、关闭连接\n服务器端：\n　　1、创建socket字\n　　2、设置socket属性\n　　3、绑定ip与端口号\n　　4、开启监听，listen()\n　　5、接受发送端的连接accept()\n　　6、收发数据send()、recv()\n　　7、关闭网络连接\n　　8、关闭监听\n\n对应关系：\n客户端的connect()指向服务器端的accept()\n客户端、服务器端的send()/recv()是双向箭头的关系。\n\n**UDP过程：**\n\n客户端： \n　　1、创建一个socket，用函数socket()； \n　　2、设置socket属性，用函数setsockopt();* 可选 \n　　3、绑定IP地址、端口等信息到socket上，用函数bind();* 可选 \n　　4、设置对方的IP地址和端口等属性; \n　　5、发送数据，用函数sendto(); \n　　6、关闭网络连接；\n服务器端： \n　　1、创建一个socket，用函数socket()； \n　　2、设置socket属性，用函数setsockopt();* 可选 \n　　3、绑定IP地址、端口等信息到socket上，用函数bind(); \n　　4、循环接收数据，用函数recvfrom(); \n　　5、关闭网络连接； \n\n\n## 参考资料\n[1.TCP与UDP在socket编程中的区别](https://www.cnblogs.com/Anker/p/6210840.html)\n\n[2.校招基础知识详解-计算机网络传输层协议](https://leetcode-cn.com/leetbook/read/tech-interview-cookbook/oeo4q5/)","source":"_posts/005-TCP-IP.md","raw":"---\ntitle: UDP/TCP协议详解\ndate: 2022-03-16 12:27:49\ncategories: 计算机网络\ntags:\n- 计算机网络\n---\n\n面试中频繁问到UDP/TCP协议，但是经常只知其表，不知其里，因此在这里做一个总结，尽量涵盖可能问到的问题。\n\n\n<!--more-->\n\n## UDP和TCP的特点\n**1.\tTCP与UDP的区别？应用场景都有哪些？**\n1)\tTCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接\n2)\tTCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。\n3)\tUDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。\n4)\t每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信\n5)\tTCP对系统资源要求较多，UDP对系统资源要求较少。\n6)\t若通信数据完整性需让位与通信实时性，则应该选用 TCP 协议（如文件传输、重要状态的更新等）；反之，则使用 UDP 协议（如视频传输、实时通信等）。\n7)\tUDP:DNS   SNMP\n8)\tTCP面向字节流，UTP面向数据包；\n\n**2.\t为什么UDP有时比TCP更有优势?**\n1)\t网速的提升给UDP的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。\n2)\tTCP为了实现网络通信的可靠性，使用了复杂的拥塞控制算法，建立了繁琐的握手过程，由于TCP内置的系统协议栈中，极难对其进行改进。\n3)\t采用TCP，一旦发生丢包，TCP会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于UDP对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响。 \n\n## UDP首部格式\n![UDP首部格式](/images/UDPhead.png)\n首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。\n\n## TCP首部格式\n![TCP首部格式](/images/TCPhead.png)\n**序号** ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。\n\n**确认号** ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。\n\n**数据偏移** ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。\n\n**确认 ACK** ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。\n\n**同步 SYN** ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。\n\n**终止 FIN** ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。\n\n**窗口** ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。\n\n## TCP的三次握手和四次挥手\n**1.三次握手**\n1)\t第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；\n2)\t第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；\n3)\t第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。\n\n![TCP的三次握手和四次挥手](https://pic.imgdb.cn/item/6239213727f86abb2aef1b3b.jpg)\n\n**2.四次挥手**\n当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。\n1)\t第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；\n2)\t第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；\n3)\t第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；\n4)\t第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。\n5)\t六大标志位\nSYN，同步标志位；ACK确认标志位；PSH传送标志位；FIN结束标志位；RST重置标志位；URG紧急标志位；seq序号；ack确认号\n\n## TCP协议计时器\n1)\t重传计时器\n在一个TCP连接中，TCP每发送一个报文段，就对此报文段设置一个超时重传计时器。若在收到了对此特定报文段的确认之前计时器截止期到，则重传此报文段，并将计时器复位。\n2)\t持续计时器\n为了对付零窗口大小通知，TCP需要另一个计时器。假定接收TCP宣布了窗口大小为零。发送TCP就停止传送报文段，直到接收TCP发送确认并宣布一个非零的窗口大小。但这个确认可能会丢失。我们知道在TCP中，对确认是不需要发送确认的。若确认丢失了，接收TCP并不知道，而是会认为它已经完成任务了，并等待着发送TCP接着会发送更多的报文段。但发送TCP由于没有收到确认，就等待对方发送确认来通知窗口的大小。双方的TCP都在永远地等待着对方。要打开这种死锁，TCP为每一个连接使用一个坚持计时器。当发送TCP收到一个窗口大小为零的确认时，就启动坚持计时器。当坚持计时器期限到时，发送TCP就发送一个特殊的报文段， 叫做 探测报文段 。这个报文段只有一个字节的数据。它有一个序号，但它的序号永远不需要确认；甚至在计算对其他部分的数据的确认时该序号也被忽略。探测报文段提醒对端：确认已丢失，必须重传。 \n3)\t保活计时器\n保活计时器使用在某些实现中，用来防止在两个TCP之间的连接出现长时期的空闲。假定客户打开了到服务器的连接，传送了一些数据，然后就保持静默了。也许这个客户出故障了。在这种情况下，这个连接将永远地处理打开状态。 \n4)\t时间等待计时器\n时间等待计时器是在连接终止期间使用的。当TCP关闭一个连接时，它并不认为这个连接马上就真正地关闭了。在时间等待期间中，连接还处于一种中间过渡状态。这就可以使重复的FIN报文段（如果有的话）可以到达目的站因而可将其丢弃。这个计时器的值通常设置为一个报文段的寿命期待值的两倍。\n\n\n## TCP可靠传输\n**如何保证TCP的可靠传输?**\n**1.\t序号**\nTCP首部的序号字段用来保证数据能有序提交给应用层，TCP把数据看成无结构的有序的字节流。数据流中的每一个字节都编上一个序号字段的值是指本报文段所发送的数据的第一个字节序号。\n**2.\t确认**\nTCP首部的确认号是期望收到对方的下一个报文段的数据的第一个字节的序号；\n**3.\t重传**\n超时重传 \n冗余ACK重传\n**4.\t流量控制**\nTCP采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。\n发送窗口在连接建立时由双方商定。但在通信的过程中，接收端可根据自己的资源情况，随时动态地调整对方的发送窗口上限值(可增大或减小)。\n**窗口**\n    接受窗口rwnd，接收端缓冲区大小。接收端将此窗口值放在 TCP 报文的首部中的窗口字段，传送给发送端。\n    拥塞窗口cwnd，发送缓冲区大小。\n    发送窗口swnd, 发送窗口的上限值 = Min [rwnd, cwnd]\n\n**5.\t拥塞控制**\n**6.\t流量控制与拥塞控制的区别**\n所谓拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能承受现有的网络负荷。流量控制往往指的是点对点通信量的控制，是个端到端的问题。流量控制所要做的就是控制发送端发送数据的速率，以便使接收端来得及接受。\n\n## TCP滑动窗口\n![TCP滑动窗口](/images/TCPslice_window.png)\n窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。\n\n发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。\n\n接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。\n\n## TCP流量控制\n1)\t如果发送方把数据发送得过快，接收方可能会来不及接收，这就会造成数据的丢失。TCP的流量控制是利用滑动窗口机制实现的，接收方在返回的ACK中会包含自己的接收窗口的大小，以控制发送方的数据发送。\n2)\t当某个ACK报文丢失了，就会出现A等待B确认，并且B等待A发送数据的死锁状态。为了解决这种问题，TCP引入了持续计时器（Persistence timer），当A收到rwnd=0时，就启用该计时器，时间到了则发送一个1字节的探测报文，询问B是很忙还是上个ACK丢失了，然后B回应自身的接收窗口大小，返回仍为0（A重设持续计时器继续等待）或者会重发rwnd=x。\n\n## TCP拥塞控制\n如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。\n![TCP拥塞控制](/images/TCPcontrol1.png)\nTCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。\n\n发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。\n\n为了便于讨论，做如下假设：\n\n接收方有足够大的接收缓存，因此不会发生流量控制；\n虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。\n**1.\t慢开始**\n发送方维持一个叫做拥塞窗口cwnd（congestion window）的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口，另外考虑到接受方的接收能力，发送窗口可能小于拥塞窗口。慢开始算法的思路就是，不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。\n当然收到单个确认但此确认多个数据报的时候就加相应的数值。所以一次传输轮次之后拥塞窗口就加倍。这就是乘法增长，和后面的拥塞避免算法的加法增长比较。\n为了防止cwnd增长过大引起网络拥塞，还需设置一个慢开始门限ssthresh状态变量。ssthresh的用法如下：\n当cwnd<ssthresh时，使用慢开始算法。\n当cwnd>ssthresh时，改用拥塞避免算法。\n当cwnd=ssthresh时，慢开始与拥塞避免算法任意。\n拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口按线性规律缓慢增长。\n无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。如下图：\n![TCP慢开始](/images/TCPcontrol2.png)\n**2.\t快重传和快恢复**\n快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。\n快重传配合使用的还有快恢复算法，有以下两个要点:\n①当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。\n②考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。如下图：\n\n![TCP快重传](/images/TCPcontrol3.png)\n\n## time_wait与close_wait\n### time_wait\n**1.time_wait与close_wait，time_wait状态持续多长时间？为什么会有time_wait状态？**\n1)\ttime_wait另一边已经初始化一个释放，close_wait连接一端被动关闭；\n2)\t首先调用close()发起主动关闭的一方，在发送最后一个ACK之后会进入time_wait的状态，也就说该发送方会保持2MSL时间之后才会回到初始状态。MSL指的是数据包在网络中的最大生存时间。产生这种结果使得这个TCP连接在2MSL连接等待期间，定义这个连接的四元组（客户端IP地址和端口，服务端IP地址和端口号）不能被使用。\n3)\t为什么存在time_wait\n\n    (1) 为实现TCP全双工连接的可靠释放\n    TCP协议在关闭连接的四次握手过程中，最终的ACK是由主动关闭连接的一端（后面统称A端）发出的，如果这个ACK丢失，对方（后面统称B端）将重发出最终的FIN，因此A端必须维护状态信息（TIME_WAIT）允许它重发最终的ACK。如果A端不维持TIME_WAIT状态，而是处于CLOSED 状态，那么A端将响应RST分节，B端收到后将此分节解释成一个错误。因而，要实现TCP全双工连接的正常终止，必须处理终止过程中四个分节任何一个分节的丢失情况，主动关闭连接的A端必须维持TIME_WAIT状态。\n    由TCP状态变迁图可知，假设发起主动关闭的一方（client）最后发送的ACK在网络中丢失，由于TCP协议的重传机制，执行被动关闭的一方（server）将会重发其FIN，在该FIN到达client之前，client必须维护这条连接状态，也就说这条TCP连接所对应的资源（client方的local_ip,local_port）不能被立即释放或重新分配，直到另一方重发的FIN达到之后，client重发ACK后，经过2MSL时间周期没有再收到另一方的FIN之后，该TCP连接才能恢复初始的CLOSED状态。如果主动关闭一方不维护这样一个TIME_WAIT状态，那么当被动关闭一方重发的FIN到达时，主动关闭一方的TCP传输层会用RST包响应对方，这会被对方认为是有错误发生，然而这事实上只是正常的关闭连接过程，并非异常。\n\n    (2) 为使旧的数据包在网络因过期而消失\n    TCP segment 可能由于路由器异常而“迷途”，在迷途期间，TCP发送端可能因确认超时而重发这个segment，迷途的segment在路由器修复后也会被送到最终目的地，这个迟到的迷途segment到达时可能会引起问题。在关闭“前一个连接”之后，马上又重新建立起一个相同的IP和端口之间的“新连接”，“前一个连接”的迷途重复分组在“前一个连接”终止后到达，而被“新连接”收到了。为了避免这个情况，TCP协议不允许处于TIME_WAIT状态的连接启动一个新的可用连接，因为TIME_WAIT状态持续2MSL，就可以保证当成功建立一个新TCP连接的时候，来自旧连接重复分组已经在网络中消逝。\n    为说明这个问题，我们先假设TCP协议中不存在TIME_WAIT状态的限制，再假设当前有一条TCP连接：(local_ip, local_port, remote_ip,remote_port)，因某些原因，我们先关闭，接着很快以相同的四元组建立一条新连接。本文前面介绍过，TCP连接由四元组唯一标识，因此，在我们假设的情况中，TCP协议栈是无法区分前后两条TCP连接的不同的，在它看来，这根本就是同一条连接，中间先释放再建立的过程对其来说是“感知”不到的。这样就可能发生这样的情况：前一条TCP连接由local peer发送的数据到达remote peer后，会被该remot peer的TCP传输层当做当前TCP连接的正常数据接收并向上传递至应用层（而事实上，在我们假设的场景下，这些旧数据到达remote peer前，旧连接已断开且一条由相同四元组构成的新TCP连接已建立，因此，这些旧数据是不应该被向上传递至应用层的），从而引起数据错乱进而导致各种无法预知的诡异现象。作为一种可靠的传输协议，TCP必须在协议层面考虑并避免这种情况的发生，这正是TIME_WAIT状态存在的第2个原因。\n4)\t如果time_wait维持的时间过长，主动关闭连接端迟迟无法关闭连接，占用程序资源。\n5)\t如果服务器程序TCP连接一直保持在CLOSE_WAIT状态，那么只有一种情况，就是在对方关闭连接之后服务器程序自己没有进一步发出ack信号。换句话说，就是在对方连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着。\n6)\ttime_wait状态如何避免\n首先服务器可以设置SO_REUSEADDR套接字选项来通知内核，如果端口忙，但TCP连接位于TIME_WAIT状态时可以重用端口。在一个非常有用的场景就是，如果你的服务器程序停止后想立即重启，而新的套接字依旧希望使用同一端口，此时SO_REUSEADDR选项就可以避免TIME_WAIT状态。\n1)  Time_wait为什么是2MSL的时间长度\nTIME_WAIT的状态是为了等待连接上所有的分组的消失。单纯的想法，发送端只需要等待一个MSL就足够了。这是不够的，假设现在一个MSL的时候，接收端需要发送一个应答，这时候，我们也必须等待这个应答的消失，这个应答的消失也是需要一个MSL，所以我们需要等待2MSL。\n\n### close_wait\n1)\t产生原因\n在被动关闭连接情况下，在已经接收到FIN，但是还没有发送自己的FIN的时刻，连接处于CLOSE_WAIT状态。通常来讲，CLOSE_WAIT状态的持续时间应该很短，正如SYN_RCVD状态。但是在一些特殊情况下，就会出现连接长时间处于CLOSE_WAIT状态的情况。出现大量close_wait的现象，主要原因是某种情况下对方关闭了socket链接，但是我方忙与读或者写，没有关闭连接。代码需要判断socket，一旦读到0，断开连接，read返回负，检查一下errno，如果不是AGAIN，就断开连接。对方关闭连接之后服务器程序自己没有进一步发出ack信号。换句话说，就是在对方连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着。\n2)\t解决方法\n要检测出对方已经关闭的socket，然后关闭它。\n\n\n## socket编程\n**TCP过程：**\n客户端：\n　　1、创建socket\n　　2、绑定ip、端口号到socket字\n　　3、连接服务器，connect()\n　　4、收发数据，send()、recv()\n　　5、关闭连接\n服务器端：\n　　1、创建socket字\n　　2、设置socket属性\n　　3、绑定ip与端口号\n　　4、开启监听，listen()\n　　5、接受发送端的连接accept()\n　　6、收发数据send()、recv()\n　　7、关闭网络连接\n　　8、关闭监听\n\n对应关系：\n客户端的connect()指向服务器端的accept()\n客户端、服务器端的send()/recv()是双向箭头的关系。\n\n**UDP过程：**\n\n客户端： \n　　1、创建一个socket，用函数socket()； \n　　2、设置socket属性，用函数setsockopt();* 可选 \n　　3、绑定IP地址、端口等信息到socket上，用函数bind();* 可选 \n　　4、设置对方的IP地址和端口等属性; \n　　5、发送数据，用函数sendto(); \n　　6、关闭网络连接；\n服务器端： \n　　1、创建一个socket，用函数socket()； \n　　2、设置socket属性，用函数setsockopt();* 可选 \n　　3、绑定IP地址、端口等信息到socket上，用函数bind(); \n　　4、循环接收数据，用函数recvfrom(); \n　　5、关闭网络连接； \n\n\n## 参考资料\n[1.TCP与UDP在socket编程中的区别](https://www.cnblogs.com/Anker/p/6210840.html)\n\n[2.校招基础知识详解-计算机网络传输层协议](https://leetcode-cn.com/leetbook/read/tech-interview-cookbook/oeo4q5/)","slug":"005-TCP-IP","published":1,"updated":"2025-07-13T06:57:17.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qk000eu4voaqjdbkbu","content":"<p>面试中频繁问到UDP/TCP协议，但是经常只知其表，不知其里，因此在这里做一个总结，尽量涵盖可能问到的问题。</p>\n<span id=\"more\"></span>\n<h2 id=\"UDP和TCP的特点\"><a href=\"#UDP和TCP的特点\" class=\"headerlink\" title=\"UDP和TCP的特点\"></a>UDP和TCP的特点</h2><p><strong>1.    TCP与UDP的区别？应用场景都有哪些？</strong><br>1)    TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<br>2)    TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。<br>3)    UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。<br>4)    每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信<br>5)    TCP对系统资源要求较多，UDP对系统资源要求较少。<br>6)    若通信数据完整性需让位与通信实时性，则应该选用 TCP 协议（如文件传输、重要状态的更新等）；反之，则使用 UDP 协议（如视频传输、实时通信等）。<br>7)    UDP:DNS   SNMP<br>8)    TCP面向字节流，UTP面向数据包；</p>\n<p><strong>2.    为什么UDP有时比TCP更有优势?</strong><br>1)    网速的提升给UDP的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。<br>2)    TCP为了实现网络通信的可靠性，使用了复杂的拥塞控制算法，建立了繁琐的握手过程，由于TCP内置的系统协议栈中，极难对其进行改进。<br>3)    采用TCP，一旦发生丢包，TCP会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于UDP对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响。 </p>\n<h2 id=\"UDP首部格式\"><a href=\"#UDP首部格式\" class=\"headerlink\" title=\"UDP首部格式\"></a>UDP首部格式</h2><p><img src=\"/images/UDPhead.png\" alt=\"UDP首部格式\"><br>首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。</p>\n<h2 id=\"TCP首部格式\"><a href=\"#TCP首部格式\" class=\"headerlink\" title=\"TCP首部格式\"></a>TCP首部格式</h2><p><img src=\"/images/TCPhead.png\" alt=\"TCP首部格式\"><br><strong>序号</strong> ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</p>\n<p><strong>确认号</strong> ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</p>\n<p><strong>数据偏移</strong> ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</p>\n<p><strong>确认 ACK</strong> ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</p>\n<p><strong>同步 SYN</strong> ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</p>\n<p><strong>终止 FIN</strong> ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</p>\n<p><strong>窗口</strong> ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</p>\n<h2 id=\"TCP的三次握手和四次挥手\"><a href=\"#TCP的三次握手和四次挥手\" class=\"headerlink\" title=\"TCP的三次握手和四次挥手\"></a>TCP的三次握手和四次挥手</h2><p><strong>1.三次握手</strong><br>1)    第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；<br>2)    第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；<br>3)    第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</p>\n<p><img src=\"https://pic.imgdb.cn/item/6239213727f86abb2aef1b3b.jpg\" alt=\"TCP的三次握手和四次挥手\"></p>\n<p><strong>2.四次挥手</strong><br>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。<br>1)    第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；<br>2)    第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；<br>3)    第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；<br>4)    第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。<br>5)    六大标志位<br>SYN，同步标志位；ACK确认标志位；PSH传送标志位；FIN结束标志位；RST重置标志位；URG紧急标志位；seq序号；ack确认号</p>\n<h2 id=\"TCP协议计时器\"><a href=\"#TCP协议计时器\" class=\"headerlink\" title=\"TCP协议计时器\"></a>TCP协议计时器</h2><p>1)    重传计时器<br>在一个TCP连接中，TCP每发送一个报文段，就对此报文段设置一个超时重传计时器。若在收到了对此特定报文段的确认之前计时器截止期到，则重传此报文段，并将计时器复位。<br>2)    持续计时器<br>为了对付零窗口大小通知，TCP需要另一个计时器。假定接收TCP宣布了窗口大小为零。发送TCP就停止传送报文段，直到接收TCP发送确认并宣布一个非零的窗口大小。但这个确认可能会丢失。我们知道在TCP中，对确认是不需要发送确认的。若确认丢失了，接收TCP并不知道，而是会认为它已经完成任务了，并等待着发送TCP接着会发送更多的报文段。但发送TCP由于没有收到确认，就等待对方发送确认来通知窗口的大小。双方的TCP都在永远地等待着对方。要打开这种死锁，TCP为每一个连接使用一个坚持计时器。当发送TCP收到一个窗口大小为零的确认时，就启动坚持计时器。当坚持计时器期限到时，发送TCP就发送一个特殊的报文段， 叫做 探测报文段 。这个报文段只有一个字节的数据。它有一个序号，但它的序号永远不需要确认；甚至在计算对其他部分的数据的确认时该序号也被忽略。探测报文段提醒对端：确认已丢失，必须重传。<br>3)    保活计时器<br>保活计时器使用在某些实现中，用来防止在两个TCP之间的连接出现长时期的空闲。假定客户打开了到服务器的连接，传送了一些数据，然后就保持静默了。也许这个客户出故障了。在这种情况下，这个连接将永远地处理打开状态。<br>4)    时间等待计时器<br>时间等待计时器是在连接终止期间使用的。当TCP关闭一个连接时，它并不认为这个连接马上就真正地关闭了。在时间等待期间中，连接还处于一种中间过渡状态。这就可以使重复的FIN报文段（如果有的话）可以到达目的站因而可将其丢弃。这个计时器的值通常设置为一个报文段的寿命期待值的两倍。</p>\n<h2 id=\"TCP可靠传输\"><a href=\"#TCP可靠传输\" class=\"headerlink\" title=\"TCP可靠传输\"></a>TCP可靠传输</h2><p><strong>如何保证TCP的可靠传输?</strong><br><strong>1.    序号</strong><br>TCP首部的序号字段用来保证数据能有序提交给应用层，TCP把数据看成无结构的有序的字节流。数据流中的每一个字节都编上一个序号字段的值是指本报文段所发送的数据的第一个字节序号。<br><strong>2.    确认</strong><br>TCP首部的确认号是期望收到对方的下一个报文段的数据的第一个字节的序号；<br><strong>3.    重传</strong><br>超时重传<br>冗余ACK重传<br><strong>4.    流量控制</strong><br>TCP采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。<br>发送窗口在连接建立时由双方商定。但在通信的过程中，接收端可根据自己的资源情况，随时动态地调整对方的发送窗口上限值(可增大或减小)。<br><strong>窗口</strong><br>    接受窗口rwnd，接收端缓冲区大小。接收端将此窗口值放在 TCP 报文的首部中的窗口字段，传送给发送端。<br>    拥塞窗口cwnd，发送缓冲区大小。<br>    发送窗口swnd, 发送窗口的上限值 = Min [rwnd, cwnd]</p>\n<p><strong>5.    拥塞控制</strong><br><strong>6.    流量控制与拥塞控制的区别</strong><br>所谓拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能承受现有的网络负荷。流量控制往往指的是点对点通信量的控制，是个端到端的问题。流量控制所要做的就是控制发送端发送数据的速率，以便使接收端来得及接受。</p>\n<h2 id=\"TCP滑动窗口\"><a href=\"#TCP滑动窗口\" class=\"headerlink\" title=\"TCP滑动窗口\"></a>TCP滑动窗口</h2><p><img src=\"/images/TCPslice_window.png\" alt=\"TCP滑动窗口\"><br>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p>\n<p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p>\n<p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。</p>\n<h2 id=\"TCP流量控制\"><a href=\"#TCP流量控制\" class=\"headerlink\" title=\"TCP流量控制\"></a>TCP流量控制</h2><p>1)    如果发送方把数据发送得过快，接收方可能会来不及接收，这就会造成数据的丢失。TCP的流量控制是利用滑动窗口机制实现的，接收方在返回的ACK中会包含自己的接收窗口的大小，以控制发送方的数据发送。<br>2)    当某个ACK报文丢失了，就会出现A等待B确认，并且B等待A发送数据的死锁状态。为了解决这种问题，TCP引入了持续计时器（Persistence timer），当A收到rwnd=0时，就启用该计时器，时间到了则发送一个1字节的探测报文，询问B是很忙还是上个ACK丢失了，然后B回应自身的接收窗口大小，返回仍为0（A重设持续计时器继续等待）或者会重发rwnd=x。</p>\n<h2 id=\"TCP拥塞控制\"><a href=\"#TCP拥塞控制\" class=\"headerlink\" title=\"TCP拥塞控制\"></a>TCP拥塞控制</h2><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。<br><img src=\"/images/TCPcontrol1.png\" alt=\"TCP拥塞控制\"><br>TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</p>\n<p>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p>\n<p>为了便于讨论，做如下假设：</p>\n<p>接收方有足够大的接收缓存，因此不会发生流量控制；<br>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。<br><strong>1.    慢开始</strong><br>发送方维持一个叫做拥塞窗口cwnd（congestion window）的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口，另外考虑到接受方的接收能力，发送窗口可能小于拥塞窗口。慢开始算法的思路就是，不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。<br>当然收到单个确认但此确认多个数据报的时候就加相应的数值。所以一次传输轮次之后拥塞窗口就加倍。这就是乘法增长，和后面的拥塞避免算法的加法增长比较。<br>为了防止cwnd增长过大引起网络拥塞，还需设置一个慢开始门限ssthresh状态变量。ssthresh的用法如下：<br>当cwnd<ssthresh时，使用慢开始算法。\n当cwnd>ssthresh时，改用拥塞避免算法。<br>当cwnd=ssthresh时，慢开始与拥塞避免算法任意。<br>拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口按线性规律缓慢增长。<br>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。如下图：<br><img src=\"/images/TCPcontrol2.png\" alt=\"TCP慢开始\"><br><strong>2.    快重传和快恢复</strong><br>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。<br>快重传配合使用的还有快恢复算法，有以下两个要点:<br>①当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。<br>②考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。如下图：</p>\n<p><img src=\"/images/TCPcontrol3.png\" alt=\"TCP快重传\"></p>\n<h2 id=\"time-wait与close-wait\"><a href=\"#time-wait与close-wait\" class=\"headerlink\" title=\"time_wait与close_wait\"></a>time_wait与close_wait</h2><h3 id=\"time-wait\"><a href=\"#time-wait\" class=\"headerlink\" title=\"time_wait\"></a>time_wait</h3><p><strong>1.time_wait与close_wait，time_wait状态持续多长时间？为什么会有time_wait状态？</strong><br>1)    time_wait另一边已经初始化一个释放，close_wait连接一端被动关闭；<br>2)    首先调用close()发起主动关闭的一方，在发送最后一个ACK之后会进入time_wait的状态，也就说该发送方会保持2MSL时间之后才会回到初始状态。MSL指的是数据包在网络中的最大生存时间。产生这种结果使得这个TCP连接在2MSL连接等待期间，定义这个连接的四元组（客户端IP地址和端口，服务端IP地址和端口号）不能被使用。<br>3)    为什么存在time_wait</p>\n<pre><code>(1) 为实现TCP全双工连接的可靠释放\nTCP协议在关闭连接的四次握手过程中，最终的ACK是由主动关闭连接的一端（后面统称A端）发出的，如果这个ACK丢失，对方（后面统称B端）将重发出最终的FIN，因此A端必须维护状态信息（TIME_WAIT）允许它重发最终的ACK。如果A端不维持TIME_WAIT状态，而是处于CLOSED 状态，那么A端将响应RST分节，B端收到后将此分节解释成一个错误。因而，要实现TCP全双工连接的正常终止，必须处理终止过程中四个分节任何一个分节的丢失情况，主动关闭连接的A端必须维持TIME_WAIT状态。\n由TCP状态变迁图可知，假设发起主动关闭的一方（client）最后发送的ACK在网络中丢失，由于TCP协议的重传机制，执行被动关闭的一方（server）将会重发其FIN，在该FIN到达client之前，client必须维护这条连接状态，也就说这条TCP连接所对应的资源（client方的local_ip,local_port）不能被立即释放或重新分配，直到另一方重发的FIN达到之后，client重发ACK后，经过2MSL时间周期没有再收到另一方的FIN之后，该TCP连接才能恢复初始的CLOSED状态。如果主动关闭一方不维护这样一个TIME_WAIT状态，那么当被动关闭一方重发的FIN到达时，主动关闭一方的TCP传输层会用RST包响应对方，这会被对方认为是有错误发生，然而这事实上只是正常的关闭连接过程，并非异常。\n\n(2) 为使旧的数据包在网络因过期而消失\nTCP segment 可能由于路由器异常而“迷途”，在迷途期间，TCP发送端可能因确认超时而重发这个segment，迷途的segment在路由器修复后也会被送到最终目的地，这个迟到的迷途segment到达时可能会引起问题。在关闭“前一个连接”之后，马上又重新建立起一个相同的IP和端口之间的“新连接”，“前一个连接”的迷途重复分组在“前一个连接”终止后到达，而被“新连接”收到了。为了避免这个情况，TCP协议不允许处于TIME_WAIT状态的连接启动一个新的可用连接，因为TIME_WAIT状态持续2MSL，就可以保证当成功建立一个新TCP连接的时候，来自旧连接重复分组已经在网络中消逝。\n为说明这个问题，我们先假设TCP协议中不存在TIME_WAIT状态的限制，再假设当前有一条TCP连接：(local_ip, local_port, remote_ip,remote_port)，因某些原因，我们先关闭，接着很快以相同的四元组建立一条新连接。本文前面介绍过，TCP连接由四元组唯一标识，因此，在我们假设的情况中，TCP协议栈是无法区分前后两条TCP连接的不同的，在它看来，这根本就是同一条连接，中间先释放再建立的过程对其来说是“感知”不到的。这样就可能发生这样的情况：前一条TCP连接由local peer发送的数据到达remote peer后，会被该remot peer的TCP传输层当做当前TCP连接的正常数据接收并向上传递至应用层（而事实上，在我们假设的场景下，这些旧数据到达remote peer前，旧连接已断开且一条由相同四元组构成的新TCP连接已建立，因此，这些旧数据是不应该被向上传递至应用层的），从而引起数据错乱进而导致各种无法预知的诡异现象。作为一种可靠的传输协议，TCP必须在协议层面考虑并避免这种情况的发生，这正是TIME_WAIT状态存在的第2个原因。\n</code></pre><p>4)    如果time_wait维持的时间过长，主动关闭连接端迟迟无法关闭连接，占用程序资源。<br>5)    如果服务器程序TCP连接一直保持在CLOSE_WAIT状态，那么只有一种情况，就是在对方关闭连接之后服务器程序自己没有进一步发出ack信号。换句话说，就是在对方连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着。<br>6)    time_wait状态如何避免<br>首先服务器可以设置SO_REUSEADDR套接字选项来通知内核，如果端口忙，但TCP连接位于TIME_WAIT状态时可以重用端口。在一个非常有用的场景就是，如果你的服务器程序停止后想立即重启，而新的套接字依旧希望使用同一端口，此时SO_REUSEADDR选项就可以避免TIME_WAIT状态。<br>1)  Time_wait为什么是2MSL的时间长度<br>TIME_WAIT的状态是为了等待连接上所有的分组的消失。单纯的想法，发送端只需要等待一个MSL就足够了。这是不够的，假设现在一个MSL的时候，接收端需要发送一个应答，这时候，我们也必须等待这个应答的消失，这个应答的消失也是需要一个MSL，所以我们需要等待2MSL。</p>\n<h3 id=\"close-wait\"><a href=\"#close-wait\" class=\"headerlink\" title=\"close_wait\"></a>close_wait</h3><p>1)    产生原因<br>在被动关闭连接情况下，在已经接收到FIN，但是还没有发送自己的FIN的时刻，连接处于CLOSE_WAIT状态。通常来讲，CLOSE_WAIT状态的持续时间应该很短，正如SYN_RCVD状态。但是在一些特殊情况下，就会出现连接长时间处于CLOSE_WAIT状态的情况。出现大量close_wait的现象，主要原因是某种情况下对方关闭了socket链接，但是我方忙与读或者写，没有关闭连接。代码需要判断socket，一旦读到0，断开连接，read返回负，检查一下errno，如果不是AGAIN，就断开连接。对方关闭连接之后服务器程序自己没有进一步发出ack信号。换句话说，就是在对方连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着。<br>2)    解决方法<br>要检测出对方已经关闭的socket，然后关闭它。</p>\n<h2 id=\"socket编程\"><a href=\"#socket编程\" class=\"headerlink\" title=\"socket编程\"></a>socket编程</h2><p><strong>TCP过程：</strong><br>客户端：<br>　　1、创建socket<br>　　2、绑定ip、端口号到socket字<br>　　3、连接服务器，connect()<br>　　4、收发数据，send()、recv()<br>　　5、关闭连接<br>服务器端：<br>　　1、创建socket字<br>　　2、设置socket属性<br>　　3、绑定ip与端口号<br>　　4、开启监听，listen()<br>　　5、接受发送端的连接accept()<br>　　6、收发数据send()、recv()<br>　　7、关闭网络连接<br>　　8、关闭监听</p>\n<p>对应关系：<br>客户端的connect()指向服务器端的accept()<br>客户端、服务器端的send()/recv()是双向箭头的关系。</p>\n<p><strong>UDP过程：</strong></p>\n<p>客户端：<br>　　1、创建一个socket，用函数socket()；<br>　　2、设置socket属性，用函数setsockopt();<em> 可选<br>　　3、绑定IP地址、端口等信息到socket上，用函数bind();</em> 可选<br>　　4、设置对方的IP地址和端口等属性;<br>　　5、发送数据，用函数sendto();<br>　　6、关闭网络连接；<br>服务器端：<br>　　1、创建一个socket，用函数socket()；<br>　　2、设置socket属性，用函数setsockopt();* 可选<br>　　3、绑定IP地址、端口等信息到socket上，用函数bind();<br>　　4、循环接收数据，用函数recvfrom();<br>　　5、关闭网络连接； </p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.cnblogs.com/Anker/p/6210840.html\">1.TCP与UDP在socket编程中的区别</a></p>\n<p><a href=\"https://leetcode-cn.com/leetbook/read/tech-interview-cookbook/oeo4q5/\">2.校招基础知识详解-计算机网络传输层协议</a></p>\n","site":{"data":{}},"excerpt":"<p>面试中频繁问到UDP/TCP协议，但是经常只知其表，不知其里，因此在这里做一个总结，尽量涵盖可能问到的问题。</p>","more":"<h2 id=\"UDP和TCP的特点\"><a href=\"#UDP和TCP的特点\" class=\"headerlink\" title=\"UDP和TCP的特点\"></a>UDP和TCP的特点</h2><p><strong>1.    TCP与UDP的区别？应用场景都有哪些？</strong><br>1)    TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<br>2)    TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。<br>3)    UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。<br>4)    每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信<br>5)    TCP对系统资源要求较多，UDP对系统资源要求较少。<br>6)    若通信数据完整性需让位与通信实时性，则应该选用 TCP 协议（如文件传输、重要状态的更新等）；反之，则使用 UDP 协议（如视频传输、实时通信等）。<br>7)    UDP:DNS   SNMP<br>8)    TCP面向字节流，UTP面向数据包；</p>\n<p><strong>2.    为什么UDP有时比TCP更有优势?</strong><br>1)    网速的提升给UDP的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。<br>2)    TCP为了实现网络通信的可靠性，使用了复杂的拥塞控制算法，建立了繁琐的握手过程，由于TCP内置的系统协议栈中，极难对其进行改进。<br>3)    采用TCP，一旦发生丢包，TCP会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于UDP对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响。 </p>\n<h2 id=\"UDP首部格式\"><a href=\"#UDP首部格式\" class=\"headerlink\" title=\"UDP首部格式\"></a>UDP首部格式</h2><p><img src=\"/images/UDPhead.png\" alt=\"UDP首部格式\"><br>首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。</p>\n<h2 id=\"TCP首部格式\"><a href=\"#TCP首部格式\" class=\"headerlink\" title=\"TCP首部格式\"></a>TCP首部格式</h2><p><img src=\"/images/TCPhead.png\" alt=\"TCP首部格式\"><br><strong>序号</strong> ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</p>\n<p><strong>确认号</strong> ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</p>\n<p><strong>数据偏移</strong> ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</p>\n<p><strong>确认 ACK</strong> ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</p>\n<p><strong>同步 SYN</strong> ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</p>\n<p><strong>终止 FIN</strong> ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</p>\n<p><strong>窗口</strong> ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</p>\n<h2 id=\"TCP的三次握手和四次挥手\"><a href=\"#TCP的三次握手和四次挥手\" class=\"headerlink\" title=\"TCP的三次握手和四次挥手\"></a>TCP的三次握手和四次挥手</h2><p><strong>1.三次握手</strong><br>1)    第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；<br>2)    第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；<br>3)    第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</p>\n<p><img src=\"https://pic.imgdb.cn/item/6239213727f86abb2aef1b3b.jpg\" alt=\"TCP的三次握手和四次挥手\"></p>\n<p><strong>2.四次挥手</strong><br>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。<br>1)    第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；<br>2)    第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；<br>3)    第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；<br>4)    第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。<br>5)    六大标志位<br>SYN，同步标志位；ACK确认标志位；PSH传送标志位；FIN结束标志位；RST重置标志位；URG紧急标志位；seq序号；ack确认号</p>\n<h2 id=\"TCP协议计时器\"><a href=\"#TCP协议计时器\" class=\"headerlink\" title=\"TCP协议计时器\"></a>TCP协议计时器</h2><p>1)    重传计时器<br>在一个TCP连接中，TCP每发送一个报文段，就对此报文段设置一个超时重传计时器。若在收到了对此特定报文段的确认之前计时器截止期到，则重传此报文段，并将计时器复位。<br>2)    持续计时器<br>为了对付零窗口大小通知，TCP需要另一个计时器。假定接收TCP宣布了窗口大小为零。发送TCP就停止传送报文段，直到接收TCP发送确认并宣布一个非零的窗口大小。但这个确认可能会丢失。我们知道在TCP中，对确认是不需要发送确认的。若确认丢失了，接收TCP并不知道，而是会认为它已经完成任务了，并等待着发送TCP接着会发送更多的报文段。但发送TCP由于没有收到确认，就等待对方发送确认来通知窗口的大小。双方的TCP都在永远地等待着对方。要打开这种死锁，TCP为每一个连接使用一个坚持计时器。当发送TCP收到一个窗口大小为零的确认时，就启动坚持计时器。当坚持计时器期限到时，发送TCP就发送一个特殊的报文段， 叫做 探测报文段 。这个报文段只有一个字节的数据。它有一个序号，但它的序号永远不需要确认；甚至在计算对其他部分的数据的确认时该序号也被忽略。探测报文段提醒对端：确认已丢失，必须重传。<br>3)    保活计时器<br>保活计时器使用在某些实现中，用来防止在两个TCP之间的连接出现长时期的空闲。假定客户打开了到服务器的连接，传送了一些数据，然后就保持静默了。也许这个客户出故障了。在这种情况下，这个连接将永远地处理打开状态。<br>4)    时间等待计时器<br>时间等待计时器是在连接终止期间使用的。当TCP关闭一个连接时，它并不认为这个连接马上就真正地关闭了。在时间等待期间中，连接还处于一种中间过渡状态。这就可以使重复的FIN报文段（如果有的话）可以到达目的站因而可将其丢弃。这个计时器的值通常设置为一个报文段的寿命期待值的两倍。</p>\n<h2 id=\"TCP可靠传输\"><a href=\"#TCP可靠传输\" class=\"headerlink\" title=\"TCP可靠传输\"></a>TCP可靠传输</h2><p><strong>如何保证TCP的可靠传输?</strong><br><strong>1.    序号</strong><br>TCP首部的序号字段用来保证数据能有序提交给应用层，TCP把数据看成无结构的有序的字节流。数据流中的每一个字节都编上一个序号字段的值是指本报文段所发送的数据的第一个字节序号。<br><strong>2.    确认</strong><br>TCP首部的确认号是期望收到对方的下一个报文段的数据的第一个字节的序号；<br><strong>3.    重传</strong><br>超时重传<br>冗余ACK重传<br><strong>4.    流量控制</strong><br>TCP采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。<br>发送窗口在连接建立时由双方商定。但在通信的过程中，接收端可根据自己的资源情况，随时动态地调整对方的发送窗口上限值(可增大或减小)。<br><strong>窗口</strong><br>    接受窗口rwnd，接收端缓冲区大小。接收端将此窗口值放在 TCP 报文的首部中的窗口字段，传送给发送端。<br>    拥塞窗口cwnd，发送缓冲区大小。<br>    发送窗口swnd, 发送窗口的上限值 = Min [rwnd, cwnd]</p>\n<p><strong>5.    拥塞控制</strong><br><strong>6.    流量控制与拥塞控制的区别</strong><br>所谓拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能承受现有的网络负荷。流量控制往往指的是点对点通信量的控制，是个端到端的问题。流量控制所要做的就是控制发送端发送数据的速率，以便使接收端来得及接受。</p>\n<h2 id=\"TCP滑动窗口\"><a href=\"#TCP滑动窗口\" class=\"headerlink\" title=\"TCP滑动窗口\"></a>TCP滑动窗口</h2><p><img src=\"/images/TCPslice_window.png\" alt=\"TCP滑动窗口\"><br>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p>\n<p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p>\n<p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。</p>\n<h2 id=\"TCP流量控制\"><a href=\"#TCP流量控制\" class=\"headerlink\" title=\"TCP流量控制\"></a>TCP流量控制</h2><p>1)    如果发送方把数据发送得过快，接收方可能会来不及接收，这就会造成数据的丢失。TCP的流量控制是利用滑动窗口机制实现的，接收方在返回的ACK中会包含自己的接收窗口的大小，以控制发送方的数据发送。<br>2)    当某个ACK报文丢失了，就会出现A等待B确认，并且B等待A发送数据的死锁状态。为了解决这种问题，TCP引入了持续计时器（Persistence timer），当A收到rwnd=0时，就启用该计时器，时间到了则发送一个1字节的探测报文，询问B是很忙还是上个ACK丢失了，然后B回应自身的接收窗口大小，返回仍为0（A重设持续计时器继续等待）或者会重发rwnd=x。</p>\n<h2 id=\"TCP拥塞控制\"><a href=\"#TCP拥塞控制\" class=\"headerlink\" title=\"TCP拥塞控制\"></a>TCP拥塞控制</h2><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。<br><img src=\"/images/TCPcontrol1.png\" alt=\"TCP拥塞控制\"><br>TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</p>\n<p>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p>\n<p>为了便于讨论，做如下假设：</p>\n<p>接收方有足够大的接收缓存，因此不会发生流量控制；<br>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。<br><strong>1.    慢开始</strong><br>发送方维持一个叫做拥塞窗口cwnd（congestion window）的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口，另外考虑到接受方的接收能力，发送窗口可能小于拥塞窗口。慢开始算法的思路就是，不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。<br>当然收到单个确认但此确认多个数据报的时候就加相应的数值。所以一次传输轮次之后拥塞窗口就加倍。这就是乘法增长，和后面的拥塞避免算法的加法增长比较。<br>为了防止cwnd增长过大引起网络拥塞，还需设置一个慢开始门限ssthresh状态变量。ssthresh的用法如下：<br>当cwnd<ssthresh时，使用慢开始算法。\n当cwnd>ssthresh时，改用拥塞避免算法。<br>当cwnd=ssthresh时，慢开始与拥塞避免算法任意。<br>拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口按线性规律缓慢增长。<br>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。如下图：<br><img src=\"/images/TCPcontrol2.png\" alt=\"TCP慢开始\"><br><strong>2.    快重传和快恢复</strong><br>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。<br>快重传配合使用的还有快恢复算法，有以下两个要点:<br>①当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。<br>②考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。如下图：</p>\n<p><img src=\"/images/TCPcontrol3.png\" alt=\"TCP快重传\"></p>\n<h2 id=\"time-wait与close-wait\"><a href=\"#time-wait与close-wait\" class=\"headerlink\" title=\"time_wait与close_wait\"></a>time_wait与close_wait</h2><h3 id=\"time-wait\"><a href=\"#time-wait\" class=\"headerlink\" title=\"time_wait\"></a>time_wait</h3><p><strong>1.time_wait与close_wait，time_wait状态持续多长时间？为什么会有time_wait状态？</strong><br>1)    time_wait另一边已经初始化一个释放，close_wait连接一端被动关闭；<br>2)    首先调用close()发起主动关闭的一方，在发送最后一个ACK之后会进入time_wait的状态，也就说该发送方会保持2MSL时间之后才会回到初始状态。MSL指的是数据包在网络中的最大生存时间。产生这种结果使得这个TCP连接在2MSL连接等待期间，定义这个连接的四元组（客户端IP地址和端口，服务端IP地址和端口号）不能被使用。<br>3)    为什么存在time_wait</p>\n<pre><code>(1) 为实现TCP全双工连接的可靠释放\nTCP协议在关闭连接的四次握手过程中，最终的ACK是由主动关闭连接的一端（后面统称A端）发出的，如果这个ACK丢失，对方（后面统称B端）将重发出最终的FIN，因此A端必须维护状态信息（TIME_WAIT）允许它重发最终的ACK。如果A端不维持TIME_WAIT状态，而是处于CLOSED 状态，那么A端将响应RST分节，B端收到后将此分节解释成一个错误。因而，要实现TCP全双工连接的正常终止，必须处理终止过程中四个分节任何一个分节的丢失情况，主动关闭连接的A端必须维持TIME_WAIT状态。\n由TCP状态变迁图可知，假设发起主动关闭的一方（client）最后发送的ACK在网络中丢失，由于TCP协议的重传机制，执行被动关闭的一方（server）将会重发其FIN，在该FIN到达client之前，client必须维护这条连接状态，也就说这条TCP连接所对应的资源（client方的local_ip,local_port）不能被立即释放或重新分配，直到另一方重发的FIN达到之后，client重发ACK后，经过2MSL时间周期没有再收到另一方的FIN之后，该TCP连接才能恢复初始的CLOSED状态。如果主动关闭一方不维护这样一个TIME_WAIT状态，那么当被动关闭一方重发的FIN到达时，主动关闭一方的TCP传输层会用RST包响应对方，这会被对方认为是有错误发生，然而这事实上只是正常的关闭连接过程，并非异常。\n\n(2) 为使旧的数据包在网络因过期而消失\nTCP segment 可能由于路由器异常而“迷途”，在迷途期间，TCP发送端可能因确认超时而重发这个segment，迷途的segment在路由器修复后也会被送到最终目的地，这个迟到的迷途segment到达时可能会引起问题。在关闭“前一个连接”之后，马上又重新建立起一个相同的IP和端口之间的“新连接”，“前一个连接”的迷途重复分组在“前一个连接”终止后到达，而被“新连接”收到了。为了避免这个情况，TCP协议不允许处于TIME_WAIT状态的连接启动一个新的可用连接，因为TIME_WAIT状态持续2MSL，就可以保证当成功建立一个新TCP连接的时候，来自旧连接重复分组已经在网络中消逝。\n为说明这个问题，我们先假设TCP协议中不存在TIME_WAIT状态的限制，再假设当前有一条TCP连接：(local_ip, local_port, remote_ip,remote_port)，因某些原因，我们先关闭，接着很快以相同的四元组建立一条新连接。本文前面介绍过，TCP连接由四元组唯一标识，因此，在我们假设的情况中，TCP协议栈是无法区分前后两条TCP连接的不同的，在它看来，这根本就是同一条连接，中间先释放再建立的过程对其来说是“感知”不到的。这样就可能发生这样的情况：前一条TCP连接由local peer发送的数据到达remote peer后，会被该remot peer的TCP传输层当做当前TCP连接的正常数据接收并向上传递至应用层（而事实上，在我们假设的场景下，这些旧数据到达remote peer前，旧连接已断开且一条由相同四元组构成的新TCP连接已建立，因此，这些旧数据是不应该被向上传递至应用层的），从而引起数据错乱进而导致各种无法预知的诡异现象。作为一种可靠的传输协议，TCP必须在协议层面考虑并避免这种情况的发生，这正是TIME_WAIT状态存在的第2个原因。\n</code></pre><p>4)    如果time_wait维持的时间过长，主动关闭连接端迟迟无法关闭连接，占用程序资源。<br>5)    如果服务器程序TCP连接一直保持在CLOSE_WAIT状态，那么只有一种情况，就是在对方关闭连接之后服务器程序自己没有进一步发出ack信号。换句话说，就是在对方连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着。<br>6)    time_wait状态如何避免<br>首先服务器可以设置SO_REUSEADDR套接字选项来通知内核，如果端口忙，但TCP连接位于TIME_WAIT状态时可以重用端口。在一个非常有用的场景就是，如果你的服务器程序停止后想立即重启，而新的套接字依旧希望使用同一端口，此时SO_REUSEADDR选项就可以避免TIME_WAIT状态。<br>1)  Time_wait为什么是2MSL的时间长度<br>TIME_WAIT的状态是为了等待连接上所有的分组的消失。单纯的想法，发送端只需要等待一个MSL就足够了。这是不够的，假设现在一个MSL的时候，接收端需要发送一个应答，这时候，我们也必须等待这个应答的消失，这个应答的消失也是需要一个MSL，所以我们需要等待2MSL。</p>\n<h3 id=\"close-wait\"><a href=\"#close-wait\" class=\"headerlink\" title=\"close_wait\"></a>close_wait</h3><p>1)    产生原因<br>在被动关闭连接情况下，在已经接收到FIN，但是还没有发送自己的FIN的时刻，连接处于CLOSE_WAIT状态。通常来讲，CLOSE_WAIT状态的持续时间应该很短，正如SYN_RCVD状态。但是在一些特殊情况下，就会出现连接长时间处于CLOSE_WAIT状态的情况。出现大量close_wait的现象，主要原因是某种情况下对方关闭了socket链接，但是我方忙与读或者写，没有关闭连接。代码需要判断socket，一旦读到0，断开连接，read返回负，检查一下errno，如果不是AGAIN，就断开连接。对方关闭连接之后服务器程序自己没有进一步发出ack信号。换句话说，就是在对方连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着。<br>2)    解决方法<br>要检测出对方已经关闭的socket，然后关闭它。</p>\n<h2 id=\"socket编程\"><a href=\"#socket编程\" class=\"headerlink\" title=\"socket编程\"></a>socket编程</h2><p><strong>TCP过程：</strong><br>客户端：<br>　　1、创建socket<br>　　2、绑定ip、端口号到socket字<br>　　3、连接服务器，connect()<br>　　4、收发数据，send()、recv()<br>　　5、关闭连接<br>服务器端：<br>　　1、创建socket字<br>　　2、设置socket属性<br>　　3、绑定ip与端口号<br>　　4、开启监听，listen()<br>　　5、接受发送端的连接accept()<br>　　6、收发数据send()、recv()<br>　　7、关闭网络连接<br>　　8、关闭监听</p>\n<p>对应关系：<br>客户端的connect()指向服务器端的accept()<br>客户端、服务器端的send()/recv()是双向箭头的关系。</p>\n<p><strong>UDP过程：</strong></p>\n<p>客户端：<br>　　1、创建一个socket，用函数socket()；<br>　　2、设置socket属性，用函数setsockopt();<em> 可选<br>　　3、绑定IP地址、端口等信息到socket上，用函数bind();</em> 可选<br>　　4、设置对方的IP地址和端口等属性;<br>　　5、发送数据，用函数sendto();<br>　　6、关闭网络连接；<br>服务器端：<br>　　1、创建一个socket，用函数socket()；<br>　　2、设置socket属性，用函数setsockopt();* 可选<br>　　3、绑定IP地址、端口等信息到socket上，用函数bind();<br>　　4、循环接收数据，用函数recvfrom();<br>　　5、关闭网络连接； </p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.cnblogs.com/Anker/p/6210840.html\">1.TCP与UDP在socket编程中的区别</a></p>\n<p><a href=\"https://leetcode-cn.com/leetbook/read/tech-interview-cookbook/oeo4q5/\">2.校招基础知识详解-计算机网络传输层协议</a></p>"},{"title":"机器学习：支持向量机（SVM）课堂实践","date":"2022-06-04T01:43:37.000Z","_content":"这是在学习《机器学习基础》课程的支持向量机这一章时，做的课堂实践内容，详见《机器学习（周立华）》第六章，记录一下以便回顾。\n数据集使用 [Mnist-image数据集](http://yann.lecun.com/exdb/mnist/)\n完整代码见github：[SVM课程实践](https://github.com/KennanYang/mechine-learning/blob/master/week7_SVM.ipynb)\n\n<!--more-->\n\n## 机器学习算法基础\n###\tSVM\n在这个实验中，**支持向量机（Support Vector Macchine,简称SVM）** 被用来解决分类问题。目的是找出区间最大的划分超平面。SVM的基本类型是\n![](https://pic.imgdb.cn/item/62a93fc309475431297f94bc.png)\n对于高维特征空间，可以通过训练样本的 **核函数（Kernel）** 展开模型的最优解，获得支持向量展开\n![](https://pic.imgdb.cn/item/62a93fc309475431297f9466.png)\n###  核函数\n#### 1.线性核\n线性核（Linear Kernel）的实现使用sklearn库中SVC函数的默认参数 ***(' linear ')*** 。\n线性核函数是：\n![](https://pic.imgdb.cn/item/62a93fc309475431297f9471.png)\n#### 2.径向基核\n径向基核函数(Radial Basis Function,简称RBF，也叫高斯核)的实现也使用了sklearn库中SVC函数的默认参数 ***(' rbf ')*** 。\nRBF核函数为：\n![](https://pic.imgdb.cn/item/62a93fc309475431297f9486.png)\n \n#### 3.自定义核函数\n利用 **核函数的性质** 构造了一个新的核函数: 两个核函数的直积也是一个核函数。\nК1 是线性核，К2 是拉普拉斯核：\n![](https://pic.imgdb.cn/item/62a945890947543129873256.png)\n\n自定义一个核函数： К1 ⊗ К2.\nК1和К2的内核函数是通过自己编写的python函数实现的，在径向基和线性核的编程过程中展示了更多的细节。\n![](https://pic.imgdb.cn/item/62a94252094754312983607a.png)\n### python工具包\nPython的scikit-learn库有SVC工具包，可以自定义以下参数。\n***C: float, default=1.0***\n-正则化参数\n***Kernel {‘linear’, ‘poly’, ‘rbf’, ‘sigmoid’, ‘precomputed’}, default=’rbf’***\n***Degree: int, default=3***\n-Degree是多项式核函数 ***(' poly ')*** 的阶数，其他核基本忽略该参数。\n有很多参数，但在本次实验中，只修改了核函数，其他参数使用默认值。\n\n##\t实验结果展示\nJupyterLab的python程序运行结果：\n![](https://pic.imgdb.cn/item/62a93fc309475431297f9495.png)\n\n从结果来看:\n首先，展示测试图像。每个标签显示三张图片，按照000-999的矩阵输出，对应的数字如图所示。\n然后分别用 **线性核函数、径向基核函数、自定义核函数** 三种核函数构造SVM，用训练集进行模型训练，用测试集衡量识别精度，输出识别准确率评价指标按顺序显示。\nps.从结果看，自定义核并不适合这个任务。\n\n## 参考资料\n1.Mnist-image数据集下载: http://yann.lecun.com/exdb/mnist/\n\n2.scikit-learn库的安装和SVC的API: \nhttps://scikit-learn.org/stable/index.html\n\n3.《机器学习（周立华）》（西瓜书）\n","source":"_posts/007-SVM.md","raw":"---\ntitle: 机器学习：支持向量机（SVM）课堂实践\ndate: 2022-06-04 09:43:37\ncategories: 机器学习\ntags:\n- 机器学习\n- python\n---\n这是在学习《机器学习基础》课程的支持向量机这一章时，做的课堂实践内容，详见《机器学习（周立华）》第六章，记录一下以便回顾。\n数据集使用 [Mnist-image数据集](http://yann.lecun.com/exdb/mnist/)\n完整代码见github：[SVM课程实践](https://github.com/KennanYang/mechine-learning/blob/master/week7_SVM.ipynb)\n\n<!--more-->\n\n## 机器学习算法基础\n###\tSVM\n在这个实验中，**支持向量机（Support Vector Macchine,简称SVM）** 被用来解决分类问题。目的是找出区间最大的划分超平面。SVM的基本类型是\n![](https://pic.imgdb.cn/item/62a93fc309475431297f94bc.png)\n对于高维特征空间，可以通过训练样本的 **核函数（Kernel）** 展开模型的最优解，获得支持向量展开\n![](https://pic.imgdb.cn/item/62a93fc309475431297f9466.png)\n###  核函数\n#### 1.线性核\n线性核（Linear Kernel）的实现使用sklearn库中SVC函数的默认参数 ***(' linear ')*** 。\n线性核函数是：\n![](https://pic.imgdb.cn/item/62a93fc309475431297f9471.png)\n#### 2.径向基核\n径向基核函数(Radial Basis Function,简称RBF，也叫高斯核)的实现也使用了sklearn库中SVC函数的默认参数 ***(' rbf ')*** 。\nRBF核函数为：\n![](https://pic.imgdb.cn/item/62a93fc309475431297f9486.png)\n \n#### 3.自定义核函数\n利用 **核函数的性质** 构造了一个新的核函数: 两个核函数的直积也是一个核函数。\nК1 是线性核，К2 是拉普拉斯核：\n![](https://pic.imgdb.cn/item/62a945890947543129873256.png)\n\n自定义一个核函数： К1 ⊗ К2.\nК1和К2的内核函数是通过自己编写的python函数实现的，在径向基和线性核的编程过程中展示了更多的细节。\n![](https://pic.imgdb.cn/item/62a94252094754312983607a.png)\n### python工具包\nPython的scikit-learn库有SVC工具包，可以自定义以下参数。\n***C: float, default=1.0***\n-正则化参数\n***Kernel {‘linear’, ‘poly’, ‘rbf’, ‘sigmoid’, ‘precomputed’}, default=’rbf’***\n***Degree: int, default=3***\n-Degree是多项式核函数 ***(' poly ')*** 的阶数，其他核基本忽略该参数。\n有很多参数，但在本次实验中，只修改了核函数，其他参数使用默认值。\n\n##\t实验结果展示\nJupyterLab的python程序运行结果：\n![](https://pic.imgdb.cn/item/62a93fc309475431297f9495.png)\n\n从结果来看:\n首先，展示测试图像。每个标签显示三张图片，按照000-999的矩阵输出，对应的数字如图所示。\n然后分别用 **线性核函数、径向基核函数、自定义核函数** 三种核函数构造SVM，用训练集进行模型训练，用测试集衡量识别精度，输出识别准确率评价指标按顺序显示。\nps.从结果看，自定义核并不适合这个任务。\n\n## 参考资料\n1.Mnist-image数据集下载: http://yann.lecun.com/exdb/mnist/\n\n2.scikit-learn库的安装和SVC的API: \nhttps://scikit-learn.org/stable/index.html\n\n3.《机器学习（周立华）》（西瓜书）\n","slug":"007-SVM","published":1,"updated":"2025-07-13T06:57:17.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3ql000fu4vocp0j3e6m","content":"<p>这是在学习《机器学习基础》课程的支持向量机这一章时，做的课堂实践内容，详见《机器学习（周立华）》第六章，记录一下以便回顾。<br>数据集使用 <a href=\"http://yann.lecun.com/exdb/mnist/\">Mnist-image数据集</a><br>完整代码见github：<a href=\"https://github.com/KennanYang/mechine-learning/blob/master/week7_SVM.ipynb\">SVM课程实践</a></p>\n<span id=\"more\"></span>\n<h2 id=\"机器学习算法基础\"><a href=\"#机器学习算法基础\" class=\"headerlink\" title=\"机器学习算法基础\"></a>机器学习算法基础</h2><h3 id=\"SVM\"><a href=\"#SVM\" class=\"headerlink\" title=\"SVM\"></a>SVM</h3><p>在这个实验中，<strong>支持向量机（Support Vector Macchine,简称SVM）</strong> 被用来解决分类问题。目的是找出区间最大的划分超平面。SVM的基本类型是<br><img src=\"https://pic.imgdb.cn/item/62a93fc309475431297f94bc.png\" alt=\"\"><br>对于高维特征空间，可以通过训练样本的 <strong>核函数（Kernel）</strong> 展开模型的最优解，获得支持向量展开<br><img src=\"https://pic.imgdb.cn/item/62a93fc309475431297f9466.png\" alt=\"\"></p>\n<h3 id=\"核函数\"><a href=\"#核函数\" class=\"headerlink\" title=\"核函数\"></a>核函数</h3><h4 id=\"1-线性核\"><a href=\"#1-线性核\" class=\"headerlink\" title=\"1.线性核\"></a>1.线性核</h4><p>线性核（Linear Kernel）的实现使用sklearn库中SVC函数的默认参数 <strong><em>(‘ linear ‘)</em></strong> 。<br>线性核函数是：<br><img src=\"https://pic.imgdb.cn/item/62a93fc309475431297f9471.png\" alt=\"\"></p>\n<h4 id=\"2-径向基核\"><a href=\"#2-径向基核\" class=\"headerlink\" title=\"2.径向基核\"></a>2.径向基核</h4><p>径向基核函数(Radial Basis Function,简称RBF，也叫高斯核)的实现也使用了sklearn库中SVC函数的默认参数 <strong><em>(‘ rbf ‘)</em></strong> 。<br>RBF核函数为：<br><img src=\"https://pic.imgdb.cn/item/62a93fc309475431297f9486.png\" alt=\"\"></p>\n<h4 id=\"3-自定义核函数\"><a href=\"#3-自定义核函数\" class=\"headerlink\" title=\"3.自定义核函数\"></a>3.自定义核函数</h4><p>利用 <strong>核函数的性质</strong> 构造了一个新的核函数: 两个核函数的直积也是一个核函数。<br>К1 是线性核，К2 是拉普拉斯核：<br><img src=\"https://pic.imgdb.cn/item/62a945890947543129873256.png\" alt=\"\"></p>\n<p>自定义一个核函数： К1 ⊗ К2.<br>К1和К2的内核函数是通过自己编写的python函数实现的，在径向基和线性核的编程过程中展示了更多的细节。<br><img src=\"https://pic.imgdb.cn/item/62a94252094754312983607a.png\" alt=\"\"></p>\n<h3 id=\"python工具包\"><a href=\"#python工具包\" class=\"headerlink\" title=\"python工具包\"></a>python工具包</h3><p>Python的scikit-learn库有SVC工具包，可以自定义以下参数。<br><strong><em>C: float, default=1.0</em></strong><br>-正则化参数<br><strong><em>Kernel {‘linear’, ‘poly’, ‘rbf’, ‘sigmoid’, ‘precomputed’}, default=’rbf’</em></strong><br><strong><em>Degree: int, default=3</em></strong><br>-Degree是多项式核函数 <strong><em>(‘ poly ‘)</em></strong> 的阶数，其他核基本忽略该参数。<br>有很多参数，但在本次实验中，只修改了核函数，其他参数使用默认值。</p>\n<h2 id=\"实验结果展示\"><a href=\"#实验结果展示\" class=\"headerlink\" title=\"实验结果展示\"></a>实验结果展示</h2><p>JupyterLab的python程序运行结果：<br><img src=\"https://pic.imgdb.cn/item/62a93fc309475431297f9495.png\" alt=\"\"></p>\n<p>从结果来看:<br>首先，展示测试图像。每个标签显示三张图片，按照000-999的矩阵输出，对应的数字如图所示。<br>然后分别用 <strong>线性核函数、径向基核函数、自定义核函数</strong> 三种核函数构造SVM，用训练集进行模型训练，用测试集衡量识别精度，输出识别准确率评价指标按顺序显示。<br>ps.从结果看，自定义核并不适合这个任务。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>1.Mnist-image数据集下载: <a href=\"http://yann.lecun.com/exdb/mnist/\">http://yann.lecun.com/exdb/mnist/</a></p>\n<p>2.scikit-learn库的安装和SVC的API:<br><a href=\"https://scikit-learn.org/stable/index.html\">https://scikit-learn.org/stable/index.html</a></p>\n<p>3.《机器学习（周立华）》（西瓜书）</p>\n","site":{"data":{}},"excerpt":"<p>这是在学习《机器学习基础》课程的支持向量机这一章时，做的课堂实践内容，详见《机器学习（周立华）》第六章，记录一下以便回顾。<br>数据集使用 <a href=\"http://yann.lecun.com/exdb/mnist/\">Mnist-image数据集</a><br>完整代码见github：<a href=\"https://github.com/KennanYang/mechine-learning/blob/master/week7_SVM.ipynb\">SVM课程实践</a></p>","more":"<h2 id=\"机器学习算法基础\"><a href=\"#机器学习算法基础\" class=\"headerlink\" title=\"机器学习算法基础\"></a>机器学习算法基础</h2><h3 id=\"SVM\"><a href=\"#SVM\" class=\"headerlink\" title=\"SVM\"></a>SVM</h3><p>在这个实验中，<strong>支持向量机（Support Vector Macchine,简称SVM）</strong> 被用来解决分类问题。目的是找出区间最大的划分超平面。SVM的基本类型是<br><img src=\"https://pic.imgdb.cn/item/62a93fc309475431297f94bc.png\" alt=\"\"><br>对于高维特征空间，可以通过训练样本的 <strong>核函数（Kernel）</strong> 展开模型的最优解，获得支持向量展开<br><img src=\"https://pic.imgdb.cn/item/62a93fc309475431297f9466.png\" alt=\"\"></p>\n<h3 id=\"核函数\"><a href=\"#核函数\" class=\"headerlink\" title=\"核函数\"></a>核函数</h3><h4 id=\"1-线性核\"><a href=\"#1-线性核\" class=\"headerlink\" title=\"1.线性核\"></a>1.线性核</h4><p>线性核（Linear Kernel）的实现使用sklearn库中SVC函数的默认参数 <strong><em>(‘ linear ‘)</em></strong> 。<br>线性核函数是：<br><img src=\"https://pic.imgdb.cn/item/62a93fc309475431297f9471.png\" alt=\"\"></p>\n<h4 id=\"2-径向基核\"><a href=\"#2-径向基核\" class=\"headerlink\" title=\"2.径向基核\"></a>2.径向基核</h4><p>径向基核函数(Radial Basis Function,简称RBF，也叫高斯核)的实现也使用了sklearn库中SVC函数的默认参数 <strong><em>(‘ rbf ‘)</em></strong> 。<br>RBF核函数为：<br><img src=\"https://pic.imgdb.cn/item/62a93fc309475431297f9486.png\" alt=\"\"></p>\n<h4 id=\"3-自定义核函数\"><a href=\"#3-自定义核函数\" class=\"headerlink\" title=\"3.自定义核函数\"></a>3.自定义核函数</h4><p>利用 <strong>核函数的性质</strong> 构造了一个新的核函数: 两个核函数的直积也是一个核函数。<br>К1 是线性核，К2 是拉普拉斯核：<br><img src=\"https://pic.imgdb.cn/item/62a945890947543129873256.png\" alt=\"\"></p>\n<p>自定义一个核函数： К1 ⊗ К2.<br>К1和К2的内核函数是通过自己编写的python函数实现的，在径向基和线性核的编程过程中展示了更多的细节。<br><img src=\"https://pic.imgdb.cn/item/62a94252094754312983607a.png\" alt=\"\"></p>\n<h3 id=\"python工具包\"><a href=\"#python工具包\" class=\"headerlink\" title=\"python工具包\"></a>python工具包</h3><p>Python的scikit-learn库有SVC工具包，可以自定义以下参数。<br><strong><em>C: float, default=1.0</em></strong><br>-正则化参数<br><strong><em>Kernel {‘linear’, ‘poly’, ‘rbf’, ‘sigmoid’, ‘precomputed’}, default=’rbf’</em></strong><br><strong><em>Degree: int, default=3</em></strong><br>-Degree是多项式核函数 <strong><em>(‘ poly ‘)</em></strong> 的阶数，其他核基本忽略该参数。<br>有很多参数，但在本次实验中，只修改了核函数，其他参数使用默认值。</p>\n<h2 id=\"实验结果展示\"><a href=\"#实验结果展示\" class=\"headerlink\" title=\"实验结果展示\"></a>实验结果展示</h2><p>JupyterLab的python程序运行结果：<br><img src=\"https://pic.imgdb.cn/item/62a93fc309475431297f9495.png\" alt=\"\"></p>\n<p>从结果来看:<br>首先，展示测试图像。每个标签显示三张图片，按照000-999的矩阵输出，对应的数字如图所示。<br>然后分别用 <strong>线性核函数、径向基核函数、自定义核函数</strong> 三种核函数构造SVM，用训练集进行模型训练，用测试集衡量识别精度，输出识别准确率评价指标按顺序显示。<br>ps.从结果看，自定义核并不适合这个任务。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>1.Mnist-image数据集下载: <a href=\"http://yann.lecun.com/exdb/mnist/\">http://yann.lecun.com/exdb/mnist/</a></p>\n<p>2.scikit-learn库的安装和SVC的API:<br><a href=\"https://scikit-learn.org/stable/index.html\">https://scikit-learn.org/stable/index.html</a></p>\n<p>3.《机器学习（周立华）》（西瓜书）</p>"},{"title":"HTTP协议详解","date":"2022-04-30T02:46:33.000Z","_content":"\nHTTP协议是网络编程的基础知识，后端开发应当熟练掌握，但是相关内容较多。\n\n之前在学校学的都忘记了，最近为了找工作又复习起来，参考了力扣上的教程和一些网上资料，做一个总结，并补充一些常问的八股方便回顾。\n\n[校招基础知识详解-HTTP](https://leetcode.cn/leetbook/read/tech-interview-cookbook/o9ga26/)\n\n\n<!--more-->\n## URL解析过程\n当输入网址时会发生什么呢？提到HTTP就不能不先了解一下URL的解析过程。\n\n### URL\n\n在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫**URL（Uniform Resource Locator,统一资源定位器）**，它是WWW的统一资源定位标志，就是指网络地址。\n\n### 浏览器输入地址后发生什么？\n\n1、域名解析： 浏览器获得URL地址，向操作系统请求该URL对应的IP地址，操作系统查询DNS（首先查询本地HOST文件，没有则查询网络）获得对应的IP地址\n\n解释：\n\n把URL分割成几个部分：协议、网络地址、资源路径\n\n协议：指从该计算机获取资源的方式，常见的是HTTP、FTP\n\n网络地址：可以是域名或者是IP地址，也可以包括端口号，如果不注明端口号，默认是80端口\n\n如果地址不是一个IP地址，则需要通过DNS（域名系统）将该地址解析成IP地址，IP地址对应着网络上的一台计算机，DNS服务器本身也有IP，你的网络设置包含DNS服务器的IP，例如，www.abc.com不是一个IP，则需要向DNS询问请求www.abc.com对应的IP，获得IP，在这个过程中，你的电脑直接询问DNS服务器可能没有发现www.abc.com对应的IP，就会向它的上级服务器询问，这样依次一层层向上级找，最高可达根节点，直到找到或者全部找不到为止\n\n端口号就相当于银行的窗口，不同的窗口负责不同的服务，如果输入www.abc.com:8080/，则表示不使用默认的80端口，而使用指定的8080端口\n\n2、确认好了IP和端口号，则可以向该IP地址对应的服务器的该端口号发起TCP连接请求\n\n3、服务器接收到TCP连接请求后，回复可以连接请求，\n\n4、浏览器收到回传的数据后，还会向服务器发送数据包，表示三次握手结束\n\n5、三次握手成功后，开始通讯，根据HTTP协议的要求，组织一个请求的数据包，里面包含请求的资源路径、你的身份信息等。\n\n例如，www.abc.com/images/1/表示的资源路径是images/1/，发送后，服务器响应请求，将数据返回给浏览器，数据可以是根据HTML协议组织的网页，里面包含页面的布局、文字等等，也可以是图片或者脚本程序等，如果资源路径指定的资源不存在，服务器就会返回404错误，如果返回的是一个页面，则根据页面里的一些外链URL地址，重复上述步骤，再次获取\n\n6、渲染页面，并开始响应用户的操作\n\n7、窗口关闭时，浏览器终止与服务器的连接\n\n\n\n## HTTP基础\n\n\n**超文本传输协议（Hyper Text Transfer Protocol，HTTP）** 是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。\n\n关于HTTP1.1协议的具体内容可以参考[RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2)。 \n\n\n### 1. 报文格式\n客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。\n\n如下图所示方式可打开HTTP报文查看内容。\n[http协议以及如何在谷歌控制台查看通信报文](https://blog.csdn.net/x1037490413/article/details/117704060)\n\n上方为请求报文解析内容，下方为响应报文内容。\n\n![图1. 一个HTTP报文](https://pic.imgdb.cn/item/629440300947543129839d01.png)\n\n**1.1 请求报文格式如下：**\n\n+ 第一行是包含了请求方法、URL、协议版本；\n+ 接下来的多行都是请求首部 Header，每个首部都有一个首部名称，以及对应的值。\n+ 一个空行用来分隔首部和内容主体 Body\n+ 最后是请求的内容主体\n\n```http\nGET http://www.example.com/ HTTP/1.1\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\nCache-Control: max-age=0\n\n作者：CyC2018\n链接：https://leetcode.cn/leetbook/read/tech-interview-cookbook/orse6h/\n来源：力扣（LeetCode）\n```\n\n\n**1.2 应答报文格式如下：**\n\n+ 第一行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了，如图1\n+ 接下来多行也是首部内容\n+ 一个空行分隔首部和内容主体\n+ 最后是响应的内容主体\n\n### 2. HTTP 方法\n\n**GET**\n\n获取资源\n\n**HEAD**\n\n获取报文首部，和 GET 方法类似，但是不返回报文实体主体部分。\n\n主要用于确认 URL 的有效性以及资源更新的日期时间等。\n\n**POST**\n\n传输实体主体\n\nPOST 主要用来传输数据，而 GET 主要用来获取资源。\n\n<font color = #888888>\n\n*GET和POST的区别？*\n1)\t后退按钮或刷新，Get无害，post数据会被重新提交；\n2)\tGet所使用的URL可以被设置为书签，而post不可以；\n3)\tGet能够被缓存，而post不可以；\n4)\tGet参数保留在浏览器历史中，而post参数不会保留在浏览器历史中；\n5)\t当发生数据时，get方法向URL添加数据，URL的数据长度是受限的，而post没有数据长度限制；\n6)\tGet只允许ASCII编码，而post没有限制；\n7)\tGet安全性没有post安全性好；\n8)\tGet数据在URL中对所有人是可见的，而在post中数据不会显示在URL中。\n9)\tGet产生一个TCP数据包，post产生两个TCP数据包；对于get方式的请求，浏览器会把header和data一并发送出去；对于post，浏览器先发送header再发送data；\n10)\tGET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。\n\n</font>\n\n\n**PUT**\n\n上传文件\n\n由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。\n\n**PATCH**\n\n对资源进行部分修改\n\nPUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。\n\n**DELETE**\n\n删除文件\n\n与 PUT 功能相反，并且同样不带验证机制。\n\n**OPTIONS**\n\n查询支持的方法\n\n查询指定的 URL 能够支持的方法。\n\n会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。\n\n**CONNECT**\n\n要求在与代理服务器通信时建立隧道\n\n使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。\n\n**TRACE**\n\n追踪路径\n\n服务器会将通信路径返回给客户端。\n\n发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。\n\n通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。\n\n### HTTP 状态码\n\n服务器返回的 **响应报文** 中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。\n\n|状态码\t|类别\t|含义\n|:-:|:-:|:-:|\n|1XX\t|Informational（信息性状态码）\t|接收的请求正在处理\n|2XX\t|Success（成功状态码）\t|请求正常处理完毕\n|3XX\t|Redirection（重定向状态码）\t|需要进行附加操作以完成请求\n|4XX\t|Client Error（客户端错误状态码）\t|服务器无法处理请求\n|5XX\t|Server Error（服务器错误状态码）\t|服务器处理请求出错\n\n**1. 1XX 信息**\n\n100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。\n\n**2. 2XX 成功**\n\n200 OK\n\n204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。\n\n206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。\n\n**3. 3XX 重定向**\n\n301 Moved Permanently ：永久性重定向\n\n302 Found ：临时性重定向\n\n303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。\n\n**4. 4XX 客户端错误**\n\n400 Bad Request ：请求报文中存在语法错误。\n\n401 Unauthorized ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。\n\n403 Forbidden ：请求被拒绝。\n\n404 Not Found\n\n**5. 5XX 服务器错误**\n\n500 Internal Server Error ：服务器正在执行请求时发生错误。\n\n503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。\n\n## 参考资料\n[1.百度百科-HTTP](https://baike.baidu.com/item/HTTP/243074?fr=aladdin)\n\n[2.校招基础知识详解-HTTP](https://leetcode.cn/leetbook/read/tech-interview-cookbook/o9ga26/)\n\n[3.rfc2616：3.2.2 http URL](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2)\n\n[4.http协议以及如何在谷歌控制台查看通信报文](https://blog.csdn.net/x1037490413/article/details/117704060)","source":"_posts/006-HTTP-HTTPS.md","raw":"---\ntitle: HTTP协议详解\ndate: 2022-04-30 10:46:33\ncategories: 计算机网络\ntags:\n- 计算机网络\n---\n\nHTTP协议是网络编程的基础知识，后端开发应当熟练掌握，但是相关内容较多。\n\n之前在学校学的都忘记了，最近为了找工作又复习起来，参考了力扣上的教程和一些网上资料，做一个总结，并补充一些常问的八股方便回顾。\n\n[校招基础知识详解-HTTP](https://leetcode.cn/leetbook/read/tech-interview-cookbook/o9ga26/)\n\n\n<!--more-->\n## URL解析过程\n当输入网址时会发生什么呢？提到HTTP就不能不先了解一下URL的解析过程。\n\n### URL\n\n在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫**URL（Uniform Resource Locator,统一资源定位器）**，它是WWW的统一资源定位标志，就是指网络地址。\n\n### 浏览器输入地址后发生什么？\n\n1、域名解析： 浏览器获得URL地址，向操作系统请求该URL对应的IP地址，操作系统查询DNS（首先查询本地HOST文件，没有则查询网络）获得对应的IP地址\n\n解释：\n\n把URL分割成几个部分：协议、网络地址、资源路径\n\n协议：指从该计算机获取资源的方式，常见的是HTTP、FTP\n\n网络地址：可以是域名或者是IP地址，也可以包括端口号，如果不注明端口号，默认是80端口\n\n如果地址不是一个IP地址，则需要通过DNS（域名系统）将该地址解析成IP地址，IP地址对应着网络上的一台计算机，DNS服务器本身也有IP，你的网络设置包含DNS服务器的IP，例如，www.abc.com不是一个IP，则需要向DNS询问请求www.abc.com对应的IP，获得IP，在这个过程中，你的电脑直接询问DNS服务器可能没有发现www.abc.com对应的IP，就会向它的上级服务器询问，这样依次一层层向上级找，最高可达根节点，直到找到或者全部找不到为止\n\n端口号就相当于银行的窗口，不同的窗口负责不同的服务，如果输入www.abc.com:8080/，则表示不使用默认的80端口，而使用指定的8080端口\n\n2、确认好了IP和端口号，则可以向该IP地址对应的服务器的该端口号发起TCP连接请求\n\n3、服务器接收到TCP连接请求后，回复可以连接请求，\n\n4、浏览器收到回传的数据后，还会向服务器发送数据包，表示三次握手结束\n\n5、三次握手成功后，开始通讯，根据HTTP协议的要求，组织一个请求的数据包，里面包含请求的资源路径、你的身份信息等。\n\n例如，www.abc.com/images/1/表示的资源路径是images/1/，发送后，服务器响应请求，将数据返回给浏览器，数据可以是根据HTML协议组织的网页，里面包含页面的布局、文字等等，也可以是图片或者脚本程序等，如果资源路径指定的资源不存在，服务器就会返回404错误，如果返回的是一个页面，则根据页面里的一些外链URL地址，重复上述步骤，再次获取\n\n6、渲染页面，并开始响应用户的操作\n\n7、窗口关闭时，浏览器终止与服务器的连接\n\n\n\n## HTTP基础\n\n\n**超文本传输协议（Hyper Text Transfer Protocol，HTTP）** 是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。\n\n关于HTTP1.1协议的具体内容可以参考[RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2)。 \n\n\n### 1. 报文格式\n客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。\n\n如下图所示方式可打开HTTP报文查看内容。\n[http协议以及如何在谷歌控制台查看通信报文](https://blog.csdn.net/x1037490413/article/details/117704060)\n\n上方为请求报文解析内容，下方为响应报文内容。\n\n![图1. 一个HTTP报文](https://pic.imgdb.cn/item/629440300947543129839d01.png)\n\n**1.1 请求报文格式如下：**\n\n+ 第一行是包含了请求方法、URL、协议版本；\n+ 接下来的多行都是请求首部 Header，每个首部都有一个首部名称，以及对应的值。\n+ 一个空行用来分隔首部和内容主体 Body\n+ 最后是请求的内容主体\n\n```http\nGET http://www.example.com/ HTTP/1.1\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\nCache-Control: max-age=0\n\n作者：CyC2018\n链接：https://leetcode.cn/leetbook/read/tech-interview-cookbook/orse6h/\n来源：力扣（LeetCode）\n```\n\n\n**1.2 应答报文格式如下：**\n\n+ 第一行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了，如图1\n+ 接下来多行也是首部内容\n+ 一个空行分隔首部和内容主体\n+ 最后是响应的内容主体\n\n### 2. HTTP 方法\n\n**GET**\n\n获取资源\n\n**HEAD**\n\n获取报文首部，和 GET 方法类似，但是不返回报文实体主体部分。\n\n主要用于确认 URL 的有效性以及资源更新的日期时间等。\n\n**POST**\n\n传输实体主体\n\nPOST 主要用来传输数据，而 GET 主要用来获取资源。\n\n<font color = #888888>\n\n*GET和POST的区别？*\n1)\t后退按钮或刷新，Get无害，post数据会被重新提交；\n2)\tGet所使用的URL可以被设置为书签，而post不可以；\n3)\tGet能够被缓存，而post不可以；\n4)\tGet参数保留在浏览器历史中，而post参数不会保留在浏览器历史中；\n5)\t当发生数据时，get方法向URL添加数据，URL的数据长度是受限的，而post没有数据长度限制；\n6)\tGet只允许ASCII编码，而post没有限制；\n7)\tGet安全性没有post安全性好；\n8)\tGet数据在URL中对所有人是可见的，而在post中数据不会显示在URL中。\n9)\tGet产生一个TCP数据包，post产生两个TCP数据包；对于get方式的请求，浏览器会把header和data一并发送出去；对于post，浏览器先发送header再发送data；\n10)\tGET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。\n\n</font>\n\n\n**PUT**\n\n上传文件\n\n由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。\n\n**PATCH**\n\n对资源进行部分修改\n\nPUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。\n\n**DELETE**\n\n删除文件\n\n与 PUT 功能相反，并且同样不带验证机制。\n\n**OPTIONS**\n\n查询支持的方法\n\n查询指定的 URL 能够支持的方法。\n\n会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。\n\n**CONNECT**\n\n要求在与代理服务器通信时建立隧道\n\n使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。\n\n**TRACE**\n\n追踪路径\n\n服务器会将通信路径返回给客户端。\n\n发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。\n\n通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。\n\n### HTTP 状态码\n\n服务器返回的 **响应报文** 中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。\n\n|状态码\t|类别\t|含义\n|:-:|:-:|:-:|\n|1XX\t|Informational（信息性状态码）\t|接收的请求正在处理\n|2XX\t|Success（成功状态码）\t|请求正常处理完毕\n|3XX\t|Redirection（重定向状态码）\t|需要进行附加操作以完成请求\n|4XX\t|Client Error（客户端错误状态码）\t|服务器无法处理请求\n|5XX\t|Server Error（服务器错误状态码）\t|服务器处理请求出错\n\n**1. 1XX 信息**\n\n100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。\n\n**2. 2XX 成功**\n\n200 OK\n\n204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。\n\n206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。\n\n**3. 3XX 重定向**\n\n301 Moved Permanently ：永久性重定向\n\n302 Found ：临时性重定向\n\n303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。\n\n**4. 4XX 客户端错误**\n\n400 Bad Request ：请求报文中存在语法错误。\n\n401 Unauthorized ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。\n\n403 Forbidden ：请求被拒绝。\n\n404 Not Found\n\n**5. 5XX 服务器错误**\n\n500 Internal Server Error ：服务器正在执行请求时发生错误。\n\n503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。\n\n## 参考资料\n[1.百度百科-HTTP](https://baike.baidu.com/item/HTTP/243074?fr=aladdin)\n\n[2.校招基础知识详解-HTTP](https://leetcode.cn/leetbook/read/tech-interview-cookbook/o9ga26/)\n\n[3.rfc2616：3.2.2 http URL](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2)\n\n[4.http协议以及如何在谷歌控制台查看通信报文](https://blog.csdn.net/x1037490413/article/details/117704060)","slug":"006-HTTP-HTTPS","published":1,"updated":"2025-07-13T06:57:17.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qm000ju4vo9c4z9436","content":"<p>HTTP协议是网络编程的基础知识，后端开发应当熟练掌握，但是相关内容较多。</p>\n<p>之前在学校学的都忘记了，最近为了找工作又复习起来，参考了力扣上的教程和一些网上资料，做一个总结，并补充一些常问的八股方便回顾。</p>\n<p><a href=\"https://leetcode.cn/leetbook/read/tech-interview-cookbook/o9ga26/\">校招基础知识详解-HTTP</a></p>\n<span id=\"more\"></span>\n<h2 id=\"URL解析过程\"><a href=\"#URL解析过程\" class=\"headerlink\" title=\"URL解析过程\"></a>URL解析过程</h2><p>当输入网址时会发生什么呢？提到HTTP就不能不先了解一下URL的解析过程。</p>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><p>在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫<strong>URL（Uniform Resource Locator,统一资源定位器）</strong>，它是WWW的统一资源定位标志，就是指网络地址。</p>\n<h3 id=\"浏览器输入地址后发生什么？\"><a href=\"#浏览器输入地址后发生什么？\" class=\"headerlink\" title=\"浏览器输入地址后发生什么？\"></a>浏览器输入地址后发生什么？</h3><p>1、域名解析： 浏览器获得URL地址，向操作系统请求该URL对应的IP地址，操作系统查询DNS（首先查询本地HOST文件，没有则查询网络）获得对应的IP地址</p>\n<p>解释：</p>\n<p>把URL分割成几个部分：协议、网络地址、资源路径</p>\n<p>协议：指从该计算机获取资源的方式，常见的是HTTP、FTP</p>\n<p>网络地址：可以是域名或者是IP地址，也可以包括端口号，如果不注明端口号，默认是80端口</p>\n<p>如果地址不是一个IP地址，则需要通过DNS（域名系统）将该地址解析成IP地址，IP地址对应着网络上的一台计算机，DNS服务器本身也有IP，你的网络设置包含DNS服务器的IP，例如，www.abc.com不是一个IP，则需要向DNS询问请求www.abc.com对应的IP，获得IP，在这个过程中，你的电脑直接询问DNS服务器可能没有发现www.abc.com对应的IP，就会向它的上级服务器询问，这样依次一层层向上级找，最高可达根节点，直到找到或者全部找不到为止</p>\n<p>端口号就相当于银行的窗口，不同的窗口负责不同的服务，如果输入www.abc.com:8080/，则表示不使用默认的80端口，而使用指定的8080端口</p>\n<p>2、确认好了IP和端口号，则可以向该IP地址对应的服务器的该端口号发起TCP连接请求</p>\n<p>3、服务器接收到TCP连接请求后，回复可以连接请求，</p>\n<p>4、浏览器收到回传的数据后，还会向服务器发送数据包，表示三次握手结束</p>\n<p>5、三次握手成功后，开始通讯，根据HTTP协议的要求，组织一个请求的数据包，里面包含请求的资源路径、你的身份信息等。</p>\n<p>例如，www.abc.com/images/1/表示的资源路径是images/1/，发送后，服务器响应请求，将数据返回给浏览器，数据可以是根据HTML协议组织的网页，里面包含页面的布局、文字等等，也可以是图片或者脚本程序等，如果资源路径指定的资源不存在，服务器就会返回404错误，如果返回的是一个页面，则根据页面里的一些外链URL地址，重复上述步骤，再次获取</p>\n<p>6、渲染页面，并开始响应用户的操作</p>\n<p>7、窗口关闭时，浏览器终止与服务器的连接</p>\n<h2 id=\"HTTP基础\"><a href=\"#HTTP基础\" class=\"headerlink\" title=\"HTTP基础\"></a>HTTP基础</h2><p><strong>超文本传输协议（Hyper Text Transfer Protocol，HTTP）</strong> 是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。</p>\n<p>关于HTTP1.1协议的具体内容可以参考<a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2\">RFC 2616</a>。 </p>\n<h3 id=\"1-报文格式\"><a href=\"#1-报文格式\" class=\"headerlink\" title=\"1. 报文格式\"></a>1. 报文格式</h3><p>客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。</p>\n<p>如下图所示方式可打开HTTP报文查看内容。<br><a href=\"https://blog.csdn.net/x1037490413/article/details/117704060\">http协议以及如何在谷歌控制台查看通信报文</a></p>\n<p>上方为请求报文解析内容，下方为响应报文内容。</p>\n<p><img src=\"https://pic.imgdb.cn/item/629440300947543129839d01.png\" alt=\"图1. 一个HTTP报文\"></p>\n<p><strong>1.1 请求报文格式如下：</strong></p>\n<ul>\n<li>第一行是包含了请求方法、URL、协议版本；</li>\n<li>接下来的多行都是请求首部 Header，每个首部都有一个首部名称，以及对应的值。</li>\n<li>一个空行用来分隔首部和内容主体 Body</li>\n<li>最后是请求的内容主体</li>\n</ul>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">http://www.example.com/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span><span class=\"punctuation\">: </span>zh-CN,zh;q=0.9,en;q=0.8</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span><span class=\"punctuation\">: </span>max-age=0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-awk\">作者：CyC2018</span></span><br><span class=\"line\"><span class=\"language-awk\">链接：https:<span class=\"regexp\">//</span>leetcode.cn<span class=\"regexp\">/leetbook/</span>read<span class=\"regexp\">/tech-interview-cookbook/</span>orse6h/</span></span><br><span class=\"line\"><span class=\"language-awk\">来源：力扣（LeetCode）</span></span><br></pre></td></tr></table></figure>\n<p><strong>1.2 应答报文格式如下：</strong></p>\n<ul>\n<li>第一行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了，如图1</li>\n<li>接下来多行也是首部内容</li>\n<li>一个空行分隔首部和内容主体</li>\n<li>最后是响应的内容主体</li>\n</ul>\n<h3 id=\"2-HTTP-方法\"><a href=\"#2-HTTP-方法\" class=\"headerlink\" title=\"2. HTTP 方法\"></a>2. HTTP 方法</h3><p><strong>GET</strong></p>\n<p>获取资源</p>\n<p><strong>HEAD</strong></p>\n<p>获取报文首部，和 GET 方法类似，但是不返回报文实体主体部分。</p>\n<p>主要用于确认 URL 的有效性以及资源更新的日期时间等。</p>\n<p><strong>POST</strong></p>\n<p>传输实体主体</p>\n<p>POST 主要用来传输数据，而 GET 主要用来获取资源。</p>\n<font color = #888888>\n\n*GET和POST的区别？*\n1)    后退按钮或刷新，Get无害，post数据会被重新提交；\n2)    Get所使用的URL可以被设置为书签，而post不可以；\n3)    Get能够被缓存，而post不可以；\n4)    Get参数保留在浏览器历史中，而post参数不会保留在浏览器历史中；\n5)    当发生数据时，get方法向URL添加数据，URL的数据长度是受限的，而post没有数据长度限制；\n6)    Get只允许ASCII编码，而post没有限制；\n7)    Get安全性没有post安全性好；\n8)    Get数据在URL中对所有人是可见的，而在post中数据不会显示在URL中。\n9)    Get产生一个TCP数据包，post产生两个TCP数据包；对于get方式的请求，浏览器会把header和data一并发送出去；对于post，浏览器先发送header再发送data；\n10)    GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。\n\n</font>\n\n\n<p><strong>PUT</strong></p>\n<p>上传文件</p>\n<p>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p>\n<p><strong>PATCH</strong></p>\n<p>对资源进行部分修改</p>\n<p>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p>\n<p><strong>DELETE</strong></p>\n<p>删除文件</p>\n<p>与 PUT 功能相反，并且同样不带验证机制。</p>\n<p><strong>OPTIONS</strong></p>\n<p>查询支持的方法</p>\n<p>查询指定的 URL 能够支持的方法。</p>\n<p>会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。</p>\n<p><strong>CONNECT</strong></p>\n<p>要求在与代理服务器通信时建立隧道</p>\n<p>使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>\n<p><strong>TRACE</strong></p>\n<p>追踪路径</p>\n<p>服务器会将通信路径返回给客户端。</p>\n<p>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。</p>\n<p>通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。</p>\n<h3 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h3><p>服务器返回的 <strong>响应报文</strong> 中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态码</th>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1XX</td>\n<td style=\"text-align:center\">Informational（信息性状态码）</td>\n<td style=\"text-align:center\">接收的请求正在处理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2XX</td>\n<td style=\"text-align:center\">Success（成功状态码）</td>\n<td style=\"text-align:center\">请求正常处理完毕</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3XX</td>\n<td style=\"text-align:center\">Redirection（重定向状态码）</td>\n<td style=\"text-align:center\">需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4XX</td>\n<td style=\"text-align:center\">Client Error（客户端错误状态码）</td>\n<td style=\"text-align:center\">服务器无法处理请求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5XX</td>\n<td style=\"text-align:center\">Server Error（服务器错误状态码）</td>\n<td style=\"text-align:center\">服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>1. 1XX 信息</strong></p>\n<p>100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</p>\n<p><strong>2. 2XX 成功</strong></p>\n<p>200 OK</p>\n<p>204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p>\n<p>206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</p>\n<p><strong>3. 3XX 重定向</strong></p>\n<p>301 Moved Permanently ：永久性重定向</p>\n<p>302 Found ：临时性重定向</p>\n<p>303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p>\n<p><strong>4. 4XX 客户端错误</strong></p>\n<p>400 Bad Request ：请求报文中存在语法错误。</p>\n<p>401 Unauthorized ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p>\n<p>403 Forbidden ：请求被拒绝。</p>\n<p>404 Not Found</p>\n<p><strong>5. 5XX 服务器错误</strong></p>\n<p>500 Internal Server Error ：服务器正在执行请求时发生错误。</p>\n<p>503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://baike.baidu.com/item/HTTP/243074?fr=aladdin\">1.百度百科-HTTP</a></p>\n<p><a href=\"https://leetcode.cn/leetbook/read/tech-interview-cookbook/o9ga26/\">2.校招基础知识详解-HTTP</a></p>\n<p><a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2\">3.rfc2616：3.2.2 http URL</a></p>\n<p><a href=\"https://blog.csdn.net/x1037490413/article/details/117704060\">4.http协议以及如何在谷歌控制台查看通信报文</a></p>\n","site":{"data":{}},"excerpt":"<p>HTTP协议是网络编程的基础知识，后端开发应当熟练掌握，但是相关内容较多。</p>\n<p>之前在学校学的都忘记了，最近为了找工作又复习起来，参考了力扣上的教程和一些网上资料，做一个总结，并补充一些常问的八股方便回顾。</p>\n<p><a href=\"https://leetcode.cn/leetbook/read/tech-interview-cookbook/o9ga26/\">校招基础知识详解-HTTP</a></p>","more":"<h2 id=\"URL解析过程\"><a href=\"#URL解析过程\" class=\"headerlink\" title=\"URL解析过程\"></a>URL解析过程</h2><p>当输入网址时会发生什么呢？提到HTTP就不能不先了解一下URL的解析过程。</p>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><p>在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫<strong>URL（Uniform Resource Locator,统一资源定位器）</strong>，它是WWW的统一资源定位标志，就是指网络地址。</p>\n<h3 id=\"浏览器输入地址后发生什么？\"><a href=\"#浏览器输入地址后发生什么？\" class=\"headerlink\" title=\"浏览器输入地址后发生什么？\"></a>浏览器输入地址后发生什么？</h3><p>1、域名解析： 浏览器获得URL地址，向操作系统请求该URL对应的IP地址，操作系统查询DNS（首先查询本地HOST文件，没有则查询网络）获得对应的IP地址</p>\n<p>解释：</p>\n<p>把URL分割成几个部分：协议、网络地址、资源路径</p>\n<p>协议：指从该计算机获取资源的方式，常见的是HTTP、FTP</p>\n<p>网络地址：可以是域名或者是IP地址，也可以包括端口号，如果不注明端口号，默认是80端口</p>\n<p>如果地址不是一个IP地址，则需要通过DNS（域名系统）将该地址解析成IP地址，IP地址对应着网络上的一台计算机，DNS服务器本身也有IP，你的网络设置包含DNS服务器的IP，例如，www.abc.com不是一个IP，则需要向DNS询问请求www.abc.com对应的IP，获得IP，在这个过程中，你的电脑直接询问DNS服务器可能没有发现www.abc.com对应的IP，就会向它的上级服务器询问，这样依次一层层向上级找，最高可达根节点，直到找到或者全部找不到为止</p>\n<p>端口号就相当于银行的窗口，不同的窗口负责不同的服务，如果输入www.abc.com:8080/，则表示不使用默认的80端口，而使用指定的8080端口</p>\n<p>2、确认好了IP和端口号，则可以向该IP地址对应的服务器的该端口号发起TCP连接请求</p>\n<p>3、服务器接收到TCP连接请求后，回复可以连接请求，</p>\n<p>4、浏览器收到回传的数据后，还会向服务器发送数据包，表示三次握手结束</p>\n<p>5、三次握手成功后，开始通讯，根据HTTP协议的要求，组织一个请求的数据包，里面包含请求的资源路径、你的身份信息等。</p>\n<p>例如，www.abc.com/images/1/表示的资源路径是images/1/，发送后，服务器响应请求，将数据返回给浏览器，数据可以是根据HTML协议组织的网页，里面包含页面的布局、文字等等，也可以是图片或者脚本程序等，如果资源路径指定的资源不存在，服务器就会返回404错误，如果返回的是一个页面，则根据页面里的一些外链URL地址，重复上述步骤，再次获取</p>\n<p>6、渲染页面，并开始响应用户的操作</p>\n<p>7、窗口关闭时，浏览器终止与服务器的连接</p>\n<h2 id=\"HTTP基础\"><a href=\"#HTTP基础\" class=\"headerlink\" title=\"HTTP基础\"></a>HTTP基础</h2><p><strong>超文本传输协议（Hyper Text Transfer Protocol，HTTP）</strong> 是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。</p>\n<p>关于HTTP1.1协议的具体内容可以参考<a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2\">RFC 2616</a>。 </p>\n<h3 id=\"1-报文格式\"><a href=\"#1-报文格式\" class=\"headerlink\" title=\"1. 报文格式\"></a>1. 报文格式</h3><p>客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。</p>\n<p>如下图所示方式可打开HTTP报文查看内容。<br><a href=\"https://blog.csdn.net/x1037490413/article/details/117704060\">http协议以及如何在谷歌控制台查看通信报文</a></p>\n<p>上方为请求报文解析内容，下方为响应报文内容。</p>\n<p><img src=\"https://pic.imgdb.cn/item/629440300947543129839d01.png\" alt=\"图1. 一个HTTP报文\"></p>\n<p><strong>1.1 请求报文格式如下：</strong></p>\n<ul>\n<li>第一行是包含了请求方法、URL、协议版本；</li>\n<li>接下来的多行都是请求首部 Header，每个首部都有一个首部名称，以及对应的值。</li>\n<li>一个空行用来分隔首部和内容主体 Body</li>\n<li>最后是请求的内容主体</li>\n</ul>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">http://www.example.com/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span><span class=\"punctuation\">: </span>zh-CN,zh;q=0.9,en;q=0.8</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span><span class=\"punctuation\">: </span>max-age=0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-awk\">作者：CyC2018</span></span><br><span class=\"line\"><span class=\"language-awk\">链接：https:<span class=\"regexp\">//</span>leetcode.cn<span class=\"regexp\">/leetbook/</span>read<span class=\"regexp\">/tech-interview-cookbook/</span>orse6h/</span></span><br><span class=\"line\"><span class=\"language-awk\">来源：力扣（LeetCode）</span></span><br></pre></td></tr></table></figure>\n<p><strong>1.2 应答报文格式如下：</strong></p>\n<ul>\n<li>第一行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了，如图1</li>\n<li>接下来多行也是首部内容</li>\n<li>一个空行分隔首部和内容主体</li>\n<li>最后是响应的内容主体</li>\n</ul>\n<h3 id=\"2-HTTP-方法\"><a href=\"#2-HTTP-方法\" class=\"headerlink\" title=\"2. HTTP 方法\"></a>2. HTTP 方法</h3><p><strong>GET</strong></p>\n<p>获取资源</p>\n<p><strong>HEAD</strong></p>\n<p>获取报文首部，和 GET 方法类似，但是不返回报文实体主体部分。</p>\n<p>主要用于确认 URL 的有效性以及资源更新的日期时间等。</p>\n<p><strong>POST</strong></p>\n<p>传输实体主体</p>\n<p>POST 主要用来传输数据，而 GET 主要用来获取资源。</p>\n<font color = #888888>\n\n*GET和POST的区别？*\n1)    后退按钮或刷新，Get无害，post数据会被重新提交；\n2)    Get所使用的URL可以被设置为书签，而post不可以；\n3)    Get能够被缓存，而post不可以；\n4)    Get参数保留在浏览器历史中，而post参数不会保留在浏览器历史中；\n5)    当发生数据时，get方法向URL添加数据，URL的数据长度是受限的，而post没有数据长度限制；\n6)    Get只允许ASCII编码，而post没有限制；\n7)    Get安全性没有post安全性好；\n8)    Get数据在URL中对所有人是可见的，而在post中数据不会显示在URL中。\n9)    Get产生一个TCP数据包，post产生两个TCP数据包；对于get方式的请求，浏览器会把header和data一并发送出去；对于post，浏览器先发送header再发送data；\n10)    GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。\n\n</font>\n\n\n<p><strong>PUT</strong></p>\n<p>上传文件</p>\n<p>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p>\n<p><strong>PATCH</strong></p>\n<p>对资源进行部分修改</p>\n<p>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p>\n<p><strong>DELETE</strong></p>\n<p>删除文件</p>\n<p>与 PUT 功能相反，并且同样不带验证机制。</p>\n<p><strong>OPTIONS</strong></p>\n<p>查询支持的方法</p>\n<p>查询指定的 URL 能够支持的方法。</p>\n<p>会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。</p>\n<p><strong>CONNECT</strong></p>\n<p>要求在与代理服务器通信时建立隧道</p>\n<p>使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>\n<p><strong>TRACE</strong></p>\n<p>追踪路径</p>\n<p>服务器会将通信路径返回给客户端。</p>\n<p>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。</p>\n<p>通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。</p>\n<h3 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h3><p>服务器返回的 <strong>响应报文</strong> 中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态码</th>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1XX</td>\n<td style=\"text-align:center\">Informational（信息性状态码）</td>\n<td style=\"text-align:center\">接收的请求正在处理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2XX</td>\n<td style=\"text-align:center\">Success（成功状态码）</td>\n<td style=\"text-align:center\">请求正常处理完毕</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3XX</td>\n<td style=\"text-align:center\">Redirection（重定向状态码）</td>\n<td style=\"text-align:center\">需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4XX</td>\n<td style=\"text-align:center\">Client Error（客户端错误状态码）</td>\n<td style=\"text-align:center\">服务器无法处理请求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5XX</td>\n<td style=\"text-align:center\">Server Error（服务器错误状态码）</td>\n<td style=\"text-align:center\">服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>1. 1XX 信息</strong></p>\n<p>100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</p>\n<p><strong>2. 2XX 成功</strong></p>\n<p>200 OK</p>\n<p>204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p>\n<p>206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</p>\n<p><strong>3. 3XX 重定向</strong></p>\n<p>301 Moved Permanently ：永久性重定向</p>\n<p>302 Found ：临时性重定向</p>\n<p>303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p>\n<p><strong>4. 4XX 客户端错误</strong></p>\n<p>400 Bad Request ：请求报文中存在语法错误。</p>\n<p>401 Unauthorized ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p>\n<p>403 Forbidden ：请求被拒绝。</p>\n<p>404 Not Found</p>\n<p><strong>5. 5XX 服务器错误</strong></p>\n<p>500 Internal Server Error ：服务器正在执行请求时发生错误。</p>\n<p>503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://baike.baidu.com/item/HTTP/243074?fr=aladdin\">1.百度百科-HTTP</a></p>\n<p><a href=\"https://leetcode.cn/leetbook/read/tech-interview-cookbook/o9ga26/\">2.校招基础知识详解-HTTP</a></p>\n<p><a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2\">3.rfc2616：3.2.2 http URL</a></p>\n<p><a href=\"https://blog.csdn.net/x1037490413/article/details/117704060\">4.http协议以及如何在谷歌控制台查看通信报文</a></p>"},{"title":"机器学习：聚类任务和k_means算法课堂实践","date":"2022-06-08T01:43:51.000Z","_content":"这是在学习《机器学习基础》课程的**聚类**这一章时，做的课堂实践内容，详见《机器学习（周立华）》第九章，记录一下以便回顾。\n数据集使用 [CIFAR-10数据集](http://www.cs.toronto.edu/~kriz/cifar.html)\n完整代码见github：[聚类和k均值算法课程实践](https://github.com/KennanYang/mechine-learning/blob/master/week11_k_means.ipynb)\n\n\n<!--more-->\n\n## 机器学习算法基础\n### 聚类任务和k-means算法\n**聚类（Clustering）** 是一种无监督学习。目的是通过对**未标记训练样本**的学习来解释数据的固有属性和规律，为进一步的数据分析提供基础。\n通过对数据集进行划分，形成**簇结构（cluster）**。\n实验采用 **k-means算法** 对数据集进行分割。\n给定样本集D，**k-means**算法使平方误差最小化\n![平方误差](https://pic.imgdb.cn/item/62a9499d09475431298ce88d.png)\n对于聚类得到的聚类划分$C={C_1,C_2，…，C_k}$，其中$μ_i=1/(| C_i |)∑_(x∈C_i)$, x是聚类C的均值向量。该公式描述了聚类中样本与聚类均值向量之间的密切程度。\n\nE值越小，表示聚类中样本的相似性越高。\n\nK-means采用贪心策略通过迭代优化来逼近该公式。在迭代更新过程中，每个聚类中的样本与平均向量之间的距离会变短。这个距离可以用不同的范式来计算。\n\n当达到调整范围的阈值时，停止迭代，输出一个近似最优的聚类分类结果。在本实验中，该阈值被设置为0.0001。\n\n### DBI评价指标\n对于聚类结果，我们需要通过一些性能指标来评估其质量。\n\n本实验使用内部指标 **Davies-Bouldin（DB）指数** 来衡量聚类的性能。\n**DB指数**的思想是希望C簇中样本之间的平均距离之和尽可能小，不同簇的中心点之间的距离尽可能大。\n这意味着聚类分类后的样本更加集中。使聚类结果具有较高的“簇**内**相似度”和较低的“簇**间**相似度”。\nDBI算法如下:\nDavies-Bouldin指数:\n![](https://pic.imgdb.cn/item/62a9540c09475431299ab059.png)\nC类样本间的平均距离:\n![](https://pic.imgdb.cn/item/62a9543a09475431299b0a55.png)\n簇C_i的中心点到簇C_j的距离:\n![](https://pic.imgdb.cn/item/62a9543a09475431299b0acc.png)\n$dist(·，·)$用于计算两个样本之间的距离，这里的距离计算采用欧氏距离，即p=2;\n\n![](https://pic.imgdb.cn/item/62a9543b09475431299b0b02.png)\nμ表示簇C的中心点:\n![](https://pic.imgdb.cn/item/62a954c909475431299c02db.png)\n## 实验结果展示\nJupyterLab的python程序运行结果如下：\n![](https://pic.imgdb.cn/item/62a9550c09475431299c84f6.png)\n\n首先，展示测试图像。每个标签显示5个图片，10个标签有10列。\n\n然后信息按顺序显示:\n当k为6到10，范数为L1或L2时，DBI是不同的。\n展示最小的DBI和最佳的聚类分区。\n最后给出DBI最小的簇的图像。每个标签显示5张图片，k个标签有k列。\n\n注: 由于初始均值向量是随机选择的，因此DBI结果略有不同。由于最小DBI的聚类结果相同，对聚类结果没有影响。当初始均值向量选择相同时，DBI结果相同。\n\n## 参考资料\n1.CIFAR-10数据集下载: http://www.cs.toronto.edu/~kriz/cifar.html\n\n2.《机器学习（周立华）》（西瓜书）\n\n","source":"_posts/008-k-means.md","raw":"---\ntitle: 机器学习：聚类任务和k_means算法课堂实践\ndate: 2022-06-08 09:43:51\ncategories: 机器学习\ntags:\n- 机器学习\n- python\n---\n这是在学习《机器学习基础》课程的**聚类**这一章时，做的课堂实践内容，详见《机器学习（周立华）》第九章，记录一下以便回顾。\n数据集使用 [CIFAR-10数据集](http://www.cs.toronto.edu/~kriz/cifar.html)\n完整代码见github：[聚类和k均值算法课程实践](https://github.com/KennanYang/mechine-learning/blob/master/week11_k_means.ipynb)\n\n\n<!--more-->\n\n## 机器学习算法基础\n### 聚类任务和k-means算法\n**聚类（Clustering）** 是一种无监督学习。目的是通过对**未标记训练样本**的学习来解释数据的固有属性和规律，为进一步的数据分析提供基础。\n通过对数据集进行划分，形成**簇结构（cluster）**。\n实验采用 **k-means算法** 对数据集进行分割。\n给定样本集D，**k-means**算法使平方误差最小化\n![平方误差](https://pic.imgdb.cn/item/62a9499d09475431298ce88d.png)\n对于聚类得到的聚类划分$C={C_1,C_2，…，C_k}$，其中$μ_i=1/(| C_i |)∑_(x∈C_i)$, x是聚类C的均值向量。该公式描述了聚类中样本与聚类均值向量之间的密切程度。\n\nE值越小，表示聚类中样本的相似性越高。\n\nK-means采用贪心策略通过迭代优化来逼近该公式。在迭代更新过程中，每个聚类中的样本与平均向量之间的距离会变短。这个距离可以用不同的范式来计算。\n\n当达到调整范围的阈值时，停止迭代，输出一个近似最优的聚类分类结果。在本实验中，该阈值被设置为0.0001。\n\n### DBI评价指标\n对于聚类结果，我们需要通过一些性能指标来评估其质量。\n\n本实验使用内部指标 **Davies-Bouldin（DB）指数** 来衡量聚类的性能。\n**DB指数**的思想是希望C簇中样本之间的平均距离之和尽可能小，不同簇的中心点之间的距离尽可能大。\n这意味着聚类分类后的样本更加集中。使聚类结果具有较高的“簇**内**相似度”和较低的“簇**间**相似度”。\nDBI算法如下:\nDavies-Bouldin指数:\n![](https://pic.imgdb.cn/item/62a9540c09475431299ab059.png)\nC类样本间的平均距离:\n![](https://pic.imgdb.cn/item/62a9543a09475431299b0a55.png)\n簇C_i的中心点到簇C_j的距离:\n![](https://pic.imgdb.cn/item/62a9543a09475431299b0acc.png)\n$dist(·，·)$用于计算两个样本之间的距离，这里的距离计算采用欧氏距离，即p=2;\n\n![](https://pic.imgdb.cn/item/62a9543b09475431299b0b02.png)\nμ表示簇C的中心点:\n![](https://pic.imgdb.cn/item/62a954c909475431299c02db.png)\n## 实验结果展示\nJupyterLab的python程序运行结果如下：\n![](https://pic.imgdb.cn/item/62a9550c09475431299c84f6.png)\n\n首先，展示测试图像。每个标签显示5个图片，10个标签有10列。\n\n然后信息按顺序显示:\n当k为6到10，范数为L1或L2时，DBI是不同的。\n展示最小的DBI和最佳的聚类分区。\n最后给出DBI最小的簇的图像。每个标签显示5张图片，k个标签有k列。\n\n注: 由于初始均值向量是随机选择的，因此DBI结果略有不同。由于最小DBI的聚类结果相同，对聚类结果没有影响。当初始均值向量选择相同时，DBI结果相同。\n\n## 参考资料\n1.CIFAR-10数据集下载: http://www.cs.toronto.edu/~kriz/cifar.html\n\n2.《机器学习（周立华）》（西瓜书）\n\n","slug":"008-k-means","published":1,"updated":"2025-07-13T06:57:17.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qn000lu4vofpcjcojc","content":"<p>这是在学习《机器学习基础》课程的<strong>聚类</strong>这一章时，做的课堂实践内容，详见《机器学习（周立华）》第九章，记录一下以便回顾。<br>数据集使用 <a href=\"http://www.cs.toronto.edu/~kriz/cifar.html\">CIFAR-10数据集</a><br>完整代码见github：<a href=\"https://github.com/KennanYang/mechine-learning/blob/master/week11_k_means.ipynb\">聚类和k均值算法课程实践</a></p>\n<span id=\"more\"></span>\n<h2 id=\"机器学习算法基础\"><a href=\"#机器学习算法基础\" class=\"headerlink\" title=\"机器学习算法基础\"></a>机器学习算法基础</h2><h3 id=\"聚类任务和k-means算法\"><a href=\"#聚类任务和k-means算法\" class=\"headerlink\" title=\"聚类任务和k-means算法\"></a>聚类任务和k-means算法</h3><p><strong>聚类（Clustering）</strong> 是一种无监督学习。目的是通过对<strong>未标记训练样本</strong>的学习来解释数据的固有属性和规律，为进一步的数据分析提供基础。<br>通过对数据集进行划分，形成<strong>簇结构（cluster）</strong>。<br>实验采用 <strong>k-means算法</strong> 对数据集进行分割。<br>给定样本集D，<strong>k-means</strong>算法使平方误差最小化<br><img src=\"https://pic.imgdb.cn/item/62a9499d09475431298ce88d.png\" alt=\"平方误差\"><br>对于聚类得到的聚类划分$C={C<em>1,C_2，…，C_k}$，其中$μ_i=1/(| C_i |)∑</em>(x∈C_i)$, x是聚类C的均值向量。该公式描述了聚类中样本与聚类均值向量之间的密切程度。</p>\n<p>E值越小，表示聚类中样本的相似性越高。</p>\n<p>K-means采用贪心策略通过迭代优化来逼近该公式。在迭代更新过程中，每个聚类中的样本与平均向量之间的距离会变短。这个距离可以用不同的范式来计算。</p>\n<p>当达到调整范围的阈值时，停止迭代，输出一个近似最优的聚类分类结果。在本实验中，该阈值被设置为0.0001。</p>\n<h3 id=\"DBI评价指标\"><a href=\"#DBI评价指标\" class=\"headerlink\" title=\"DBI评价指标\"></a>DBI评价指标</h3><p>对于聚类结果，我们需要通过一些性能指标来评估其质量。</p>\n<p>本实验使用内部指标 <strong>Davies-Bouldin（DB）指数</strong> 来衡量聚类的性能。<br><strong>DB指数</strong>的思想是希望C簇中样本之间的平均距离之和尽可能小，不同簇的中心点之间的距离尽可能大。<br>这意味着聚类分类后的样本更加集中。使聚类结果具有较高的“簇<strong>内</strong>相似度”和较低的“簇<strong>间</strong>相似度”。<br>DBI算法如下:<br>Davies-Bouldin指数:<br><img src=\"https://pic.imgdb.cn/item/62a9540c09475431299ab059.png\" alt=\"\"><br>C类样本间的平均距离:<br><img src=\"https://pic.imgdb.cn/item/62a9543a09475431299b0a55.png\" alt=\"\"><br>簇C_i的中心点到簇C_j的距离:<br><img src=\"https://pic.imgdb.cn/item/62a9543a09475431299b0acc.png\" alt=\"\"><br>$dist(·，·)$用于计算两个样本之间的距离，这里的距离计算采用欧氏距离，即p=2;</p>\n<p><img src=\"https://pic.imgdb.cn/item/62a9543b09475431299b0b02.png\" alt=\"\"><br>μ表示簇C的中心点:<br><img src=\"https://pic.imgdb.cn/item/62a954c909475431299c02db.png\" alt=\"\"></p>\n<h2 id=\"实验结果展示\"><a href=\"#实验结果展示\" class=\"headerlink\" title=\"实验结果展示\"></a>实验结果展示</h2><p>JupyterLab的python程序运行结果如下：<br><img src=\"https://pic.imgdb.cn/item/62a9550c09475431299c84f6.png\" alt=\"\"></p>\n<p>首先，展示测试图像。每个标签显示5个图片，10个标签有10列。</p>\n<p>然后信息按顺序显示:<br>当k为6到10，范数为L1或L2时，DBI是不同的。<br>展示最小的DBI和最佳的聚类分区。<br>最后给出DBI最小的簇的图像。每个标签显示5张图片，k个标签有k列。</p>\n<p>注: 由于初始均值向量是随机选择的，因此DBI结果略有不同。由于最小DBI的聚类结果相同，对聚类结果没有影响。当初始均值向量选择相同时，DBI结果相同。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>1.CIFAR-10数据集下载: <a href=\"http://www.cs.toronto.edu/~kriz/cifar.html\">http://www.cs.toronto.edu/~kriz/cifar.html</a></p>\n<p>2.《机器学习（周立华）》（西瓜书）</p>\n","site":{"data":{}},"excerpt":"<p>这是在学习《机器学习基础》课程的<strong>聚类</strong>这一章时，做的课堂实践内容，详见《机器学习（周立华）》第九章，记录一下以便回顾。<br>数据集使用 <a href=\"http://www.cs.toronto.edu/~kriz/cifar.html\">CIFAR-10数据集</a><br>完整代码见github：<a href=\"https://github.com/KennanYang/mechine-learning/blob/master/week11_k_means.ipynb\">聚类和k均值算法课程实践</a></p>","more":"<h2 id=\"机器学习算法基础\"><a href=\"#机器学习算法基础\" class=\"headerlink\" title=\"机器学习算法基础\"></a>机器学习算法基础</h2><h3 id=\"聚类任务和k-means算法\"><a href=\"#聚类任务和k-means算法\" class=\"headerlink\" title=\"聚类任务和k-means算法\"></a>聚类任务和k-means算法</h3><p><strong>聚类（Clustering）</strong> 是一种无监督学习。目的是通过对<strong>未标记训练样本</strong>的学习来解释数据的固有属性和规律，为进一步的数据分析提供基础。<br>通过对数据集进行划分，形成<strong>簇结构（cluster）</strong>。<br>实验采用 <strong>k-means算法</strong> 对数据集进行分割。<br>给定样本集D，<strong>k-means</strong>算法使平方误差最小化<br><img src=\"https://pic.imgdb.cn/item/62a9499d09475431298ce88d.png\" alt=\"平方误差\"><br>对于聚类得到的聚类划分$C={C<em>1,C_2，…，C_k}$，其中$μ_i=1/(| C_i |)∑</em>(x∈C_i)$, x是聚类C的均值向量。该公式描述了聚类中样本与聚类均值向量之间的密切程度。</p>\n<p>E值越小，表示聚类中样本的相似性越高。</p>\n<p>K-means采用贪心策略通过迭代优化来逼近该公式。在迭代更新过程中，每个聚类中的样本与平均向量之间的距离会变短。这个距离可以用不同的范式来计算。</p>\n<p>当达到调整范围的阈值时，停止迭代，输出一个近似最优的聚类分类结果。在本实验中，该阈值被设置为0.0001。</p>\n<h3 id=\"DBI评价指标\"><a href=\"#DBI评价指标\" class=\"headerlink\" title=\"DBI评价指标\"></a>DBI评价指标</h3><p>对于聚类结果，我们需要通过一些性能指标来评估其质量。</p>\n<p>本实验使用内部指标 <strong>Davies-Bouldin（DB）指数</strong> 来衡量聚类的性能。<br><strong>DB指数</strong>的思想是希望C簇中样本之间的平均距离之和尽可能小，不同簇的中心点之间的距离尽可能大。<br>这意味着聚类分类后的样本更加集中。使聚类结果具有较高的“簇<strong>内</strong>相似度”和较低的“簇<strong>间</strong>相似度”。<br>DBI算法如下:<br>Davies-Bouldin指数:<br><img src=\"https://pic.imgdb.cn/item/62a9540c09475431299ab059.png\" alt=\"\"><br>C类样本间的平均距离:<br><img src=\"https://pic.imgdb.cn/item/62a9543a09475431299b0a55.png\" alt=\"\"><br>簇C_i的中心点到簇C_j的距离:<br><img src=\"https://pic.imgdb.cn/item/62a9543a09475431299b0acc.png\" alt=\"\"><br>$dist(·，·)$用于计算两个样本之间的距离，这里的距离计算采用欧氏距离，即p=2;</p>\n<p><img src=\"https://pic.imgdb.cn/item/62a9543b09475431299b0b02.png\" alt=\"\"><br>μ表示簇C的中心点:<br><img src=\"https://pic.imgdb.cn/item/62a954c909475431299c02db.png\" alt=\"\"></p>\n<h2 id=\"实验结果展示\"><a href=\"#实验结果展示\" class=\"headerlink\" title=\"实验结果展示\"></a>实验结果展示</h2><p>JupyterLab的python程序运行结果如下：<br><img src=\"https://pic.imgdb.cn/item/62a9550c09475431299c84f6.png\" alt=\"\"></p>\n<p>首先，展示测试图像。每个标签显示5个图片，10个标签有10列。</p>\n<p>然后信息按顺序显示:<br>当k为6到10，范数为L1或L2时，DBI是不同的。<br>展示最小的DBI和最佳的聚类分区。<br>最后给出DBI最小的簇的图像。每个标签显示5张图片，k个标签有k列。</p>\n<p>注: 由于初始均值向量是随机选择的，因此DBI结果略有不同。由于最小DBI的聚类结果相同，对聚类结果没有影响。当初始均值向量选择相同时，DBI结果相同。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>1.CIFAR-10数据集下载: <a href=\"http://www.cs.toronto.edu/~kriz/cifar.html\">http://www.cs.toronto.edu/~kriz/cifar.html</a></p>\n<p>2.《机器学习（周立华）》（西瓜书）</p>"},{"title":"机器学习：车辆分割任务和卷积神经网络课堂实践","date":"2022-06-13T01:44:24.000Z","_content":"这是在学习《机器学习基础》课程的**神经网络**这一章时，做的期末大作业，详见《机器学习（周立华）》第五章，记录一下以便回顾。\n\n数据集: kaggle车辆分割数据集\n完整代码见github：[车辆分割任务和卷积神经网络课堂实践](https://github.com/KennanYang/Kaggle_car_segmentation)\n<!--more-->\n## 算法基础\n本实验的模型主要参考[FCN语义分割模型](https://blog.csdn.net/qq_36269513/article/details/80420363)，代码部分参考了[手提包分割代码](https://blog.csdn.net/u014453898/article/details/92080859)。\n### 1.模型思路\n \n![图 1模型结构示意图](https://pic.imgdb.cn/item/62a95ff40947543129ab41ae.png)\n如图1所示，模型由两部分组成：上方蓝绿相间的**下采样卷积部分**与下方的**上采样部分**。总体思路是通过卷积过程，将原图一步一步提取出高维全局特征，再使用反卷积操作由高维全局特征还原成原图大小的像素级分类结果。\n\n本项目的下采样卷积部分取用的是 [VGG net网络](https://baijiahao.baidu.com/s?id=1667221544796169037&wfr=spider&for=pc) 卷积部分，其优势是网络结构规整，全网络采用的卷积核尺寸以及池化尺寸均一致, 进行反卷积的尺寸计算较为方便; 且有不同类型的网络结构可以进行横向对比; VGG net通过加深网络深度, 对特征提取的效果也有显著的提升。 \n\n本项目的上采样部分采用反卷积的方式，该方式为上采样的经典操作，通过填充再正向卷积两个步骤，将原来较小尺寸的输入扩大到较大尺寸的输出，并保留了输入时的必要信息。在本项目的实际操作中，并没有将卷积层的输出直接一步还原成原图大小的最终输出，而是一步一步地放大并与所有的池化层输出进行结合，最终还原成原图的大小。\n### 2.下采样\n\n下采样部分包含了传统的卷积层与池化层，卷积层即使用卷积核对输入进行卷积运算，运算过程示意如图2所示，卷积核对当前卷积层输入进行从左到右、自上而下的扫描，每一步输出一个结果，如果扫描的是多通道输入，则对每一个通道进行扫描，每一步将多个通道对应的多个结果进行加和即可。\n \n![图 2卷积运算](https://pic.imgdb.cn/item/62a95ff40947543129ab4196.png)\n\n池化层的池化运算如图3所示，即对输入进行类似卷积运算中的扫描过程，以最大池化层为例，每一步对窗口中的最大元素进行输出。\n \n![图 3池化运算](https://pic.imgdb.cn/item/62a95ff40947543129ab418e.png)\n### 3.上采样\n本项目采用的反卷积操作进行上采样，Pytorch对反卷积已有了完整可调用的封装函数，而其具体的运算过程分为两步：填充、正向卷积。\n\n![图 4填充过程](https://pic.imgdb.cn/item/62a95ff40947543129ab4187.png)\n\n填充过程如图4所示，填充后输入矩阵中的各行各列元素之间会相隔一层0，对于“same”类型的卷积运算，还会在矩阵外圈填充一层0，这样的填充结果即为图3右边所示。\n需要注意的是，输出尺寸是由输入尺寸、正向卷积核大小、填充数决定，如果程序发现当前填充数得到的输出尺寸不满足预定的输出尺寸（即当前输出尺寸偏小），会继续填充，其补填方式是在左侧与上侧继续填充一层0，直至输出尺寸达到预定要求。上述以填充0为例进行说明，而操作者可根据实际情况自定义填充内容，默认填充值为0。\n\n在填充完成后，第二步将进行正向卷积，其卷积运算与下采样部分的卷积运算相同，都是使用卷积核进行扫描、对应位置相乘并相加、多通道输出再相加。输入尺寸经过填充后会被放大一定程度，正向卷积又会减小一定程度，但最后的尺寸会根据填充数、正向卷积核尺寸、步长等变量进行计算，且大于输入尺寸。\n\n考虑到下采样部分的特征提取具有从细节到抽象、从局部到全局的特点，通俗来说可以描述为，网络在卷积部分开始时学习到的是图像某一部分的特征，而前向传播到网络后半程时，网络所掌握到的是对整个图像的总体印象。\n\n不难发现，如果只使用卷积网络最后的输出进行上采样，则保留的信息是全局信息，缺乏细节信息对于总体精度的调整，因此本项目将卷积网络中所有的池化层输出都融入了上采样过程当中，具体做法是：\n\n（1）将卷积网络输出作为当前的上采样对象，将最后一个池化层作为目标池化层\n（2）对上采样对象进行反卷积，尺寸扩大一定程度，且通道数也进行扩充，使之与目标池化层尺寸与通道数一致。\n（3）将（2）中反卷积后的结果与目标池化层进行对应元素相加。\n（4）将（3）操作结束后的输出作为当前的上采样对象，将当前目标池化层的前一个池化层替换当前的目标池化层。跳回（2），循环至所有池化层被融入整个上采样过程。\n（5）将最后的结果进行正向卷积，还原成原图片尺寸，此时的输出即为该样本的像素级分类结果。\n\n## 数据处理\n### 1.图像缩放\n为了达到降低数据维度减少训练模型时间的目的，同时保证缩小后的图片仍能保留原图片的关键信息，因此将图片尺寸缩小到（192，128）。缩小方法采用双线性插值法，即在两个方向分别进行一次线性插值，见下图：\n![图 5 双线性插值法](https://pic.imgdb.cn/item/62a95ff40947543129ab41bc.png)\n假如我们想得到未知函数 f 在点 P = (x, y) 的值，假设我们已知函数 f 在 $Q_{11}  = (x_1, y_1)、Q_{12} = (x_1, y_2), Q_{21} = (x_2, y_1) 以及 Q_{22} = (x_2, y_2)$ 四个点的值。f就是一个像素点的像素值。首先在 x 方向进行线性插值，得到\n![](https://pic.imgdb.cn/item/62a962d90947543129af372e.png)\n然后在 y 方向进行线性插值，得到\n![](https://pic.imgdb.cn/item/62a962d90947543129af36c6.png)\n综合起来就是双线性插值最后的结果：\n![](https://pic.imgdb.cn/item/62a962d90947543129af3658.png)\n图像双线性插值只会用相邻的4个点,最终还要将源图像和目标图像几何中心的对齐：\n![](https://pic.imgdb.cn/item/62a962d90947543129af361d.png)\n### 2.归一化\n把数据变成(0，1)之间的小数，为了数据处理的方便性和正确性，便于不同单位或量级的指标能够进行比较和加权。归一化是一种简化计算的方式，即将有量纲的表达式，经过变换，化为无量纲的表达式，成为纯量。\n\n本次实验数据为图片，处理的数值为像素点，由于像素点的值在（0，255）之间，采用区间放缩法，将数据映射到（0，1）之间。即：\n\n$x' = (x - X_{min}) / (X_{max} - X_{min})$\n\n### 3.标准化\n标准化是依照特征矩阵的列处理数据，其通过求z-score的方法，转换为标准正态分布，和整体样本分布相关，每个样本点都能对标准化产生影响。\n即：$x' = (x - μ)／σ$，\n其中μ为均值，σ为标准差。\n### 4.独热编码\n独热编码即 One-Hot 编码，又称一位有效编码，其方法是使用N位状态寄存器来对N个状态进行编码，每个状态都由他独立的寄存器位，并且在任意时候，其中只有一位有效。对于每一个特征，如果它有m个可能值，那么经过独热编码后，就变成了m个二元特征。并且，这些特征互斥，每次只有一个激活。因此，数据会变成稀疏的。\n\n这样做解决了分类器不好处理属性数据的问题，并且在一定程度上也起到了扩充特征的作用。\n### 5.数据集划分\n由于提供的数据集中的测试集并无标签信息，因此将训练集按照3：1：1的比例将其划分为训练集、验证集和测试集。\n\n训练集用以训练模型优化参数，验证集用来实时输出总损失值，用以决定合适的迭代次数，避免欠拟合、过拟合以及局部最优。测试集用以计算评价指标，以反映模型效果的好坏。\n\n## 实验效果\n### 1.预测结果展示\n    \n![图 6 测试集原图（左）和预测结果（右）对比展示](https://pic.imgdb.cn/item/62a963fb0947543129b0eadc.png)\n\n这是使用1008个样本的测试集预测之后的结果。其中，左图为原来的车辆图片，分辨率为1918*1280。右图为预测之后形成的灰度图，考虑到性能限制，压缩到分辨率为192*128。\n\n可以看到预测结果基本符合预期。\n### 2.MIoU语义分割标准度量\n \n![图 7 MIoU语义分割标准度量原理示意图](https://pic.imgdb.cn/item/62a963fb0947543129b0eacd.png)\nMean Intersection over Union（MIoU，均交并比）为语义分割的标准度量。其计算两个集合的交集和并集之比，在语义分割问题中，这两个集合为真实值和预测值。\n\n首先计算单张图片预测结果的交并比，然后把所有测试集中的图片预测结果的交并比取平均值，即可获得MIoU评价指标。\n\n在本次实验中，对比了4种VGG网络模型以及不同迭代次数下的MIoU指标，对比结果如折线图所示。\n \n![图 8 对比四种网络结构和不同迭代次数下的MIoU结果](https://pic.imgdb.cn/item/62a963fb0947543129b0eac5.png)\n\n由图中可以看出：\n1.这四个网络前期收敛速度是差不多的，随着迭代次数的增加，准确度趋于平稳。\n2.性能最好的情况为采用VGG16网络，迭代100次下的网络模型。最优MIoU指数可达到0.9639。\n\n## 参考资料\n1.FCN的学习及理解\nhttps://blog.csdn.net/qq_36269513/article/details/80420363\n\n2.卷积神经网络VGG16详解\nhttps://baijiahao.baidu.com/s?id=1667221544796169037&wfr=spider&for=pc\n\n3.MIoU 源码解析——TensorFlow 和 PyTorch 源码解析 \nhttps://zhuanlan.zhihu.com/p/141704816\n\n4.pytorch用FCN语义分割手提包数据集\nhttps://blog.csdn.net/u014453898/article/details/92080859\n\n5.《机器学习》，周志华著\n","source":"_posts/009-FCN-car-recognition.md","raw":"---\ntitle: 机器学习：车辆分割任务和卷积神经网络课堂实践\ndate: 2022-06-13 09:44:24\ncategories: 机器学习\ntags:\n- 机器学习\n- python\n- 卷积神经网络\n---\n这是在学习《机器学习基础》课程的**神经网络**这一章时，做的期末大作业，详见《机器学习（周立华）》第五章，记录一下以便回顾。\n\n数据集: kaggle车辆分割数据集\n完整代码见github：[车辆分割任务和卷积神经网络课堂实践](https://github.com/KennanYang/Kaggle_car_segmentation)\n<!--more-->\n## 算法基础\n本实验的模型主要参考[FCN语义分割模型](https://blog.csdn.net/qq_36269513/article/details/80420363)，代码部分参考了[手提包分割代码](https://blog.csdn.net/u014453898/article/details/92080859)。\n### 1.模型思路\n \n![图 1模型结构示意图](https://pic.imgdb.cn/item/62a95ff40947543129ab41ae.png)\n如图1所示，模型由两部分组成：上方蓝绿相间的**下采样卷积部分**与下方的**上采样部分**。总体思路是通过卷积过程，将原图一步一步提取出高维全局特征，再使用反卷积操作由高维全局特征还原成原图大小的像素级分类结果。\n\n本项目的下采样卷积部分取用的是 [VGG net网络](https://baijiahao.baidu.com/s?id=1667221544796169037&wfr=spider&for=pc) 卷积部分，其优势是网络结构规整，全网络采用的卷积核尺寸以及池化尺寸均一致, 进行反卷积的尺寸计算较为方便; 且有不同类型的网络结构可以进行横向对比; VGG net通过加深网络深度, 对特征提取的效果也有显著的提升。 \n\n本项目的上采样部分采用反卷积的方式，该方式为上采样的经典操作，通过填充再正向卷积两个步骤，将原来较小尺寸的输入扩大到较大尺寸的输出，并保留了输入时的必要信息。在本项目的实际操作中，并没有将卷积层的输出直接一步还原成原图大小的最终输出，而是一步一步地放大并与所有的池化层输出进行结合，最终还原成原图的大小。\n### 2.下采样\n\n下采样部分包含了传统的卷积层与池化层，卷积层即使用卷积核对输入进行卷积运算，运算过程示意如图2所示，卷积核对当前卷积层输入进行从左到右、自上而下的扫描，每一步输出一个结果，如果扫描的是多通道输入，则对每一个通道进行扫描，每一步将多个通道对应的多个结果进行加和即可。\n \n![图 2卷积运算](https://pic.imgdb.cn/item/62a95ff40947543129ab4196.png)\n\n池化层的池化运算如图3所示，即对输入进行类似卷积运算中的扫描过程，以最大池化层为例，每一步对窗口中的最大元素进行输出。\n \n![图 3池化运算](https://pic.imgdb.cn/item/62a95ff40947543129ab418e.png)\n### 3.上采样\n本项目采用的反卷积操作进行上采样，Pytorch对反卷积已有了完整可调用的封装函数，而其具体的运算过程分为两步：填充、正向卷积。\n\n![图 4填充过程](https://pic.imgdb.cn/item/62a95ff40947543129ab4187.png)\n\n填充过程如图4所示，填充后输入矩阵中的各行各列元素之间会相隔一层0，对于“same”类型的卷积运算，还会在矩阵外圈填充一层0，这样的填充结果即为图3右边所示。\n需要注意的是，输出尺寸是由输入尺寸、正向卷积核大小、填充数决定，如果程序发现当前填充数得到的输出尺寸不满足预定的输出尺寸（即当前输出尺寸偏小），会继续填充，其补填方式是在左侧与上侧继续填充一层0，直至输出尺寸达到预定要求。上述以填充0为例进行说明，而操作者可根据实际情况自定义填充内容，默认填充值为0。\n\n在填充完成后，第二步将进行正向卷积，其卷积运算与下采样部分的卷积运算相同，都是使用卷积核进行扫描、对应位置相乘并相加、多通道输出再相加。输入尺寸经过填充后会被放大一定程度，正向卷积又会减小一定程度，但最后的尺寸会根据填充数、正向卷积核尺寸、步长等变量进行计算，且大于输入尺寸。\n\n考虑到下采样部分的特征提取具有从细节到抽象、从局部到全局的特点，通俗来说可以描述为，网络在卷积部分开始时学习到的是图像某一部分的特征，而前向传播到网络后半程时，网络所掌握到的是对整个图像的总体印象。\n\n不难发现，如果只使用卷积网络最后的输出进行上采样，则保留的信息是全局信息，缺乏细节信息对于总体精度的调整，因此本项目将卷积网络中所有的池化层输出都融入了上采样过程当中，具体做法是：\n\n（1）将卷积网络输出作为当前的上采样对象，将最后一个池化层作为目标池化层\n（2）对上采样对象进行反卷积，尺寸扩大一定程度，且通道数也进行扩充，使之与目标池化层尺寸与通道数一致。\n（3）将（2）中反卷积后的结果与目标池化层进行对应元素相加。\n（4）将（3）操作结束后的输出作为当前的上采样对象，将当前目标池化层的前一个池化层替换当前的目标池化层。跳回（2），循环至所有池化层被融入整个上采样过程。\n（5）将最后的结果进行正向卷积，还原成原图片尺寸，此时的输出即为该样本的像素级分类结果。\n\n## 数据处理\n### 1.图像缩放\n为了达到降低数据维度减少训练模型时间的目的，同时保证缩小后的图片仍能保留原图片的关键信息，因此将图片尺寸缩小到（192，128）。缩小方法采用双线性插值法，即在两个方向分别进行一次线性插值，见下图：\n![图 5 双线性插值法](https://pic.imgdb.cn/item/62a95ff40947543129ab41bc.png)\n假如我们想得到未知函数 f 在点 P = (x, y) 的值，假设我们已知函数 f 在 $Q_{11}  = (x_1, y_1)、Q_{12} = (x_1, y_2), Q_{21} = (x_2, y_1) 以及 Q_{22} = (x_2, y_2)$ 四个点的值。f就是一个像素点的像素值。首先在 x 方向进行线性插值，得到\n![](https://pic.imgdb.cn/item/62a962d90947543129af372e.png)\n然后在 y 方向进行线性插值，得到\n![](https://pic.imgdb.cn/item/62a962d90947543129af36c6.png)\n综合起来就是双线性插值最后的结果：\n![](https://pic.imgdb.cn/item/62a962d90947543129af3658.png)\n图像双线性插值只会用相邻的4个点,最终还要将源图像和目标图像几何中心的对齐：\n![](https://pic.imgdb.cn/item/62a962d90947543129af361d.png)\n### 2.归一化\n把数据变成(0，1)之间的小数，为了数据处理的方便性和正确性，便于不同单位或量级的指标能够进行比较和加权。归一化是一种简化计算的方式，即将有量纲的表达式，经过变换，化为无量纲的表达式，成为纯量。\n\n本次实验数据为图片，处理的数值为像素点，由于像素点的值在（0，255）之间，采用区间放缩法，将数据映射到（0，1）之间。即：\n\n$x' = (x - X_{min}) / (X_{max} - X_{min})$\n\n### 3.标准化\n标准化是依照特征矩阵的列处理数据，其通过求z-score的方法，转换为标准正态分布，和整体样本分布相关，每个样本点都能对标准化产生影响。\n即：$x' = (x - μ)／σ$，\n其中μ为均值，σ为标准差。\n### 4.独热编码\n独热编码即 One-Hot 编码，又称一位有效编码，其方法是使用N位状态寄存器来对N个状态进行编码，每个状态都由他独立的寄存器位，并且在任意时候，其中只有一位有效。对于每一个特征，如果它有m个可能值，那么经过独热编码后，就变成了m个二元特征。并且，这些特征互斥，每次只有一个激活。因此，数据会变成稀疏的。\n\n这样做解决了分类器不好处理属性数据的问题，并且在一定程度上也起到了扩充特征的作用。\n### 5.数据集划分\n由于提供的数据集中的测试集并无标签信息，因此将训练集按照3：1：1的比例将其划分为训练集、验证集和测试集。\n\n训练集用以训练模型优化参数，验证集用来实时输出总损失值，用以决定合适的迭代次数，避免欠拟合、过拟合以及局部最优。测试集用以计算评价指标，以反映模型效果的好坏。\n\n## 实验效果\n### 1.预测结果展示\n    \n![图 6 测试集原图（左）和预测结果（右）对比展示](https://pic.imgdb.cn/item/62a963fb0947543129b0eadc.png)\n\n这是使用1008个样本的测试集预测之后的结果。其中，左图为原来的车辆图片，分辨率为1918*1280。右图为预测之后形成的灰度图，考虑到性能限制，压缩到分辨率为192*128。\n\n可以看到预测结果基本符合预期。\n### 2.MIoU语义分割标准度量\n \n![图 7 MIoU语义分割标准度量原理示意图](https://pic.imgdb.cn/item/62a963fb0947543129b0eacd.png)\nMean Intersection over Union（MIoU，均交并比）为语义分割的标准度量。其计算两个集合的交集和并集之比，在语义分割问题中，这两个集合为真实值和预测值。\n\n首先计算单张图片预测结果的交并比，然后把所有测试集中的图片预测结果的交并比取平均值，即可获得MIoU评价指标。\n\n在本次实验中，对比了4种VGG网络模型以及不同迭代次数下的MIoU指标，对比结果如折线图所示。\n \n![图 8 对比四种网络结构和不同迭代次数下的MIoU结果](https://pic.imgdb.cn/item/62a963fb0947543129b0eac5.png)\n\n由图中可以看出：\n1.这四个网络前期收敛速度是差不多的，随着迭代次数的增加，准确度趋于平稳。\n2.性能最好的情况为采用VGG16网络，迭代100次下的网络模型。最优MIoU指数可达到0.9639。\n\n## 参考资料\n1.FCN的学习及理解\nhttps://blog.csdn.net/qq_36269513/article/details/80420363\n\n2.卷积神经网络VGG16详解\nhttps://baijiahao.baidu.com/s?id=1667221544796169037&wfr=spider&for=pc\n\n3.MIoU 源码解析——TensorFlow 和 PyTorch 源码解析 \nhttps://zhuanlan.zhihu.com/p/141704816\n\n4.pytorch用FCN语义分割手提包数据集\nhttps://blog.csdn.net/u014453898/article/details/92080859\n\n5.《机器学习》，周志华著\n","slug":"009-FCN-car-recognition","published":1,"updated":"2025-07-13T06:57:17.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qn000qu4vo9ftadlxl","content":"<p>这是在学习《机器学习基础》课程的<strong>神经网络</strong>这一章时，做的期末大作业，详见《机器学习（周立华）》第五章，记录一下以便回顾。</p>\n<p>数据集: kaggle车辆分割数据集<br>完整代码见github：<a href=\"https://github.com/KennanYang/Kaggle_car_segmentation\">车辆分割任务和卷积神经网络课堂实践</a><br><span id=\"more\"></span></p>\n<h2 id=\"算法基础\"><a href=\"#算法基础\" class=\"headerlink\" title=\"算法基础\"></a>算法基础</h2><p>本实验的模型主要参考<a href=\"https://blog.csdn.net/qq_36269513/article/details/80420363\">FCN语义分割模型</a>，代码部分参考了<a href=\"https://blog.csdn.net/u014453898/article/details/92080859\">手提包分割代码</a>。</p>\n<h3 id=\"1-模型思路\"><a href=\"#1-模型思路\" class=\"headerlink\" title=\"1.模型思路\"></a>1.模型思路</h3><p><img src=\"https://pic.imgdb.cn/item/62a95ff40947543129ab41ae.png\" alt=\"图 1模型结构示意图\"><br>如图1所示，模型由两部分组成：上方蓝绿相间的<strong>下采样卷积部分</strong>与下方的<strong>上采样部分</strong>。总体思路是通过卷积过程，将原图一步一步提取出高维全局特征，再使用反卷积操作由高维全局特征还原成原图大小的像素级分类结果。</p>\n<p>本项目的下采样卷积部分取用的是 <a href=\"https://baijiahao.baidu.com/s?id=1667221544796169037&amp;wfr=spider&amp;for=pc\">VGG net网络</a> 卷积部分，其优势是网络结构规整，全网络采用的卷积核尺寸以及池化尺寸均一致, 进行反卷积的尺寸计算较为方便; 且有不同类型的网络结构可以进行横向对比; VGG net通过加深网络深度, 对特征提取的效果也有显著的提升。 </p>\n<p>本项目的上采样部分采用反卷积的方式，该方式为上采样的经典操作，通过填充再正向卷积两个步骤，将原来较小尺寸的输入扩大到较大尺寸的输出，并保留了输入时的必要信息。在本项目的实际操作中，并没有将卷积层的输出直接一步还原成原图大小的最终输出，而是一步一步地放大并与所有的池化层输出进行结合，最终还原成原图的大小。</p>\n<h3 id=\"2-下采样\"><a href=\"#2-下采样\" class=\"headerlink\" title=\"2.下采样\"></a>2.下采样</h3><p>下采样部分包含了传统的卷积层与池化层，卷积层即使用卷积核对输入进行卷积运算，运算过程示意如图2所示，卷积核对当前卷积层输入进行从左到右、自上而下的扫描，每一步输出一个结果，如果扫描的是多通道输入，则对每一个通道进行扫描，每一步将多个通道对应的多个结果进行加和即可。</p>\n<p><img src=\"https://pic.imgdb.cn/item/62a95ff40947543129ab4196.png\" alt=\"图 2卷积运算\"></p>\n<p>池化层的池化运算如图3所示，即对输入进行类似卷积运算中的扫描过程，以最大池化层为例，每一步对窗口中的最大元素进行输出。</p>\n<p><img src=\"https://pic.imgdb.cn/item/62a95ff40947543129ab418e.png\" alt=\"图 3池化运算\"></p>\n<h3 id=\"3-上采样\"><a href=\"#3-上采样\" class=\"headerlink\" title=\"3.上采样\"></a>3.上采样</h3><p>本项目采用的反卷积操作进行上采样，Pytorch对反卷积已有了完整可调用的封装函数，而其具体的运算过程分为两步：填充、正向卷积。</p>\n<p><img src=\"https://pic.imgdb.cn/item/62a95ff40947543129ab4187.png\" alt=\"图 4填充过程\"></p>\n<p>填充过程如图4所示，填充后输入矩阵中的各行各列元素之间会相隔一层0，对于“same”类型的卷积运算，还会在矩阵外圈填充一层0，这样的填充结果即为图3右边所示。<br>需要注意的是，输出尺寸是由输入尺寸、正向卷积核大小、填充数决定，如果程序发现当前填充数得到的输出尺寸不满足预定的输出尺寸（即当前输出尺寸偏小），会继续填充，其补填方式是在左侧与上侧继续填充一层0，直至输出尺寸达到预定要求。上述以填充0为例进行说明，而操作者可根据实际情况自定义填充内容，默认填充值为0。</p>\n<p>在填充完成后，第二步将进行正向卷积，其卷积运算与下采样部分的卷积运算相同，都是使用卷积核进行扫描、对应位置相乘并相加、多通道输出再相加。输入尺寸经过填充后会被放大一定程度，正向卷积又会减小一定程度，但最后的尺寸会根据填充数、正向卷积核尺寸、步长等变量进行计算，且大于输入尺寸。</p>\n<p>考虑到下采样部分的特征提取具有从细节到抽象、从局部到全局的特点，通俗来说可以描述为，网络在卷积部分开始时学习到的是图像某一部分的特征，而前向传播到网络后半程时，网络所掌握到的是对整个图像的总体印象。</p>\n<p>不难发现，如果只使用卷积网络最后的输出进行上采样，则保留的信息是全局信息，缺乏细节信息对于总体精度的调整，因此本项目将卷积网络中所有的池化层输出都融入了上采样过程当中，具体做法是：</p>\n<p>（1）将卷积网络输出作为当前的上采样对象，将最后一个池化层作为目标池化层<br>（2）对上采样对象进行反卷积，尺寸扩大一定程度，且通道数也进行扩充，使之与目标池化层尺寸与通道数一致。<br>（3）将（2）中反卷积后的结果与目标池化层进行对应元素相加。<br>（4）将（3）操作结束后的输出作为当前的上采样对象，将当前目标池化层的前一个池化层替换当前的目标池化层。跳回（2），循环至所有池化层被融入整个上采样过程。<br>（5）将最后的结果进行正向卷积，还原成原图片尺寸，此时的输出即为该样本的像素级分类结果。</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><h3 id=\"1-图像缩放\"><a href=\"#1-图像缩放\" class=\"headerlink\" title=\"1.图像缩放\"></a>1.图像缩放</h3><p>为了达到降低数据维度减少训练模型时间的目的，同时保证缩小后的图片仍能保留原图片的关键信息，因此将图片尺寸缩小到（192，128）。缩小方法采用双线性插值法，即在两个方向分别进行一次线性插值，见下图：<br><img src=\"https://pic.imgdb.cn/item/62a95ff40947543129ab41bc.png\" alt=\"图 5 双线性插值法\"><br>假如我们想得到未知函数 f 在点 P = (x, y) 的值，假设我们已知函数 f 在 $Q<em>{11}  = (x_1, y_1)、Q</em>{12} = (x<em>1, y_2), Q</em>{21} = (x<em>2, y_1) 以及 Q</em>{22} = (x_2, y_2)$ 四个点的值。f就是一个像素点的像素值。首先在 x 方向进行线性插值，得到<br><img src=\"https://pic.imgdb.cn/item/62a962d90947543129af372e.png\" alt=\"\"><br>然后在 y 方向进行线性插值，得到<br><img src=\"https://pic.imgdb.cn/item/62a962d90947543129af36c6.png\" alt=\"\"><br>综合起来就是双线性插值最后的结果：<br><img src=\"https://pic.imgdb.cn/item/62a962d90947543129af3658.png\" alt=\"\"><br>图像双线性插值只会用相邻的4个点,最终还要将源图像和目标图像几何中心的对齐：<br><img src=\"https://pic.imgdb.cn/item/62a962d90947543129af361d.png\" alt=\"\"></p>\n<h3 id=\"2-归一化\"><a href=\"#2-归一化\" class=\"headerlink\" title=\"2.归一化\"></a>2.归一化</h3><p>把数据变成(0，1)之间的小数，为了数据处理的方便性和正确性，便于不同单位或量级的指标能够进行比较和加权。归一化是一种简化计算的方式，即将有量纲的表达式，经过变换，化为无量纲的表达式，成为纯量。</p>\n<p>本次实验数据为图片，处理的数值为像素点，由于像素点的值在（0，255）之间，采用区间放缩法，将数据映射到（0，1）之间。即：</p>\n<p>$x’ = (x - X<em>{min}) / (X</em>{max} - X_{min})$</p>\n<h3 id=\"3-标准化\"><a href=\"#3-标准化\" class=\"headerlink\" title=\"3.标准化\"></a>3.标准化</h3><p>标准化是依照特征矩阵的列处理数据，其通过求z-score的方法，转换为标准正态分布，和整体样本分布相关，每个样本点都能对标准化产生影响。<br>即：$x’ = (x - μ)／σ$，<br>其中μ为均值，σ为标准差。</p>\n<h3 id=\"4-独热编码\"><a href=\"#4-独热编码\" class=\"headerlink\" title=\"4.独热编码\"></a>4.独热编码</h3><p>独热编码即 One-Hot 编码，又称一位有效编码，其方法是使用N位状态寄存器来对N个状态进行编码，每个状态都由他独立的寄存器位，并且在任意时候，其中只有一位有效。对于每一个特征，如果它有m个可能值，那么经过独热编码后，就变成了m个二元特征。并且，这些特征互斥，每次只有一个激活。因此，数据会变成稀疏的。</p>\n<p>这样做解决了分类器不好处理属性数据的问题，并且在一定程度上也起到了扩充特征的作用。</p>\n<h3 id=\"5-数据集划分\"><a href=\"#5-数据集划分\" class=\"headerlink\" title=\"5.数据集划分\"></a>5.数据集划分</h3><p>由于提供的数据集中的测试集并无标签信息，因此将训练集按照3：1：1的比例将其划分为训练集、验证集和测试集。</p>\n<p>训练集用以训练模型优化参数，验证集用来实时输出总损失值，用以决定合适的迭代次数，避免欠拟合、过拟合以及局部最优。测试集用以计算评价指标，以反映模型效果的好坏。</p>\n<h2 id=\"实验效果\"><a href=\"#实验效果\" class=\"headerlink\" title=\"实验效果\"></a>实验效果</h2><h3 id=\"1-预测结果展示\"><a href=\"#1-预测结果展示\" class=\"headerlink\" title=\"1.预测结果展示\"></a>1.预测结果展示</h3><p><img src=\"https://pic.imgdb.cn/item/62a963fb0947543129b0eadc.png\" alt=\"图 6 测试集原图（左）和预测结果（右）对比展示\"></p>\n<p>这是使用1008个样本的测试集预测之后的结果。其中，左图为原来的车辆图片，分辨率为1918<em>1280。右图为预测之后形成的灰度图，考虑到性能限制，压缩到分辨率为192</em>128。</p>\n<p>可以看到预测结果基本符合预期。</p>\n<h3 id=\"2-MIoU语义分割标准度量\"><a href=\"#2-MIoU语义分割标准度量\" class=\"headerlink\" title=\"2.MIoU语义分割标准度量\"></a>2.MIoU语义分割标准度量</h3><p><img src=\"https://pic.imgdb.cn/item/62a963fb0947543129b0eacd.png\" alt=\"图 7 MIoU语义分割标准度量原理示意图\"><br>Mean Intersection over Union（MIoU，均交并比）为语义分割的标准度量。其计算两个集合的交集和并集之比，在语义分割问题中，这两个集合为真实值和预测值。</p>\n<p>首先计算单张图片预测结果的交并比，然后把所有测试集中的图片预测结果的交并比取平均值，即可获得MIoU评价指标。</p>\n<p>在本次实验中，对比了4种VGG网络模型以及不同迭代次数下的MIoU指标，对比结果如折线图所示。</p>\n<p><img src=\"https://pic.imgdb.cn/item/62a963fb0947543129b0eac5.png\" alt=\"图 8 对比四种网络结构和不同迭代次数下的MIoU结果\"></p>\n<p>由图中可以看出：<br>1.这四个网络前期收敛速度是差不多的，随着迭代次数的增加，准确度趋于平稳。<br>2.性能最好的情况为采用VGG16网络，迭代100次下的网络模型。最优MIoU指数可达到0.9639。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>1.FCN的学习及理解<br><a href=\"https://blog.csdn.net/qq_36269513/article/details/80420363\">https://blog.csdn.net/qq_36269513/article/details/80420363</a></p>\n<p>2.卷积神经网络VGG16详解<br><a href=\"https://baijiahao.baidu.com/s?id=1667221544796169037&amp;wfr=spider&amp;for=pc\">https://baijiahao.baidu.com/s?id=1667221544796169037&amp;wfr=spider&amp;for=pc</a></p>\n<p>3.MIoU 源码解析——TensorFlow 和 PyTorch 源码解析<br><a href=\"https://zhuanlan.zhihu.com/p/141704816\">https://zhuanlan.zhihu.com/p/141704816</a></p>\n<p>4.pytorch用FCN语义分割手提包数据集<br><a href=\"https://blog.csdn.net/u014453898/article/details/92080859\">https://blog.csdn.net/u014453898/article/details/92080859</a></p>\n<p>5.《机器学习》，周志华著</p>\n","site":{"data":{}},"excerpt":"<p>这是在学习《机器学习基础》课程的<strong>神经网络</strong>这一章时，做的期末大作业，详见《机器学习（周立华）》第五章，记录一下以便回顾。</p>\n<p>数据集: kaggle车辆分割数据集<br>完整代码见github：<a href=\"https://github.com/KennanYang/Kaggle_car_segmentation\">车辆分割任务和卷积神经网络课堂实践</a><br>","more":"</p>\n<h2 id=\"算法基础\"><a href=\"#算法基础\" class=\"headerlink\" title=\"算法基础\"></a>算法基础</h2><p>本实验的模型主要参考<a href=\"https://blog.csdn.net/qq_36269513/article/details/80420363\">FCN语义分割模型</a>，代码部分参考了<a href=\"https://blog.csdn.net/u014453898/article/details/92080859\">手提包分割代码</a>。</p>\n<h3 id=\"1-模型思路\"><a href=\"#1-模型思路\" class=\"headerlink\" title=\"1.模型思路\"></a>1.模型思路</h3><p><img src=\"https://pic.imgdb.cn/item/62a95ff40947543129ab41ae.png\" alt=\"图 1模型结构示意图\"><br>如图1所示，模型由两部分组成：上方蓝绿相间的<strong>下采样卷积部分</strong>与下方的<strong>上采样部分</strong>。总体思路是通过卷积过程，将原图一步一步提取出高维全局特征，再使用反卷积操作由高维全局特征还原成原图大小的像素级分类结果。</p>\n<p>本项目的下采样卷积部分取用的是 <a href=\"https://baijiahao.baidu.com/s?id=1667221544796169037&amp;wfr=spider&amp;for=pc\">VGG net网络</a> 卷积部分，其优势是网络结构规整，全网络采用的卷积核尺寸以及池化尺寸均一致, 进行反卷积的尺寸计算较为方便; 且有不同类型的网络结构可以进行横向对比; VGG net通过加深网络深度, 对特征提取的效果也有显著的提升。 </p>\n<p>本项目的上采样部分采用反卷积的方式，该方式为上采样的经典操作，通过填充再正向卷积两个步骤，将原来较小尺寸的输入扩大到较大尺寸的输出，并保留了输入时的必要信息。在本项目的实际操作中，并没有将卷积层的输出直接一步还原成原图大小的最终输出，而是一步一步地放大并与所有的池化层输出进行结合，最终还原成原图的大小。</p>\n<h3 id=\"2-下采样\"><a href=\"#2-下采样\" class=\"headerlink\" title=\"2.下采样\"></a>2.下采样</h3><p>下采样部分包含了传统的卷积层与池化层，卷积层即使用卷积核对输入进行卷积运算，运算过程示意如图2所示，卷积核对当前卷积层输入进行从左到右、自上而下的扫描，每一步输出一个结果，如果扫描的是多通道输入，则对每一个通道进行扫描，每一步将多个通道对应的多个结果进行加和即可。</p>\n<p><img src=\"https://pic.imgdb.cn/item/62a95ff40947543129ab4196.png\" alt=\"图 2卷积运算\"></p>\n<p>池化层的池化运算如图3所示，即对输入进行类似卷积运算中的扫描过程，以最大池化层为例，每一步对窗口中的最大元素进行输出。</p>\n<p><img src=\"https://pic.imgdb.cn/item/62a95ff40947543129ab418e.png\" alt=\"图 3池化运算\"></p>\n<h3 id=\"3-上采样\"><a href=\"#3-上采样\" class=\"headerlink\" title=\"3.上采样\"></a>3.上采样</h3><p>本项目采用的反卷积操作进行上采样，Pytorch对反卷积已有了完整可调用的封装函数，而其具体的运算过程分为两步：填充、正向卷积。</p>\n<p><img src=\"https://pic.imgdb.cn/item/62a95ff40947543129ab4187.png\" alt=\"图 4填充过程\"></p>\n<p>填充过程如图4所示，填充后输入矩阵中的各行各列元素之间会相隔一层0，对于“same”类型的卷积运算，还会在矩阵外圈填充一层0，这样的填充结果即为图3右边所示。<br>需要注意的是，输出尺寸是由输入尺寸、正向卷积核大小、填充数决定，如果程序发现当前填充数得到的输出尺寸不满足预定的输出尺寸（即当前输出尺寸偏小），会继续填充，其补填方式是在左侧与上侧继续填充一层0，直至输出尺寸达到预定要求。上述以填充0为例进行说明，而操作者可根据实际情况自定义填充内容，默认填充值为0。</p>\n<p>在填充完成后，第二步将进行正向卷积，其卷积运算与下采样部分的卷积运算相同，都是使用卷积核进行扫描、对应位置相乘并相加、多通道输出再相加。输入尺寸经过填充后会被放大一定程度，正向卷积又会减小一定程度，但最后的尺寸会根据填充数、正向卷积核尺寸、步长等变量进行计算，且大于输入尺寸。</p>\n<p>考虑到下采样部分的特征提取具有从细节到抽象、从局部到全局的特点，通俗来说可以描述为，网络在卷积部分开始时学习到的是图像某一部分的特征，而前向传播到网络后半程时，网络所掌握到的是对整个图像的总体印象。</p>\n<p>不难发现，如果只使用卷积网络最后的输出进行上采样，则保留的信息是全局信息，缺乏细节信息对于总体精度的调整，因此本项目将卷积网络中所有的池化层输出都融入了上采样过程当中，具体做法是：</p>\n<p>（1）将卷积网络输出作为当前的上采样对象，将最后一个池化层作为目标池化层<br>（2）对上采样对象进行反卷积，尺寸扩大一定程度，且通道数也进行扩充，使之与目标池化层尺寸与通道数一致。<br>（3）将（2）中反卷积后的结果与目标池化层进行对应元素相加。<br>（4）将（3）操作结束后的输出作为当前的上采样对象，将当前目标池化层的前一个池化层替换当前的目标池化层。跳回（2），循环至所有池化层被融入整个上采样过程。<br>（5）将最后的结果进行正向卷积，还原成原图片尺寸，此时的输出即为该样本的像素级分类结果。</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><h3 id=\"1-图像缩放\"><a href=\"#1-图像缩放\" class=\"headerlink\" title=\"1.图像缩放\"></a>1.图像缩放</h3><p>为了达到降低数据维度减少训练模型时间的目的，同时保证缩小后的图片仍能保留原图片的关键信息，因此将图片尺寸缩小到（192，128）。缩小方法采用双线性插值法，即在两个方向分别进行一次线性插值，见下图：<br><img src=\"https://pic.imgdb.cn/item/62a95ff40947543129ab41bc.png\" alt=\"图 5 双线性插值法\"><br>假如我们想得到未知函数 f 在点 P = (x, y) 的值，假设我们已知函数 f 在 $Q<em>{11}  = (x_1, y_1)、Q</em>{12} = (x<em>1, y_2), Q</em>{21} = (x<em>2, y_1) 以及 Q</em>{22} = (x_2, y_2)$ 四个点的值。f就是一个像素点的像素值。首先在 x 方向进行线性插值，得到<br><img src=\"https://pic.imgdb.cn/item/62a962d90947543129af372e.png\" alt=\"\"><br>然后在 y 方向进行线性插值，得到<br><img src=\"https://pic.imgdb.cn/item/62a962d90947543129af36c6.png\" alt=\"\"><br>综合起来就是双线性插值最后的结果：<br><img src=\"https://pic.imgdb.cn/item/62a962d90947543129af3658.png\" alt=\"\"><br>图像双线性插值只会用相邻的4个点,最终还要将源图像和目标图像几何中心的对齐：<br><img src=\"https://pic.imgdb.cn/item/62a962d90947543129af361d.png\" alt=\"\"></p>\n<h3 id=\"2-归一化\"><a href=\"#2-归一化\" class=\"headerlink\" title=\"2.归一化\"></a>2.归一化</h3><p>把数据变成(0，1)之间的小数，为了数据处理的方便性和正确性，便于不同单位或量级的指标能够进行比较和加权。归一化是一种简化计算的方式，即将有量纲的表达式，经过变换，化为无量纲的表达式，成为纯量。</p>\n<p>本次实验数据为图片，处理的数值为像素点，由于像素点的值在（0，255）之间，采用区间放缩法，将数据映射到（0，1）之间。即：</p>\n<p>$x’ = (x - X<em>{min}) / (X</em>{max} - X_{min})$</p>\n<h3 id=\"3-标准化\"><a href=\"#3-标准化\" class=\"headerlink\" title=\"3.标准化\"></a>3.标准化</h3><p>标准化是依照特征矩阵的列处理数据，其通过求z-score的方法，转换为标准正态分布，和整体样本分布相关，每个样本点都能对标准化产生影响。<br>即：$x’ = (x - μ)／σ$，<br>其中μ为均值，σ为标准差。</p>\n<h3 id=\"4-独热编码\"><a href=\"#4-独热编码\" class=\"headerlink\" title=\"4.独热编码\"></a>4.独热编码</h3><p>独热编码即 One-Hot 编码，又称一位有效编码，其方法是使用N位状态寄存器来对N个状态进行编码，每个状态都由他独立的寄存器位，并且在任意时候，其中只有一位有效。对于每一个特征，如果它有m个可能值，那么经过独热编码后，就变成了m个二元特征。并且，这些特征互斥，每次只有一个激活。因此，数据会变成稀疏的。</p>\n<p>这样做解决了分类器不好处理属性数据的问题，并且在一定程度上也起到了扩充特征的作用。</p>\n<h3 id=\"5-数据集划分\"><a href=\"#5-数据集划分\" class=\"headerlink\" title=\"5.数据集划分\"></a>5.数据集划分</h3><p>由于提供的数据集中的测试集并无标签信息，因此将训练集按照3：1：1的比例将其划分为训练集、验证集和测试集。</p>\n<p>训练集用以训练模型优化参数，验证集用来实时输出总损失值，用以决定合适的迭代次数，避免欠拟合、过拟合以及局部最优。测试集用以计算评价指标，以反映模型效果的好坏。</p>\n<h2 id=\"实验效果\"><a href=\"#实验效果\" class=\"headerlink\" title=\"实验效果\"></a>实验效果</h2><h3 id=\"1-预测结果展示\"><a href=\"#1-预测结果展示\" class=\"headerlink\" title=\"1.预测结果展示\"></a>1.预测结果展示</h3><p><img src=\"https://pic.imgdb.cn/item/62a963fb0947543129b0eadc.png\" alt=\"图 6 测试集原图（左）和预测结果（右）对比展示\"></p>\n<p>这是使用1008个样本的测试集预测之后的结果。其中，左图为原来的车辆图片，分辨率为1918<em>1280。右图为预测之后形成的灰度图，考虑到性能限制，压缩到分辨率为192</em>128。</p>\n<p>可以看到预测结果基本符合预期。</p>\n<h3 id=\"2-MIoU语义分割标准度量\"><a href=\"#2-MIoU语义分割标准度量\" class=\"headerlink\" title=\"2.MIoU语义分割标准度量\"></a>2.MIoU语义分割标准度量</h3><p><img src=\"https://pic.imgdb.cn/item/62a963fb0947543129b0eacd.png\" alt=\"图 7 MIoU语义分割标准度量原理示意图\"><br>Mean Intersection over Union（MIoU，均交并比）为语义分割的标准度量。其计算两个集合的交集和并集之比，在语义分割问题中，这两个集合为真实值和预测值。</p>\n<p>首先计算单张图片预测结果的交并比，然后把所有测试集中的图片预测结果的交并比取平均值，即可获得MIoU评价指标。</p>\n<p>在本次实验中，对比了4种VGG网络模型以及不同迭代次数下的MIoU指标，对比结果如折线图所示。</p>\n<p><img src=\"https://pic.imgdb.cn/item/62a963fb0947543129b0eac5.png\" alt=\"图 8 对比四种网络结构和不同迭代次数下的MIoU结果\"></p>\n<p>由图中可以看出：<br>1.这四个网络前期收敛速度是差不多的，随着迭代次数的增加，准确度趋于平稳。<br>2.性能最好的情况为采用VGG16网络，迭代100次下的网络模型。最优MIoU指数可达到0.9639。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>1.FCN的学习及理解<br><a href=\"https://blog.csdn.net/qq_36269513/article/details/80420363\">https://blog.csdn.net/qq_36269513/article/details/80420363</a></p>\n<p>2.卷积神经网络VGG16详解<br><a href=\"https://baijiahao.baidu.com/s?id=1667221544796169037&amp;wfr=spider&amp;for=pc\">https://baijiahao.baidu.com/s?id=1667221544796169037&amp;wfr=spider&amp;for=pc</a></p>\n<p>3.MIoU 源码解析——TensorFlow 和 PyTorch 源码解析<br><a href=\"https://zhuanlan.zhihu.com/p/141704816\">https://zhuanlan.zhihu.com/p/141704816</a></p>\n<p>4.pytorch用FCN语义分割手提包数据集<br><a href=\"https://blog.csdn.net/u014453898/article/details/92080859\">https://blog.csdn.net/u014453898/article/details/92080859</a></p>\n<p>5.《机器学习》，周志华著</p>"},{"title":"hexo配置过程中遇到的问题汇总","date":"2022-06-15T05:19:41.000Z","_content":"在hexo配置个人主页的过程中，遇到一些环境配置问题，在这里整理一下大神们的解决办法：\n\n1.主页打不开的问题：\n\n打开github主页时发现**404**，通过 ***hexo server*** 命令打开本地的主页配置时发现 Cannot Get/,所以搜索了一下解决办法，最终参考[vue项目Error: Cannot find module ‘xxx’类报错的解决方法](https://blog.csdn.net/loveLifeLoveCoding/article/details/121789466) 解决了主页打不开的问题。\n\n<!--more-->\n2.数学公式问题：\n\n这个问题是当我根据marktown写数学公式时，发现vscode上显示公式正确，但是配置到主页上时，公式就变成了源码，通过学习这个博客 [hexo博客next主题添加对数学公式的支持](https://blog.csdn.net/weixin_45511189/article/details/115798563)，得到解决。\n\nmarktown的数学公式语法规则为：[Marktown数学公式](https://www.jianshu.com/p/f0de9f572c9d)\n\n","source":"_posts/010-hexo-problems.md","raw":"---\ntitle: 'hexo配置过程中遇到的问题汇总'\ndate: 2022-06-15 13:19:41\ncategories: 搭建环境\ntags:\n- 搭建环境\n---\n在hexo配置个人主页的过程中，遇到一些环境配置问题，在这里整理一下大神们的解决办法：\n\n1.主页打不开的问题：\n\n打开github主页时发现**404**，通过 ***hexo server*** 命令打开本地的主页配置时发现 Cannot Get/,所以搜索了一下解决办法，最终参考[vue项目Error: Cannot find module ‘xxx’类报错的解决方法](https://blog.csdn.net/loveLifeLoveCoding/article/details/121789466) 解决了主页打不开的问题。\n\n<!--more-->\n2.数学公式问题：\n\n这个问题是当我根据marktown写数学公式时，发现vscode上显示公式正确，但是配置到主页上时，公式就变成了源码，通过学习这个博客 [hexo博客next主题添加对数学公式的支持](https://blog.csdn.net/weixin_45511189/article/details/115798563)，得到解决。\n\nmarktown的数学公式语法规则为：[Marktown数学公式](https://www.jianshu.com/p/f0de9f572c9d)\n\n","slug":"010-hexo-problems","published":1,"updated":"2025-07-13T06:57:17.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qo000ru4voezcefxhf","content":"<p>在hexo配置个人主页的过程中，遇到一些环境配置问题，在这里整理一下大神们的解决办法：</p>\n<p>1.主页打不开的问题：</p>\n<p>打开github主页时发现<strong>404</strong>，通过 <strong><em>hexo server</em></strong> 命令打开本地的主页配置时发现 Cannot Get/,所以搜索了一下解决办法，最终参考<a href=\"https://blog.csdn.net/loveLifeLoveCoding/article/details/121789466\">vue项目Error: Cannot find module ‘xxx’类报错的解决方法</a> 解决了主页打不开的问题。</p>\n<span id=\"more\"></span>\n<p>2.数学公式问题：</p>\n<p>这个问题是当我根据marktown写数学公式时，发现vscode上显示公式正确，但是配置到主页上时，公式就变成了源码，通过学习这个博客 <a href=\"https://blog.csdn.net/weixin_45511189/article/details/115798563\">hexo博客next主题添加对数学公式的支持</a>，得到解决。</p>\n<p>marktown的数学公式语法规则为：<a href=\"https://www.jianshu.com/p/f0de9f572c9d\">Marktown数学公式</a></p>\n","site":{"data":{}},"excerpt":"<p>在hexo配置个人主页的过程中，遇到一些环境配置问题，在这里整理一下大神们的解决办法：</p>\n<p>1.主页打不开的问题：</p>\n<p>打开github主页时发现<strong>404</strong>，通过 <strong><em>hexo server</em></strong> 命令打开本地的主页配置时发现 Cannot Get/,所以搜索了一下解决办法，最终参考<a href=\"https://blog.csdn.net/loveLifeLoveCoding/article/details/121789466\">vue项目Error: Cannot find module ‘xxx’类报错的解决方法</a> 解决了主页打不开的问题。</p>","more":"<p>2.数学公式问题：</p>\n<p>这个问题是当我根据marktown写数学公式时，发现vscode上显示公式正确，但是配置到主页上时，公式就变成了源码，通过学习这个博客 <a href=\"https://blog.csdn.net/weixin_45511189/article/details/115798563\">hexo博客next主题添加对数学公式的支持</a>，得到解决。</p>\n<p>marktown的数学公式语法规则为：<a href=\"https://www.jianshu.com/p/f0de9f572c9d\">Marktown数学公式</a></p>"},{"title":"模板+AI助手：网站开发的新范式","abbrlink":"template-ai-website","cover":"/images/kennanAi.png","date":"2025-07-09T15:55:00.000Z","_content":"\n> “后端人不会写网站？有模板+AI，照样能整出高大上的主页！”\n\n大家好，我是恺南，一个和bug斗智斗勇三年的后端程序员。\n\n## 🚀 1. 三年前的“电子简历”模板\n\n说实话，我本来只会写后端，前端页面一窍不通。三年前，为了找工作，我硬着头皮用Hexo模板搭了个个人主页，纯粹是为了有个电子简历能发链接。\n那会儿的我，能把模板跑起来就谢天谢地了，样式啥的全靠主题自带，能用就行。\n\n## 🤖 2. 模板+AI：升级的正确姿势\n\n这次升级，灵感来自AI。不是让AI从零帮我生成网站，而是——**在原有模板的基础上，让AI帮我改、帮我美化、帮我加新功能！**\n\n- **有模板打底**：不用担心页面结构、兼容性，省心省力。\n- **AI加持**：想要什么新功能、什么样式，直接和Cursor说，AI帮我写代码、调样式，效率飞起。\n\n## 🛠️ 3. 改造过程，省心又高效\n\n- **作品集**：以前没这玩意，AI帮我在模板上加了卡片式作品集，展示项目so easy。\n- **自我介绍**：AI帮我把“后端程序员”写得有梗又有范儿，访客一看就记住。\n- **样式美化**：字号、留白、配色，AI给建议，我点头，网站立马高大上。\n- **社交icon**：以前只会写“邮箱：xxx”，现在AI帮我一行icon全搞定，连SVG都不用抠。\n\n## 😂 4. 幽默彩蛋\n\n有模板+AI，后端人也能做出前端大佬的效果。\n有时候我和Cursor开玩笑：“要不是有你，我还在为div加margin发愁呢！”\n\n## 🌈 5. 总结\n\n- **有模板，省心**：不用从零造轮子，结构稳、样式美。\n- **有AI，省力**：想怎么改就怎么改，效率提升不是一星半点。\n- **新时代建站姿势**：后端人也能玩转高颜值个人主页！\n\n---\n\n> 关注我，带你体验更多AI驱动的开发新范式！ ","source":"_posts/011-template-ai-website.md","raw":"---\ntitle: 模板+AI助手：网站开发的新范式\ncategories:\n  - 技术杂谈\nabbrlink: template-ai-website\ncover: /images/kennanAi.png\ndate: 2025-07-09 23:55:00\ntags:\n  - AI开发\n  - 个人网站\n  - 前端\n---\n\n> “后端人不会写网站？有模板+AI，照样能整出高大上的主页！”\n\n大家好，我是恺南，一个和bug斗智斗勇三年的后端程序员。\n\n## 🚀 1. 三年前的“电子简历”模板\n\n说实话，我本来只会写后端，前端页面一窍不通。三年前，为了找工作，我硬着头皮用Hexo模板搭了个个人主页，纯粹是为了有个电子简历能发链接。\n那会儿的我，能把模板跑起来就谢天谢地了，样式啥的全靠主题自带，能用就行。\n\n## 🤖 2. 模板+AI：升级的正确姿势\n\n这次升级，灵感来自AI。不是让AI从零帮我生成网站，而是——**在原有模板的基础上，让AI帮我改、帮我美化、帮我加新功能！**\n\n- **有模板打底**：不用担心页面结构、兼容性，省心省力。\n- **AI加持**：想要什么新功能、什么样式，直接和Cursor说，AI帮我写代码、调样式，效率飞起。\n\n## 🛠️ 3. 改造过程，省心又高效\n\n- **作品集**：以前没这玩意，AI帮我在模板上加了卡片式作品集，展示项目so easy。\n- **自我介绍**：AI帮我把“后端程序员”写得有梗又有范儿，访客一看就记住。\n- **样式美化**：字号、留白、配色，AI给建议，我点头，网站立马高大上。\n- **社交icon**：以前只会写“邮箱：xxx”，现在AI帮我一行icon全搞定，连SVG都不用抠。\n\n## 😂 4. 幽默彩蛋\n\n有模板+AI，后端人也能做出前端大佬的效果。\n有时候我和Cursor开玩笑：“要不是有你，我还在为div加margin发愁呢！”\n\n## 🌈 5. 总结\n\n- **有模板，省心**：不用从零造轮子，结构稳、样式美。\n- **有AI，省力**：想怎么改就怎么改，效率提升不是一星半点。\n- **新时代建站姿势**：后端人也能玩转高颜值个人主页！\n\n---\n\n> 关注我，带你体验更多AI驱动的开发新范式！ ","slug":"011-template-ai-website","published":1,"updated":"2025-07-13T06:57:17.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qq000vu4voht1p517n","content":"<blockquote>\n<p>“后端人不会写网站？有模板+AI，照样能整出高大上的主页！”</p>\n</blockquote>\n<p>大家好，我是恺南，一个和bug斗智斗勇三年的后端程序员。</p>\n<h2 id=\"🚀-1-三年前的“电子简历”模板\"><a href=\"#🚀-1-三年前的“电子简历”模板\" class=\"headerlink\" title=\"🚀 1. 三年前的“电子简历”模板\"></a>🚀 1. 三年前的“电子简历”模板</h2><p>说实话，我本来只会写后端，前端页面一窍不通。三年前，为了找工作，我硬着头皮用Hexo模板搭了个个人主页，纯粹是为了有个电子简历能发链接。<br>那会儿的我，能把模板跑起来就谢天谢地了，样式啥的全靠主题自带，能用就行。</p>\n<h2 id=\"🤖-2-模板-AI：升级的正确姿势\"><a href=\"#🤖-2-模板-AI：升级的正确姿势\" class=\"headerlink\" title=\"🤖 2. 模板+AI：升级的正确姿势\"></a>🤖 2. 模板+AI：升级的正确姿势</h2><p>这次升级，灵感来自AI。不是让AI从零帮我生成网站，而是——<strong>在原有模板的基础上，让AI帮我改、帮我美化、帮我加新功能！</strong></p>\n<ul>\n<li><strong>有模板打底</strong>：不用担心页面结构、兼容性，省心省力。</li>\n<li><strong>AI加持</strong>：想要什么新功能、什么样式，直接和Cursor说，AI帮我写代码、调样式，效率飞起。</li>\n</ul>\n<h2 id=\"🛠️-3-改造过程，省心又高效\"><a href=\"#🛠️-3-改造过程，省心又高效\" class=\"headerlink\" title=\"🛠️ 3. 改造过程，省心又高效\"></a>🛠️ 3. 改造过程，省心又高效</h2><ul>\n<li><strong>作品集</strong>：以前没这玩意，AI帮我在模板上加了卡片式作品集，展示项目so easy。</li>\n<li><strong>自我介绍</strong>：AI帮我把“后端程序员”写得有梗又有范儿，访客一看就记住。</li>\n<li><strong>样式美化</strong>：字号、留白、配色，AI给建议，我点头，网站立马高大上。</li>\n<li><strong>社交icon</strong>：以前只会写“邮箱：xxx”，现在AI帮我一行icon全搞定，连SVG都不用抠。</li>\n</ul>\n<h2 id=\"😂-4-幽默彩蛋\"><a href=\"#😂-4-幽默彩蛋\" class=\"headerlink\" title=\"😂 4. 幽默彩蛋\"></a>😂 4. 幽默彩蛋</h2><p>有模板+AI，后端人也能做出前端大佬的效果。<br>有时候我和Cursor开玩笑：“要不是有你，我还在为div加margin发愁呢！”</p>\n<h2 id=\"🌈-5-总结\"><a href=\"#🌈-5-总结\" class=\"headerlink\" title=\"🌈 5. 总结\"></a>🌈 5. 总结</h2><ul>\n<li><strong>有模板，省心</strong>：不用从零造轮子，结构稳、样式美。</li>\n<li><strong>有AI，省力</strong>：想怎么改就怎么改，效率提升不是一星半点。</li>\n<li><strong>新时代建站姿势</strong>：后端人也能玩转高颜值个人主页！</li>\n</ul>\n<hr>\n<blockquote>\n<p>关注我，带你体验更多AI驱动的开发新范式！ </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>“后端人不会写网站？有模板+AI，照样能整出高大上的主页！”</p>\n</blockquote>\n<p>大家好，我是恺南，一个和bug斗智斗勇三年的后端程序员。</p>\n<h2 id=\"🚀-1-三年前的“电子简历”模板\"><a href=\"#🚀-1-三年前的“电子简历”模板\" class=\"headerlink\" title=\"🚀 1. 三年前的“电子简历”模板\"></a>🚀 1. 三年前的“电子简历”模板</h2><p>说实话，我本来只会写后端，前端页面一窍不通。三年前，为了找工作，我硬着头皮用Hexo模板搭了个个人主页，纯粹是为了有个电子简历能发链接。<br>那会儿的我，能把模板跑起来就谢天谢地了，样式啥的全靠主题自带，能用就行。</p>\n<h2 id=\"🤖-2-模板-AI：升级的正确姿势\"><a href=\"#🤖-2-模板-AI：升级的正确姿势\" class=\"headerlink\" title=\"🤖 2. 模板+AI：升级的正确姿势\"></a>🤖 2. 模板+AI：升级的正确姿势</h2><p>这次升级，灵感来自AI。不是让AI从零帮我生成网站，而是——<strong>在原有模板的基础上，让AI帮我改、帮我美化、帮我加新功能！</strong></p>\n<ul>\n<li><strong>有模板打底</strong>：不用担心页面结构、兼容性，省心省力。</li>\n<li><strong>AI加持</strong>：想要什么新功能、什么样式，直接和Cursor说，AI帮我写代码、调样式，效率飞起。</li>\n</ul>\n<h2 id=\"🛠️-3-改造过程，省心又高效\"><a href=\"#🛠️-3-改造过程，省心又高效\" class=\"headerlink\" title=\"🛠️ 3. 改造过程，省心又高效\"></a>🛠️ 3. 改造过程，省心又高效</h2><ul>\n<li><strong>作品集</strong>：以前没这玩意，AI帮我在模板上加了卡片式作品集，展示项目so easy。</li>\n<li><strong>自我介绍</strong>：AI帮我把“后端程序员”写得有梗又有范儿，访客一看就记住。</li>\n<li><strong>样式美化</strong>：字号、留白、配色，AI给建议，我点头，网站立马高大上。</li>\n<li><strong>社交icon</strong>：以前只会写“邮箱：xxx”，现在AI帮我一行icon全搞定，连SVG都不用抠。</li>\n</ul>\n<h2 id=\"😂-4-幽默彩蛋\"><a href=\"#😂-4-幽默彩蛋\" class=\"headerlink\" title=\"😂 4. 幽默彩蛋\"></a>😂 4. 幽默彩蛋</h2><p>有模板+AI，后端人也能做出前端大佬的效果。<br>有时候我和Cursor开玩笑：“要不是有你，我还在为div加margin发愁呢！”</p>\n<h2 id=\"🌈-5-总结\"><a href=\"#🌈-5-总结\" class=\"headerlink\" title=\"🌈 5. 总结\"></a>🌈 5. 总结</h2><ul>\n<li><strong>有模板，省心</strong>：不用从零造轮子，结构稳、样式美。</li>\n<li><strong>有AI，省力</strong>：想怎么改就怎么改，效率提升不是一星半点。</li>\n<li><strong>新时代建站姿势</strong>：后端人也能玩转高颜值个人主页！</li>\n</ul>\n<hr>\n<blockquote>\n<p>关注我，带你体验更多AI驱动的开发新范式！ </p>\n</blockquote>\n"},{"title":"当AI学会“团队协作”：从Mass框架看多智能体系统的进化之路","abbrlink":"multi-agent-design-mass","date":"2024-07-10T12:00:00.000Z","cover":"/images/kennanAi.png","_content":"\n# \"论文读后感 | Multi-Agent Design: Optimizing Agents with Better Prompts and Topologies\"\n\n在大语言模型（LLM）横扫AI领域的今天，我们早已习惯了单个模型在翻译、写作、代码生成等任务中的惊艳表现。但当面对更复杂的挑战——比如解一道需要多步推理的数学题、分析一篇跨文档的多跳问答，或是调试一段藏着隐蔽bug的代码时，单枪匹马的模型往往力不从心。这时候，一个新的思路逐渐清晰：让多个AI智能体像人类团队一样协作，会不会迸发更强的力量？\n\n最近读到Google和剑桥大学联合发表的论文《Multi-Agent Design: Optimizing Agents with Better Prompts and Topologies》，终于找到了这个问题的系统答案。这篇论文不仅揭示了多智能体系统（MAS）的核心设计密码，更提出了一套名为Mass的优化框架，让AI团队的“协作效率”实现了质的飞跃。\n\n## 多智能体系统：不只是“人多力量大”\n\n提到多智能体系统，你可能会想：不就是让多个AI模型一起干活吗？但事实远没这么简单。论文开篇就点出了一个关键矛盾：当多个智能体协作时，**提示词的微小改动**可能引发连锁反应（比如A的输出作为B的输入，误差会被放大），而**智能体的连接方式**（拓扑结构）更是千变万化——有的并行工作，有的串行接力，有的互相辩论，到底哪种组合才最高效？\n\n研究者们通过实验发现了两个反常识的结论：\n- **提示词比数量更重要**：给单个智能体优化提示词，比盲目增加智能体数量更有效。比如在数学推理任务中，经过优化的单智能体配合少量协作，性能远超“人海战术”。\n\n![图2：Gemini 1.5 Pro在MATH任务上提示优化智能体的准确率与总令牌计数对比](/images/MASfigure2.png)\n\n这张图清晰展示了提示优化的力量：随着计算资源（令牌数）增加，经过提示优化的智能体准确率持续攀升，而单纯依靠“自我一致性”“多智能体辩论”等扩展方式的系统很快陷入瓶颈，直观印证了“精准提示优于盲目堆量”的结论。\n- **不是所有拓扑都有用**：像“辩论”“聚合”这样的拓扑结构可能提升性能，但有些结构反而会拖后腿。在HotpotQA任务中，只有“辩论”拓扑带来了3%的提升，其他结构甚至导致性能下降。\n\n![图3：Gemini 1.5 Pro不同拓扑结构的性能对比](/images/MASfigure3.png)\n\n通过对比不同拓扑与基础智能体的性能数据，我们能清晰看到：拓扑结构的价值高度分化，盲目组合反而可能降低效率，这也解释了为什么“筛选有效拓扑”是设计MAS的关键。\n\n这让我想起人类团队的协作：一个高效的团队，既需要每个成员明确分工（类似优化提示词），也需要合理的沟通机制（类似拓扑结构）。如果成员角色模糊、沟通混乱，人再多也无济于事。\n\n## Mass框架：给AI团队“搭班子”的智慧\n\n既然提示词和拓扑结构这么重要，怎么才能找到最优组合？论文提出的Mass框架给出了一套漂亮的解决方案。它不像传统方法那样“眉毛胡子一把抓”，而是分三步走：\n\n![图1：Mass框架示意图](/images/MASfigure1.png)\n\n这张图直观呈现了Mass的核心逻辑：从左侧的“多智能体设计空间”（包含提示词组件和拓扑模块）出发，通过交错优化提示词和拓扑结构，最终得到右侧“优化后的智能体系统”。整个过程像搭积木一样，先打磨好每个零件，再设计拼接方式，最后微调整体稳定性。\n\n1. **先练内功：块级提示词优化**  \n   就像球队先训练每个位置的球员，Mass先给每个智能体“量身定制”提示词。比如让“计算器”智能体专注于精准运算，让“检查者”智能体擅长挑错。这一步用了自动提示词优化技术，连示例和指令都精细调整，确保每个智能体“术业有专攻”。\n\n2. **搭好骨架：工作流拓扑优化**  \n   有了优秀的个体，下一步是设计协作方式。Mass会根据前一步的结果，筛选出那些真正有效的拓扑结构（比如排除掉拖后腿的），再组合出高效的工作流。比如在数学推理任务中，它发现“9个并行计算器+0个辩论者”的结构效果最好。\n\n3. **全局调优：工作流级提示词优化**  \n   最后，Mass会站在全局视角，微调整个团队的“沟通话术”。比如让“计算器”的输出格式更适合“检查者”快速理解，减少协作摩擦。\n\n![图5：Mass优化阶段性能及对比消融研究](/images/MASfigure5.png)\n\n这张图通过阶段性能曲线和对照组数据，生动说明：每个优化步骤都在“踩在前一步的肩膀上”提升——块级优化打好基础，拓扑优化搭建框架，全局优化消除协作缝隙。而“无剪枝”“无前序提示优化”的对照组性能明显落后，更凸显了Mass分阶段逻辑的合理性。\n\n这种“从局部到全局”的思路，完美解决了多智能体系统的复杂性。实验结果也很亮眼：在数学推理、代码生成等8项任务中，Mass优化的系统平均性能比现有方法高出8%-14%，尤其在LiveCodeBench编码任务中，准确率直接从66%飙升到82%。\n\n![图6：Mass与自动代理设计基线的优化轨迹对比](/images/MASfigure6.png)\n\n通过对比Mass与ADAS、AFlow等方法的优化曲线，我们能清晰看到：Mass的性能提升更稳定、更高效。其他方法要么波动剧烈，要么早早陷入停滞，而Mass像“螺旋上升”一样稳步逼近最优解，这得益于它对“提示词+拓扑”的协同优化。\n\n![图7：Mass在MATH任务上的优化轨迹示例](/images/MASfigure7.png)\n\n以数学推理任务为例，这张图完整展示了Mass的“进化路径”：从初始的零样本CoT智能体，到块级优化发现“辩论拓扑”更优，再到拓扑优化发现“聚合并行智能体”性能更强，最后通过全局提示优化锁定最佳方案。整个过程像“团队试错-调整-精进”的真实写照，让抽象框架变得可触可感。\n\n## 写给开发者：多智能体系统的实用启示\n\n读完这篇论文，我最大的感触是：**未来的AI应用，拼的不是单个模型的“智商”，而是团队的“协作力”**。Mass框架给我们的启示远不止技术细节，更有一套可落地的设计原则：\n\n- **先优化个体，再设计协作**：别急于堆砌智能体数量，先把每个角色的提示词打磨到极致。\n- **警惕“无效协作”**：不是所有拓扑结构都有价值，多做 ablation study（控制变量实验），找出真正有效的组合。\n- **动态调整优于固定模式**：就像人类团队会根据任务调整分工，多智能体系统也需要灵活的拓扑结构。比如简单任务用并行计算，复杂任务加入辩论环节。\n\n对于开发者来说，Mass框架提供了一个现成的“搭班子”工具。无论是做数据分析还是代码生成，你都可以先用它优化单个智能体的提示词，再尝试不同的协作方式，最后全局微调——这套流程能帮你少走很多弯路。\n\n## 结语：AI的“群体智慧”时代正在到来\n\n从AlphaGo的团队协作击败人类棋手，到如今Mass框架让AI团队高效解决复杂任务，我们正在见证一个新趋势：AI的进步不再是单点突破，而是“群体智慧”的胜利。\n\n这篇论文不仅为多智能体系统设计提供了方法论，更暗示了未来AI的发展方向——就像人类社会的进步离不开分工与协作，AI的下一个里程碑，或许就藏在这些“智能体团队”的高效协作中。\n\n如果你也在开发复杂的AI应用，不妨试试Mass的思路：先让每个智能体“做好自己”，再让它们“好好配合”。说不定，你的下一个爆款应用，就诞生于这样的“AI团队协作”之中。","source":"_posts/012-multi-agent-design-mass.md","raw":"---\ntitle: 当AI学会“团队协作”：从Mass框架看多智能体系统的进化之路\ncategories:\n  - 技术杂谈\nabbrlink: multi-agent-design-mass\ndate: 2024-07-10 20:00:00\ntags:\n  - 多智能体系统\n  - LLM\n  - AI论文\n  - 读后感\ncover: /images/kennanAi.png\n---\n\n# \"论文读后感 | Multi-Agent Design: Optimizing Agents with Better Prompts and Topologies\"\n\n在大语言模型（LLM）横扫AI领域的今天，我们早已习惯了单个模型在翻译、写作、代码生成等任务中的惊艳表现。但当面对更复杂的挑战——比如解一道需要多步推理的数学题、分析一篇跨文档的多跳问答，或是调试一段藏着隐蔽bug的代码时，单枪匹马的模型往往力不从心。这时候，一个新的思路逐渐清晰：让多个AI智能体像人类团队一样协作，会不会迸发更强的力量？\n\n最近读到Google和剑桥大学联合发表的论文《Multi-Agent Design: Optimizing Agents with Better Prompts and Topologies》，终于找到了这个问题的系统答案。这篇论文不仅揭示了多智能体系统（MAS）的核心设计密码，更提出了一套名为Mass的优化框架，让AI团队的“协作效率”实现了质的飞跃。\n\n## 多智能体系统：不只是“人多力量大”\n\n提到多智能体系统，你可能会想：不就是让多个AI模型一起干活吗？但事实远没这么简单。论文开篇就点出了一个关键矛盾：当多个智能体协作时，**提示词的微小改动**可能引发连锁反应（比如A的输出作为B的输入，误差会被放大），而**智能体的连接方式**（拓扑结构）更是千变万化——有的并行工作，有的串行接力，有的互相辩论，到底哪种组合才最高效？\n\n研究者们通过实验发现了两个反常识的结论：\n- **提示词比数量更重要**：给单个智能体优化提示词，比盲目增加智能体数量更有效。比如在数学推理任务中，经过优化的单智能体配合少量协作，性能远超“人海战术”。\n\n![图2：Gemini 1.5 Pro在MATH任务上提示优化智能体的准确率与总令牌计数对比](/images/MASfigure2.png)\n\n这张图清晰展示了提示优化的力量：随着计算资源（令牌数）增加，经过提示优化的智能体准确率持续攀升，而单纯依靠“自我一致性”“多智能体辩论”等扩展方式的系统很快陷入瓶颈，直观印证了“精准提示优于盲目堆量”的结论。\n- **不是所有拓扑都有用**：像“辩论”“聚合”这样的拓扑结构可能提升性能，但有些结构反而会拖后腿。在HotpotQA任务中，只有“辩论”拓扑带来了3%的提升，其他结构甚至导致性能下降。\n\n![图3：Gemini 1.5 Pro不同拓扑结构的性能对比](/images/MASfigure3.png)\n\n通过对比不同拓扑与基础智能体的性能数据，我们能清晰看到：拓扑结构的价值高度分化，盲目组合反而可能降低效率，这也解释了为什么“筛选有效拓扑”是设计MAS的关键。\n\n这让我想起人类团队的协作：一个高效的团队，既需要每个成员明确分工（类似优化提示词），也需要合理的沟通机制（类似拓扑结构）。如果成员角色模糊、沟通混乱，人再多也无济于事。\n\n## Mass框架：给AI团队“搭班子”的智慧\n\n既然提示词和拓扑结构这么重要，怎么才能找到最优组合？论文提出的Mass框架给出了一套漂亮的解决方案。它不像传统方法那样“眉毛胡子一把抓”，而是分三步走：\n\n![图1：Mass框架示意图](/images/MASfigure1.png)\n\n这张图直观呈现了Mass的核心逻辑：从左侧的“多智能体设计空间”（包含提示词组件和拓扑模块）出发，通过交错优化提示词和拓扑结构，最终得到右侧“优化后的智能体系统”。整个过程像搭积木一样，先打磨好每个零件，再设计拼接方式，最后微调整体稳定性。\n\n1. **先练内功：块级提示词优化**  \n   就像球队先训练每个位置的球员，Mass先给每个智能体“量身定制”提示词。比如让“计算器”智能体专注于精准运算，让“检查者”智能体擅长挑错。这一步用了自动提示词优化技术，连示例和指令都精细调整，确保每个智能体“术业有专攻”。\n\n2. **搭好骨架：工作流拓扑优化**  \n   有了优秀的个体，下一步是设计协作方式。Mass会根据前一步的结果，筛选出那些真正有效的拓扑结构（比如排除掉拖后腿的），再组合出高效的工作流。比如在数学推理任务中，它发现“9个并行计算器+0个辩论者”的结构效果最好。\n\n3. **全局调优：工作流级提示词优化**  \n   最后，Mass会站在全局视角，微调整个团队的“沟通话术”。比如让“计算器”的输出格式更适合“检查者”快速理解，减少协作摩擦。\n\n![图5：Mass优化阶段性能及对比消融研究](/images/MASfigure5.png)\n\n这张图通过阶段性能曲线和对照组数据，生动说明：每个优化步骤都在“踩在前一步的肩膀上”提升——块级优化打好基础，拓扑优化搭建框架，全局优化消除协作缝隙。而“无剪枝”“无前序提示优化”的对照组性能明显落后，更凸显了Mass分阶段逻辑的合理性。\n\n这种“从局部到全局”的思路，完美解决了多智能体系统的复杂性。实验结果也很亮眼：在数学推理、代码生成等8项任务中，Mass优化的系统平均性能比现有方法高出8%-14%，尤其在LiveCodeBench编码任务中，准确率直接从66%飙升到82%。\n\n![图6：Mass与自动代理设计基线的优化轨迹对比](/images/MASfigure6.png)\n\n通过对比Mass与ADAS、AFlow等方法的优化曲线，我们能清晰看到：Mass的性能提升更稳定、更高效。其他方法要么波动剧烈，要么早早陷入停滞，而Mass像“螺旋上升”一样稳步逼近最优解，这得益于它对“提示词+拓扑”的协同优化。\n\n![图7：Mass在MATH任务上的优化轨迹示例](/images/MASfigure7.png)\n\n以数学推理任务为例，这张图完整展示了Mass的“进化路径”：从初始的零样本CoT智能体，到块级优化发现“辩论拓扑”更优，再到拓扑优化发现“聚合并行智能体”性能更强，最后通过全局提示优化锁定最佳方案。整个过程像“团队试错-调整-精进”的真实写照，让抽象框架变得可触可感。\n\n## 写给开发者：多智能体系统的实用启示\n\n读完这篇论文，我最大的感触是：**未来的AI应用，拼的不是单个模型的“智商”，而是团队的“协作力”**。Mass框架给我们的启示远不止技术细节，更有一套可落地的设计原则：\n\n- **先优化个体，再设计协作**：别急于堆砌智能体数量，先把每个角色的提示词打磨到极致。\n- **警惕“无效协作”**：不是所有拓扑结构都有价值，多做 ablation study（控制变量实验），找出真正有效的组合。\n- **动态调整优于固定模式**：就像人类团队会根据任务调整分工，多智能体系统也需要灵活的拓扑结构。比如简单任务用并行计算，复杂任务加入辩论环节。\n\n对于开发者来说，Mass框架提供了一个现成的“搭班子”工具。无论是做数据分析还是代码生成，你都可以先用它优化单个智能体的提示词，再尝试不同的协作方式，最后全局微调——这套流程能帮你少走很多弯路。\n\n## 结语：AI的“群体智慧”时代正在到来\n\n从AlphaGo的团队协作击败人类棋手，到如今Mass框架让AI团队高效解决复杂任务，我们正在见证一个新趋势：AI的进步不再是单点突破，而是“群体智慧”的胜利。\n\n这篇论文不仅为多智能体系统设计提供了方法论，更暗示了未来AI的发展方向——就像人类社会的进步离不开分工与协作，AI的下一个里程碑，或许就藏在这些“智能体团队”的高效协作中。\n\n如果你也在开发复杂的AI应用，不妨试试Mass的思路：先让每个智能体“做好自己”，再让它们“好好配合”。说不定，你的下一个爆款应用，就诞生于这样的“AI团队协作”之中。","slug":"012-multi-agent-design-mass","published":1,"updated":"2025-07-13T06:57:17.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qq000xu4voa8r76c84","content":"<h1 id=\"“论文读后感-Multi-Agent-Design-Optimizing-Agents-with-Better-Prompts-and-Topologies”\"><a href=\"#“论文读后感-Multi-Agent-Design-Optimizing-Agents-with-Better-Prompts-and-Topologies”\" class=\"headerlink\" title=\"“论文读后感 | Multi-Agent Design: Optimizing Agents with Better Prompts and Topologies”\"></a>“论文读后感 | Multi-Agent Design: Optimizing Agents with Better Prompts and Topologies”</h1><p>在大语言模型（LLM）横扫AI领域的今天，我们早已习惯了单个模型在翻译、写作、代码生成等任务中的惊艳表现。但当面对更复杂的挑战——比如解一道需要多步推理的数学题、分析一篇跨文档的多跳问答，或是调试一段藏着隐蔽bug的代码时，单枪匹马的模型往往力不从心。这时候，一个新的思路逐渐清晰：让多个AI智能体像人类团队一样协作，会不会迸发更强的力量？</p>\n<p>最近读到Google和剑桥大学联合发表的论文《Multi-Agent Design: Optimizing Agents with Better Prompts and Topologies》，终于找到了这个问题的系统答案。这篇论文不仅揭示了多智能体系统（MAS）的核心设计密码，更提出了一套名为Mass的优化框架，让AI团队的“协作效率”实现了质的飞跃。</p>\n<h2 id=\"多智能体系统：不只是“人多力量大”\"><a href=\"#多智能体系统：不只是“人多力量大”\" class=\"headerlink\" title=\"多智能体系统：不只是“人多力量大”\"></a>多智能体系统：不只是“人多力量大”</h2><p>提到多智能体系统，你可能会想：不就是让多个AI模型一起干活吗？但事实远没这么简单。论文开篇就点出了一个关键矛盾：当多个智能体协作时，<strong>提示词的微小改动</strong>可能引发连锁反应（比如A的输出作为B的输入，误差会被放大），而<strong>智能体的连接方式</strong>（拓扑结构）更是千变万化——有的并行工作，有的串行接力，有的互相辩论，到底哪种组合才最高效？</p>\n<p>研究者们通过实验发现了两个反常识的结论：</p>\n<ul>\n<li><strong>提示词比数量更重要</strong>：给单个智能体优化提示词，比盲目增加智能体数量更有效。比如在数学推理任务中，经过优化的单智能体配合少量协作，性能远超“人海战术”。</li>\n</ul>\n<p><img src=\"/images/MASfigure2.png\" alt=\"图2：Gemini 1.5 Pro在MATH任务上提示优化智能体的准确率与总令牌计数对比\"></p>\n<p>这张图清晰展示了提示优化的力量：随着计算资源（令牌数）增加，经过提示优化的智能体准确率持续攀升，而单纯依靠“自我一致性”“多智能体辩论”等扩展方式的系统很快陷入瓶颈，直观印证了“精准提示优于盲目堆量”的结论。</p>\n<ul>\n<li><strong>不是所有拓扑都有用</strong>：像“辩论”“聚合”这样的拓扑结构可能提升性能，但有些结构反而会拖后腿。在HotpotQA任务中，只有“辩论”拓扑带来了3%的提升，其他结构甚至导致性能下降。</li>\n</ul>\n<p><img src=\"/images/MASfigure3.png\" alt=\"图3：Gemini 1.5 Pro不同拓扑结构的性能对比\"></p>\n<p>通过对比不同拓扑与基础智能体的性能数据，我们能清晰看到：拓扑结构的价值高度分化，盲目组合反而可能降低效率，这也解释了为什么“筛选有效拓扑”是设计MAS的关键。</p>\n<p>这让我想起人类团队的协作：一个高效的团队，既需要每个成员明确分工（类似优化提示词），也需要合理的沟通机制（类似拓扑结构）。如果成员角色模糊、沟通混乱，人再多也无济于事。</p>\n<h2 id=\"Mass框架：给AI团队“搭班子”的智慧\"><a href=\"#Mass框架：给AI团队“搭班子”的智慧\" class=\"headerlink\" title=\"Mass框架：给AI团队“搭班子”的智慧\"></a>Mass框架：给AI团队“搭班子”的智慧</h2><p>既然提示词和拓扑结构这么重要，怎么才能找到最优组合？论文提出的Mass框架给出了一套漂亮的解决方案。它不像传统方法那样“眉毛胡子一把抓”，而是分三步走：</p>\n<p><img src=\"/images/MASfigure1.png\" alt=\"图1：Mass框架示意图\"></p>\n<p>这张图直观呈现了Mass的核心逻辑：从左侧的“多智能体设计空间”（包含提示词组件和拓扑模块）出发，通过交错优化提示词和拓扑结构，最终得到右侧“优化后的智能体系统”。整个过程像搭积木一样，先打磨好每个零件，再设计拼接方式，最后微调整体稳定性。</p>\n<ol>\n<li><p><strong>先练内功：块级提示词优化</strong><br>就像球队先训练每个位置的球员，Mass先给每个智能体“量身定制”提示词。比如让“计算器”智能体专注于精准运算，让“检查者”智能体擅长挑错。这一步用了自动提示词优化技术，连示例和指令都精细调整，确保每个智能体“术业有专攻”。</p>\n</li>\n<li><p><strong>搭好骨架：工作流拓扑优化</strong><br>有了优秀的个体，下一步是设计协作方式。Mass会根据前一步的结果，筛选出那些真正有效的拓扑结构（比如排除掉拖后腿的），再组合出高效的工作流。比如在数学推理任务中，它发现“9个并行计算器+0个辩论者”的结构效果最好。</p>\n</li>\n<li><p><strong>全局调优：工作流级提示词优化</strong><br>最后，Mass会站在全局视角，微调整个团队的“沟通话术”。比如让“计算器”的输出格式更适合“检查者”快速理解，减少协作摩擦。</p>\n</li>\n</ol>\n<p><img src=\"/images/MASfigure5.png\" alt=\"图5：Mass优化阶段性能及对比消融研究\"></p>\n<p>这张图通过阶段性能曲线和对照组数据，生动说明：每个优化步骤都在“踩在前一步的肩膀上”提升——块级优化打好基础，拓扑优化搭建框架，全局优化消除协作缝隙。而“无剪枝”“无前序提示优化”的对照组性能明显落后，更凸显了Mass分阶段逻辑的合理性。</p>\n<p>这种“从局部到全局”的思路，完美解决了多智能体系统的复杂性。实验结果也很亮眼：在数学推理、代码生成等8项任务中，Mass优化的系统平均性能比现有方法高出8%-14%，尤其在LiveCodeBench编码任务中，准确率直接从66%飙升到82%。</p>\n<p><img src=\"/images/MASfigure6.png\" alt=\"图6：Mass与自动代理设计基线的优化轨迹对比\"></p>\n<p>通过对比Mass与ADAS、AFlow等方法的优化曲线，我们能清晰看到：Mass的性能提升更稳定、更高效。其他方法要么波动剧烈，要么早早陷入停滞，而Mass像“螺旋上升”一样稳步逼近最优解，这得益于它对“提示词+拓扑”的协同优化。</p>\n<p><img src=\"/images/MASfigure7.png\" alt=\"图7：Mass在MATH任务上的优化轨迹示例\"></p>\n<p>以数学推理任务为例，这张图完整展示了Mass的“进化路径”：从初始的零样本CoT智能体，到块级优化发现“辩论拓扑”更优，再到拓扑优化发现“聚合并行智能体”性能更强，最后通过全局提示优化锁定最佳方案。整个过程像“团队试错-调整-精进”的真实写照，让抽象框架变得可触可感。</p>\n<h2 id=\"写给开发者：多智能体系统的实用启示\"><a href=\"#写给开发者：多智能体系统的实用启示\" class=\"headerlink\" title=\"写给开发者：多智能体系统的实用启示\"></a>写给开发者：多智能体系统的实用启示</h2><p>读完这篇论文，我最大的感触是：<strong>未来的AI应用，拼的不是单个模型的“智商”，而是团队的“协作力”</strong>。Mass框架给我们的启示远不止技术细节，更有一套可落地的设计原则：</p>\n<ul>\n<li><strong>先优化个体，再设计协作</strong>：别急于堆砌智能体数量，先把每个角色的提示词打磨到极致。</li>\n<li><strong>警惕“无效协作”</strong>：不是所有拓扑结构都有价值，多做 ablation study（控制变量实验），找出真正有效的组合。</li>\n<li><strong>动态调整优于固定模式</strong>：就像人类团队会根据任务调整分工，多智能体系统也需要灵活的拓扑结构。比如简单任务用并行计算，复杂任务加入辩论环节。</li>\n</ul>\n<p>对于开发者来说，Mass框架提供了一个现成的“搭班子”工具。无论是做数据分析还是代码生成，你都可以先用它优化单个智能体的提示词，再尝试不同的协作方式，最后全局微调——这套流程能帮你少走很多弯路。</p>\n<h2 id=\"结语：AI的“群体智慧”时代正在到来\"><a href=\"#结语：AI的“群体智慧”时代正在到来\" class=\"headerlink\" title=\"结语：AI的“群体智慧”时代正在到来\"></a>结语：AI的“群体智慧”时代正在到来</h2><p>从AlphaGo的团队协作击败人类棋手，到如今Mass框架让AI团队高效解决复杂任务，我们正在见证一个新趋势：AI的进步不再是单点突破，而是“群体智慧”的胜利。</p>\n<p>这篇论文不仅为多智能体系统设计提供了方法论，更暗示了未来AI的发展方向——就像人类社会的进步离不开分工与协作，AI的下一个里程碑，或许就藏在这些“智能体团队”的高效协作中。</p>\n<p>如果你也在开发复杂的AI应用，不妨试试Mass的思路：先让每个智能体“做好自己”，再让它们“好好配合”。说不定，你的下一个爆款应用，就诞生于这样的“AI团队协作”之中。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"“论文读后感-Multi-Agent-Design-Optimizing-Agents-with-Better-Prompts-and-Topologies”\"><a href=\"#“论文读后感-Multi-Agent-Design-Optimizing-Agents-with-Better-Prompts-and-Topologies”\" class=\"headerlink\" title=\"“论文读后感 | Multi-Agent Design: Optimizing Agents with Better Prompts and Topologies”\"></a>“论文读后感 | Multi-Agent Design: Optimizing Agents with Better Prompts and Topologies”</h1><p>在大语言模型（LLM）横扫AI领域的今天，我们早已习惯了单个模型在翻译、写作、代码生成等任务中的惊艳表现。但当面对更复杂的挑战——比如解一道需要多步推理的数学题、分析一篇跨文档的多跳问答，或是调试一段藏着隐蔽bug的代码时，单枪匹马的模型往往力不从心。这时候，一个新的思路逐渐清晰：让多个AI智能体像人类团队一样协作，会不会迸发更强的力量？</p>\n<p>最近读到Google和剑桥大学联合发表的论文《Multi-Agent Design: Optimizing Agents with Better Prompts and Topologies》，终于找到了这个问题的系统答案。这篇论文不仅揭示了多智能体系统（MAS）的核心设计密码，更提出了一套名为Mass的优化框架，让AI团队的“协作效率”实现了质的飞跃。</p>\n<h2 id=\"多智能体系统：不只是“人多力量大”\"><a href=\"#多智能体系统：不只是“人多力量大”\" class=\"headerlink\" title=\"多智能体系统：不只是“人多力量大”\"></a>多智能体系统：不只是“人多力量大”</h2><p>提到多智能体系统，你可能会想：不就是让多个AI模型一起干活吗？但事实远没这么简单。论文开篇就点出了一个关键矛盾：当多个智能体协作时，<strong>提示词的微小改动</strong>可能引发连锁反应（比如A的输出作为B的输入，误差会被放大），而<strong>智能体的连接方式</strong>（拓扑结构）更是千变万化——有的并行工作，有的串行接力，有的互相辩论，到底哪种组合才最高效？</p>\n<p>研究者们通过实验发现了两个反常识的结论：</p>\n<ul>\n<li><strong>提示词比数量更重要</strong>：给单个智能体优化提示词，比盲目增加智能体数量更有效。比如在数学推理任务中，经过优化的单智能体配合少量协作，性能远超“人海战术”。</li>\n</ul>\n<p><img src=\"/images/MASfigure2.png\" alt=\"图2：Gemini 1.5 Pro在MATH任务上提示优化智能体的准确率与总令牌计数对比\"></p>\n<p>这张图清晰展示了提示优化的力量：随着计算资源（令牌数）增加，经过提示优化的智能体准确率持续攀升，而单纯依靠“自我一致性”“多智能体辩论”等扩展方式的系统很快陷入瓶颈，直观印证了“精准提示优于盲目堆量”的结论。</p>\n<ul>\n<li><strong>不是所有拓扑都有用</strong>：像“辩论”“聚合”这样的拓扑结构可能提升性能，但有些结构反而会拖后腿。在HotpotQA任务中，只有“辩论”拓扑带来了3%的提升，其他结构甚至导致性能下降。</li>\n</ul>\n<p><img src=\"/images/MASfigure3.png\" alt=\"图3：Gemini 1.5 Pro不同拓扑结构的性能对比\"></p>\n<p>通过对比不同拓扑与基础智能体的性能数据，我们能清晰看到：拓扑结构的价值高度分化，盲目组合反而可能降低效率，这也解释了为什么“筛选有效拓扑”是设计MAS的关键。</p>\n<p>这让我想起人类团队的协作：一个高效的团队，既需要每个成员明确分工（类似优化提示词），也需要合理的沟通机制（类似拓扑结构）。如果成员角色模糊、沟通混乱，人再多也无济于事。</p>\n<h2 id=\"Mass框架：给AI团队“搭班子”的智慧\"><a href=\"#Mass框架：给AI团队“搭班子”的智慧\" class=\"headerlink\" title=\"Mass框架：给AI团队“搭班子”的智慧\"></a>Mass框架：给AI团队“搭班子”的智慧</h2><p>既然提示词和拓扑结构这么重要，怎么才能找到最优组合？论文提出的Mass框架给出了一套漂亮的解决方案。它不像传统方法那样“眉毛胡子一把抓”，而是分三步走：</p>\n<p><img src=\"/images/MASfigure1.png\" alt=\"图1：Mass框架示意图\"></p>\n<p>这张图直观呈现了Mass的核心逻辑：从左侧的“多智能体设计空间”（包含提示词组件和拓扑模块）出发，通过交错优化提示词和拓扑结构，最终得到右侧“优化后的智能体系统”。整个过程像搭积木一样，先打磨好每个零件，再设计拼接方式，最后微调整体稳定性。</p>\n<ol>\n<li><p><strong>先练内功：块级提示词优化</strong><br>就像球队先训练每个位置的球员，Mass先给每个智能体“量身定制”提示词。比如让“计算器”智能体专注于精准运算，让“检查者”智能体擅长挑错。这一步用了自动提示词优化技术，连示例和指令都精细调整，确保每个智能体“术业有专攻”。</p>\n</li>\n<li><p><strong>搭好骨架：工作流拓扑优化</strong><br>有了优秀的个体，下一步是设计协作方式。Mass会根据前一步的结果，筛选出那些真正有效的拓扑结构（比如排除掉拖后腿的），再组合出高效的工作流。比如在数学推理任务中，它发现“9个并行计算器+0个辩论者”的结构效果最好。</p>\n</li>\n<li><p><strong>全局调优：工作流级提示词优化</strong><br>最后，Mass会站在全局视角，微调整个团队的“沟通话术”。比如让“计算器”的输出格式更适合“检查者”快速理解，减少协作摩擦。</p>\n</li>\n</ol>\n<p><img src=\"/images/MASfigure5.png\" alt=\"图5：Mass优化阶段性能及对比消融研究\"></p>\n<p>这张图通过阶段性能曲线和对照组数据，生动说明：每个优化步骤都在“踩在前一步的肩膀上”提升——块级优化打好基础，拓扑优化搭建框架，全局优化消除协作缝隙。而“无剪枝”“无前序提示优化”的对照组性能明显落后，更凸显了Mass分阶段逻辑的合理性。</p>\n<p>这种“从局部到全局”的思路，完美解决了多智能体系统的复杂性。实验结果也很亮眼：在数学推理、代码生成等8项任务中，Mass优化的系统平均性能比现有方法高出8%-14%，尤其在LiveCodeBench编码任务中，准确率直接从66%飙升到82%。</p>\n<p><img src=\"/images/MASfigure6.png\" alt=\"图6：Mass与自动代理设计基线的优化轨迹对比\"></p>\n<p>通过对比Mass与ADAS、AFlow等方法的优化曲线，我们能清晰看到：Mass的性能提升更稳定、更高效。其他方法要么波动剧烈，要么早早陷入停滞，而Mass像“螺旋上升”一样稳步逼近最优解，这得益于它对“提示词+拓扑”的协同优化。</p>\n<p><img src=\"/images/MASfigure7.png\" alt=\"图7：Mass在MATH任务上的优化轨迹示例\"></p>\n<p>以数学推理任务为例，这张图完整展示了Mass的“进化路径”：从初始的零样本CoT智能体，到块级优化发现“辩论拓扑”更优，再到拓扑优化发现“聚合并行智能体”性能更强，最后通过全局提示优化锁定最佳方案。整个过程像“团队试错-调整-精进”的真实写照，让抽象框架变得可触可感。</p>\n<h2 id=\"写给开发者：多智能体系统的实用启示\"><a href=\"#写给开发者：多智能体系统的实用启示\" class=\"headerlink\" title=\"写给开发者：多智能体系统的实用启示\"></a>写给开发者：多智能体系统的实用启示</h2><p>读完这篇论文，我最大的感触是：<strong>未来的AI应用，拼的不是单个模型的“智商”，而是团队的“协作力”</strong>。Mass框架给我们的启示远不止技术细节，更有一套可落地的设计原则：</p>\n<ul>\n<li><strong>先优化个体，再设计协作</strong>：别急于堆砌智能体数量，先把每个角色的提示词打磨到极致。</li>\n<li><strong>警惕“无效协作”</strong>：不是所有拓扑结构都有价值，多做 ablation study（控制变量实验），找出真正有效的组合。</li>\n<li><strong>动态调整优于固定模式</strong>：就像人类团队会根据任务调整分工，多智能体系统也需要灵活的拓扑结构。比如简单任务用并行计算，复杂任务加入辩论环节。</li>\n</ul>\n<p>对于开发者来说，Mass框架提供了一个现成的“搭班子”工具。无论是做数据分析还是代码生成，你都可以先用它优化单个智能体的提示词，再尝试不同的协作方式，最后全局微调——这套流程能帮你少走很多弯路。</p>\n<h2 id=\"结语：AI的“群体智慧”时代正在到来\"><a href=\"#结语：AI的“群体智慧”时代正在到来\" class=\"headerlink\" title=\"结语：AI的“群体智慧”时代正在到来\"></a>结语：AI的“群体智慧”时代正在到来</h2><p>从AlphaGo的团队协作击败人类棋手，到如今Mass框架让AI团队高效解决复杂任务，我们正在见证一个新趋势：AI的进步不再是单点突破，而是“群体智慧”的胜利。</p>\n<p>这篇论文不仅为多智能体系统设计提供了方法论，更暗示了未来AI的发展方向——就像人类社会的进步离不开分工与协作，AI的下一个里程碑，或许就藏在这些“智能体团队”的高效协作中。</p>\n<p>如果你也在开发复杂的AI应用，不妨试试Mass的思路：先让每个智能体“做好自己”，再让它们“好好配合”。说不定，你的下一个爆款应用，就诞生于这样的“AI团队协作”之中。</p>\n"},{"title":"RTX 3070+32GB 本地部署 DeepSeek-R1 最全教程（零基础三种方式对比）","date":"2024-06-10T12:00:00.000Z","_content":"\n## 前言\n\n随着大模型的普及，越来越多开发者和AI爱好者希望在本地体验如 DeepSeek-R1 这样的强大模型。本文针对 RTX 3070 显卡 + 32GB 内存的主流配置，详细对比三种零基础部署方式，帮你选出最适合自己的方案，并附常见问题与优化建议。\n\n---\n\n## 一、硬件适配建议：3070显卡+32GB内存能跑哪些模型？\n\n显存是本地部署大模型的核心瓶颈。RTX 3070 拥有 8GB 显存，结合 32GB 内存，推荐如下：\n\n| 模型参数 | 所需显存 | 是否推荐 | 性能表现 |\n|----------|----------|----------|----------|\n| 7B/8B    | 4.6~5.3GB| ✅ 优先选择 | 流畅响应（10~20字/秒）|\n| 14B      | ~9.2GB   | ⚠️ 勉强运行 | 可能爆显存，速度降至2~5字/秒|\n| 32B+     | ≥16GB    | ❌ 不推荐   | 显存不足，几乎不可用|\n\n> 💡 经验公式：所需显存 ≈ (参数规模B ÷ 2) × 1.15  \n> 例如 8B 模型约需 5.3GB 显存。\n\n---\n\n## 二、三种零基础部署方式详解（从易到难）\n\n### 方式1：LM Studio（图形化操作，最适合纯小白）\n\n- **特点**：完全可视化，无需代码，下载即用。\n- **步骤**：\n  1. 访问 [lmstudio.ai](https://lmstudio.ai/) 下载客户端。\n  2. 搜索 `deepseek-r1`，选择 7B 或 8B 版本，点击下载（约4~6GB）。\n  3. 下载完成后点击“启动”，在聊天窗口直接提问。\n- **优点**：操作极简，自动处理GPU，内置性能监控。\n- **缺点**：高级调参较少。\n\n![LM Studio 主界面](https://pic1.imgdb.cn/item/68790f7e58cb8da5c8bef102.png)\n> 图：LM Studio 可视化界面，支持模型下载与一键对话，适合零基础用户。\n\n---\n\n### 方式2：Ollama + Open WebUI（兼顾易用性与扩展性）\n\n- **特点**：命令行下载模型 + 浏览器交互界面，适合进阶用户。\n- **步骤**：\n  1. 安装 Ollama：[ollama.com](https://ollama.com/)\n  2. 命令行下载模型：\n     ```bash\n     ollama run deepseek-r1:7b  # 或 deepseek-r1:8b\n     ```\n  3. 安装 Open WebUI（可选，美化界面）：\n     ```bash\n     docker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data ghcr.io/open-webui/open-webui:cuda\n     ```\n     访问 [http://localhost:3000](http://localhost:3000) 即可网页聊天。\n- **优点**：支持多模型管理，可通过 Docker 扩展。\n- **缺点**：需基础命令行，Docker 需科学上网。\n\n![Ollama 命令行界面](https://pic1.imgdb.cn/item/68790ff358cb8da5c8bef145.png)\n> 图：Ollama 命令行模型管理，支持多模型切换与运行。\n\n---\n\n### 方式3：Ollama + Chatbox（桌面客户端交互）\n\n- **特点**：用第三方客户端替代命令行，体验更友好。\n- **步骤**：\n  1. 完成 Ollama 安装及模型下载（同方式2）。\n  2. 下载 [Chatbox](https://chatboxai.app/) 安装桌面端。\n  3. 设置模型提供方为 `Ollama`，选择 `deepseek-r1:7b`，保存即可对话。\n- **优点**：类似 ChatGPT 的聊天界面，支持历史记录。\n- **缺点**：需额外安装客户端。\n\n![Chatbox AI 客户端界面](https://pic1.imgdb.cn/item/68790fba58cb8da5c8bef11e.png)\n> 图：Chatbox AI 桌面客户端，界面美观，支持历史记录与多模型切换。\n\n---\n\n## 三、关键对比：哪种方式更适合你？\n\n| 维度       | LM Studio      | Ollama+WebUI   | Ollama+Chatbox |\n|------------|---------------|---------------|----------------|\n| 上手难度   | ⭐⭐⭐⭐⭐（极简单）| ⭐⭐⭐（需命令行）| ⭐⭐⭐⭐（中等）   |\n| 界面友好度 | ⭐⭐⭐⭐         | ⭐⭐⭐⭐（网页）   | ⭐⭐⭐⭐⭐（最佳）  |\n| 功能扩展性 | ⭐⭐           | ⭐⭐⭐⭐⭐（Docker）| ⭐⭐⭐           |\n| 适合场景   | 快速体验      | 多模型管理     | 追求美观界面   |\n\n> 📌 **总结建议**：  \n> - 完全零基础 → 选 LM Studio，10分钟搞定。  \n> - 想玩高级功能 → 选 Ollama+Open WebUI，未来可接入知识库。  \n> - 偏爱客户端 → 选 Ollama+Chatbox，操作直观。\n\n---\n\n## 四、优化设置与避坑指南\n\n1. **加速下载**：模型下载慢可用国内镜像（如 GHProxy）。\n2. **防爆显存技巧**：\n   - 在 LM Studio/Ollama 设置中开启 `GPU卸载`，确保模型全在显卡上。\n   - 调整上下文长度（如4096→2048）减少显存占用。\n3. **常见问题**：\n   - 显存不足 → 换更小模型（如7B→1.5B）或关闭其他占用GPU的程序。\n   - 响应慢 → 避免同时运行多个AI应用，确保内存充足。\n\n---\n\n## 四、下载卡顿？一键切换镜像加速\n\n（预留图片位置：命令行加速操作截图）  \n*图片描述：终端窗口显示 `export OLLAMA_MODEL_SOURCE=加速地址` 命令 + 绿色高速下载进度条*\n\n**解决下载慢的终极方案**：  \n1️⃣ **复制加速命令**（任选其一）：\n```bash\n# 推荐源（速度快）\nexport OLLAMA_MODEL_SOURCE=\"https://ollama-mirror.1ms.run\"\n\n# 备用源（更稳定）\nexport OLLAMA_MODEL_SOURCE=\"https://mirror.ghproxy.com/ollama\"\n```\n2️⃣ 粘贴到终端执行\n\n3️⃣ 重新下载模型：\n```bash\nollama run deepseek-r1:7b\n```\n✅ 效果：下载速度提升 5-10倍，告别每秒几KB的煎熬！\n\n---\n\n## 五、最终建议\n\n你的配置（3070+32GB）**强烈推荐7B/8B模型**，配合 LM Studio 或 Ollama+Chatbox，体验最佳。若追求知识库扩展或企业级应用，可逐步探索 Open WebUI 的 Docker 集成。部署后如遇速度波动，优先检查显存占用（任务管理器 → GPU视图），必要时降级模型参数。\n\n---\n\n**附：所有工具官网直达**  \n- [LM Studio](https://lmstudio.ai)  \n- [Ollama](https://ollama.com)  \n- [Open WebUI](https://github.com/open-webui)  \n- [Chatbox](https://chatboxai.app)\n\n---\n\n如有疑问或遇到新问题，欢迎留言交流！ ","source":"_posts/013-RTX3070-deepseek-r1-local-deploy.md","raw":"---\ntitle: RTX 3070+32GB 本地部署 DeepSeek-R1 最全教程（零基础三种方式对比）\ndate: 2024-06-10 20:00:00\ncategories: AI部署\ntags:\n  - 大模型\n  - DeepSeek\n  - 本地部署\n  - 教程\n---\n\n## 前言\n\n随着大模型的普及，越来越多开发者和AI爱好者希望在本地体验如 DeepSeek-R1 这样的强大模型。本文针对 RTX 3070 显卡 + 32GB 内存的主流配置，详细对比三种零基础部署方式，帮你选出最适合自己的方案，并附常见问题与优化建议。\n\n---\n\n## 一、硬件适配建议：3070显卡+32GB内存能跑哪些模型？\n\n显存是本地部署大模型的核心瓶颈。RTX 3070 拥有 8GB 显存，结合 32GB 内存，推荐如下：\n\n| 模型参数 | 所需显存 | 是否推荐 | 性能表现 |\n|----------|----------|----------|----------|\n| 7B/8B    | 4.6~5.3GB| ✅ 优先选择 | 流畅响应（10~20字/秒）|\n| 14B      | ~9.2GB   | ⚠️ 勉强运行 | 可能爆显存，速度降至2~5字/秒|\n| 32B+     | ≥16GB    | ❌ 不推荐   | 显存不足，几乎不可用|\n\n> 💡 经验公式：所需显存 ≈ (参数规模B ÷ 2) × 1.15  \n> 例如 8B 模型约需 5.3GB 显存。\n\n---\n\n## 二、三种零基础部署方式详解（从易到难）\n\n### 方式1：LM Studio（图形化操作，最适合纯小白）\n\n- **特点**：完全可视化，无需代码，下载即用。\n- **步骤**：\n  1. 访问 [lmstudio.ai](https://lmstudio.ai/) 下载客户端。\n  2. 搜索 `deepseek-r1`，选择 7B 或 8B 版本，点击下载（约4~6GB）。\n  3. 下载完成后点击“启动”，在聊天窗口直接提问。\n- **优点**：操作极简，自动处理GPU，内置性能监控。\n- **缺点**：高级调参较少。\n\n![LM Studio 主界面](https://pic1.imgdb.cn/item/68790f7e58cb8da5c8bef102.png)\n> 图：LM Studio 可视化界面，支持模型下载与一键对话，适合零基础用户。\n\n---\n\n### 方式2：Ollama + Open WebUI（兼顾易用性与扩展性）\n\n- **特点**：命令行下载模型 + 浏览器交互界面，适合进阶用户。\n- **步骤**：\n  1. 安装 Ollama：[ollama.com](https://ollama.com/)\n  2. 命令行下载模型：\n     ```bash\n     ollama run deepseek-r1:7b  # 或 deepseek-r1:8b\n     ```\n  3. 安装 Open WebUI（可选，美化界面）：\n     ```bash\n     docker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data ghcr.io/open-webui/open-webui:cuda\n     ```\n     访问 [http://localhost:3000](http://localhost:3000) 即可网页聊天。\n- **优点**：支持多模型管理，可通过 Docker 扩展。\n- **缺点**：需基础命令行，Docker 需科学上网。\n\n![Ollama 命令行界面](https://pic1.imgdb.cn/item/68790ff358cb8da5c8bef145.png)\n> 图：Ollama 命令行模型管理，支持多模型切换与运行。\n\n---\n\n### 方式3：Ollama + Chatbox（桌面客户端交互）\n\n- **特点**：用第三方客户端替代命令行，体验更友好。\n- **步骤**：\n  1. 完成 Ollama 安装及模型下载（同方式2）。\n  2. 下载 [Chatbox](https://chatboxai.app/) 安装桌面端。\n  3. 设置模型提供方为 `Ollama`，选择 `deepseek-r1:7b`，保存即可对话。\n- **优点**：类似 ChatGPT 的聊天界面，支持历史记录。\n- **缺点**：需额外安装客户端。\n\n![Chatbox AI 客户端界面](https://pic1.imgdb.cn/item/68790fba58cb8da5c8bef11e.png)\n> 图：Chatbox AI 桌面客户端，界面美观，支持历史记录与多模型切换。\n\n---\n\n## 三、关键对比：哪种方式更适合你？\n\n| 维度       | LM Studio      | Ollama+WebUI   | Ollama+Chatbox |\n|------------|---------------|---------------|----------------|\n| 上手难度   | ⭐⭐⭐⭐⭐（极简单）| ⭐⭐⭐（需命令行）| ⭐⭐⭐⭐（中等）   |\n| 界面友好度 | ⭐⭐⭐⭐         | ⭐⭐⭐⭐（网页）   | ⭐⭐⭐⭐⭐（最佳）  |\n| 功能扩展性 | ⭐⭐           | ⭐⭐⭐⭐⭐（Docker）| ⭐⭐⭐           |\n| 适合场景   | 快速体验      | 多模型管理     | 追求美观界面   |\n\n> 📌 **总结建议**：  \n> - 完全零基础 → 选 LM Studio，10分钟搞定。  \n> - 想玩高级功能 → 选 Ollama+Open WebUI，未来可接入知识库。  \n> - 偏爱客户端 → 选 Ollama+Chatbox，操作直观。\n\n---\n\n## 四、优化设置与避坑指南\n\n1. **加速下载**：模型下载慢可用国内镜像（如 GHProxy）。\n2. **防爆显存技巧**：\n   - 在 LM Studio/Ollama 设置中开启 `GPU卸载`，确保模型全在显卡上。\n   - 调整上下文长度（如4096→2048）减少显存占用。\n3. **常见问题**：\n   - 显存不足 → 换更小模型（如7B→1.5B）或关闭其他占用GPU的程序。\n   - 响应慢 → 避免同时运行多个AI应用，确保内存充足。\n\n---\n\n## 四、下载卡顿？一键切换镜像加速\n\n（预留图片位置：命令行加速操作截图）  \n*图片描述：终端窗口显示 `export OLLAMA_MODEL_SOURCE=加速地址` 命令 + 绿色高速下载进度条*\n\n**解决下载慢的终极方案**：  \n1️⃣ **复制加速命令**（任选其一）：\n```bash\n# 推荐源（速度快）\nexport OLLAMA_MODEL_SOURCE=\"https://ollama-mirror.1ms.run\"\n\n# 备用源（更稳定）\nexport OLLAMA_MODEL_SOURCE=\"https://mirror.ghproxy.com/ollama\"\n```\n2️⃣ 粘贴到终端执行\n\n3️⃣ 重新下载模型：\n```bash\nollama run deepseek-r1:7b\n```\n✅ 效果：下载速度提升 5-10倍，告别每秒几KB的煎熬！\n\n---\n\n## 五、最终建议\n\n你的配置（3070+32GB）**强烈推荐7B/8B模型**，配合 LM Studio 或 Ollama+Chatbox，体验最佳。若追求知识库扩展或企业级应用，可逐步探索 Open WebUI 的 Docker 集成。部署后如遇速度波动，优先检查显存占用（任务管理器 → GPU视图），必要时降级模型参数。\n\n---\n\n**附：所有工具官网直达**  \n- [LM Studio](https://lmstudio.ai)  \n- [Ollama](https://ollama.com)  \n- [Open WebUI](https://github.com/open-webui)  \n- [Chatbox](https://chatboxai.app)\n\n---\n\n如有疑问或遇到新问题，欢迎留言交流！ ","slug":"013-RTX3070-deepseek-r1-local-deploy","published":1,"updated":"2025-07-26T15:04:26.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qr0011u4vo0v7b8y5h","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着大模型的普及，越来越多开发者和AI爱好者希望在本地体验如 DeepSeek-R1 这样的强大模型。本文针对 RTX 3070 显卡 + 32GB 内存的主流配置，详细对比三种零基础部署方式，帮你选出最适合自己的方案，并附常见问题与优化建议。</p>\n<hr>\n<h2 id=\"一、硬件适配建议：3070显卡-32GB内存能跑哪些模型？\"><a href=\"#一、硬件适配建议：3070显卡-32GB内存能跑哪些模型？\" class=\"headerlink\" title=\"一、硬件适配建议：3070显卡+32GB内存能跑哪些模型？\"></a>一、硬件适配建议：3070显卡+32GB内存能跑哪些模型？</h2><p>显存是本地部署大模型的核心瓶颈。RTX 3070 拥有 8GB 显存，结合 32GB 内存，推荐如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>模型参数</th>\n<th>所需显存</th>\n<th>是否推荐</th>\n<th>性能表现</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7B/8B</td>\n<td>4.6~5.3GB</td>\n<td>✅ 优先选择</td>\n<td>流畅响应（10~20字/秒）</td>\n</tr>\n<tr>\n<td>14B</td>\n<td>~9.2GB</td>\n<td>⚠️ 勉强运行</td>\n<td>可能爆显存，速度降至2~5字/秒</td>\n</tr>\n<tr>\n<td>32B+</td>\n<td>≥16GB</td>\n<td>❌ 不推荐</td>\n<td>显存不足，几乎不可用</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>💡 经验公式：所需显存 ≈ (参数规模B ÷ 2) × 1.15<br>例如 8B 模型约需 5.3GB 显存。</p>\n</blockquote>\n<hr>\n<h2 id=\"二、三种零基础部署方式详解（从易到难）\"><a href=\"#二、三种零基础部署方式详解（从易到难）\" class=\"headerlink\" title=\"二、三种零基础部署方式详解（从易到难）\"></a>二、三种零基础部署方式详解（从易到难）</h2><h3 id=\"方式1：LM-Studio（图形化操作，最适合纯小白）\"><a href=\"#方式1：LM-Studio（图形化操作，最适合纯小白）\" class=\"headerlink\" title=\"方式1：LM Studio（图形化操作，最适合纯小白）\"></a>方式1：LM Studio（图形化操作，最适合纯小白）</h3><ul>\n<li><strong>特点</strong>：完全可视化，无需代码，下载即用。</li>\n<li><strong>步骤</strong>：<ol>\n<li>访问 <a href=\"https://lmstudio.ai/\">lmstudio.ai</a> 下载客户端。</li>\n<li>搜索 <code>deepseek-r1</code>，选择 7B 或 8B 版本，点击下载（约4~6GB）。</li>\n<li>下载完成后点击“启动”，在聊天窗口直接提问。</li>\n</ol>\n</li>\n<li><strong>优点</strong>：操作极简，自动处理GPU，内置性能监控。</li>\n<li><strong>缺点</strong>：高级调参较少。</li>\n</ul>\n<p><img src=\"https://pic1.imgdb.cn/item/68790f7e58cb8da5c8bef102.png\" alt=\"LM Studio 主界面\"></p>\n<blockquote>\n<p>图：LM Studio 可视化界面，支持模型下载与一键对话，适合零基础用户。</p>\n</blockquote>\n<hr>\n<h3 id=\"方式2：Ollama-Open-WebUI（兼顾易用性与扩展性）\"><a href=\"#方式2：Ollama-Open-WebUI（兼顾易用性与扩展性）\" class=\"headerlink\" title=\"方式2：Ollama + Open WebUI（兼顾易用性与扩展性）\"></a>方式2：Ollama + Open WebUI（兼顾易用性与扩展性）</h3><ul>\n<li><strong>特点</strong>：命令行下载模型 + 浏览器交互界面，适合进阶用户。</li>\n<li><strong>步骤</strong>：<ol>\n<li>安装 Ollama：<a href=\"https://ollama.com/\">ollama.com</a></li>\n<li>命令行下载模型：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ollama run deepseek-r1:7b  <span class=\"comment\"># 或 deepseek-r1:8b</span></span><br></pre></td></tr></table></figure></li>\n<li>安装 Open WebUI（可选，美化界面）：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data ghcr.io/open-webui/open-webui:cuda</span><br></pre></td></tr></table></figure>\n访问 <a href=\"http://localhost:3000\">http://localhost:3000</a> 即可网页聊天。</li>\n</ol>\n</li>\n<li><strong>优点</strong>：支持多模型管理，可通过 Docker 扩展。</li>\n<li><strong>缺点</strong>：需基础命令行，Docker 需科学上网。</li>\n</ul>\n<p><img src=\"https://pic1.imgdb.cn/item/68790ff358cb8da5c8bef145.png\" alt=\"Ollama 命令行界面\"></p>\n<blockquote>\n<p>图：Ollama 命令行模型管理，支持多模型切换与运行。</p>\n</blockquote>\n<hr>\n<h3 id=\"方式3：Ollama-Chatbox（桌面客户端交互）\"><a href=\"#方式3：Ollama-Chatbox（桌面客户端交互）\" class=\"headerlink\" title=\"方式3：Ollama + Chatbox（桌面客户端交互）\"></a>方式3：Ollama + Chatbox（桌面客户端交互）</h3><ul>\n<li><strong>特点</strong>：用第三方客户端替代命令行，体验更友好。</li>\n<li><strong>步骤</strong>：<ol>\n<li>完成 Ollama 安装及模型下载（同方式2）。</li>\n<li>下载 <a href=\"https://chatboxai.app/\">Chatbox</a> 安装桌面端。</li>\n<li>设置模型提供方为 <code>Ollama</code>，选择 <code>deepseek-r1:7b</code>，保存即可对话。</li>\n</ol>\n</li>\n<li><strong>优点</strong>：类似 ChatGPT 的聊天界面，支持历史记录。</li>\n<li><strong>缺点</strong>：需额外安装客户端。</li>\n</ul>\n<p><img src=\"https://pic1.imgdb.cn/item/68790fba58cb8da5c8bef11e.png\" alt=\"Chatbox AI 客户端界面\"></p>\n<blockquote>\n<p>图：Chatbox AI 桌面客户端，界面美观，支持历史记录与多模型切换。</p>\n</blockquote>\n<hr>\n<h2 id=\"三、关键对比：哪种方式更适合你？\"><a href=\"#三、关键对比：哪种方式更适合你？\" class=\"headerlink\" title=\"三、关键对比：哪种方式更适合你？\"></a>三、关键对比：哪种方式更适合你？</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>维度</th>\n<th>LM Studio</th>\n<th>Ollama+WebUI</th>\n<th>Ollama+Chatbox</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>上手难度</td>\n<td>⭐⭐⭐⭐⭐（极简单）</td>\n<td>⭐⭐⭐（需命令行）</td>\n<td>⭐⭐⭐⭐（中等）</td>\n</tr>\n<tr>\n<td>界面友好度</td>\n<td>⭐⭐⭐⭐</td>\n<td>⭐⭐⭐⭐（网页）</td>\n<td>⭐⭐⭐⭐⭐（最佳）</td>\n</tr>\n<tr>\n<td>功能扩展性</td>\n<td>⭐⭐</td>\n<td>⭐⭐⭐⭐⭐（Docker）</td>\n<td>⭐⭐⭐</td>\n</tr>\n<tr>\n<td>适合场景</td>\n<td>快速体验</td>\n<td>多模型管理</td>\n<td>追求美观界面</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>📌 <strong>总结建议</strong>：  </p>\n<ul>\n<li>完全零基础 → 选 LM Studio，10分钟搞定。  </li>\n<li>想玩高级功能 → 选 Ollama+Open WebUI，未来可接入知识库。  </li>\n<li>偏爱客户端 → 选 Ollama+Chatbox，操作直观。</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"四、优化设置与避坑指南\"><a href=\"#四、优化设置与避坑指南\" class=\"headerlink\" title=\"四、优化设置与避坑指南\"></a>四、优化设置与避坑指南</h2><ol>\n<li><strong>加速下载</strong>：模型下载慢可用国内镜像（如 GHProxy）。</li>\n<li><strong>防爆显存技巧</strong>：<ul>\n<li>在 LM Studio/Ollama 设置中开启 <code>GPU卸载</code>，确保模型全在显卡上。</li>\n<li>调整上下文长度（如4096→2048）减少显存占用。</li>\n</ul>\n</li>\n<li><strong>常见问题</strong>：<ul>\n<li>显存不足 → 换更小模型（如7B→1.5B）或关闭其他占用GPU的程序。</li>\n<li>响应慢 → 避免同时运行多个AI应用，确保内存充足。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"四、下载卡顿？一键切换镜像加速\"><a href=\"#四、下载卡顿？一键切换镜像加速\" class=\"headerlink\" title=\"四、下载卡顿？一键切换镜像加速\"></a>四、下载卡顿？一键切换镜像加速</h2><p>（预留图片位置：命令行加速操作截图）<br><em>图片描述：终端窗口显示 <code>export OLLAMA_MODEL_SOURCE=加速地址</code> 命令 + 绿色高速下载进度条</em></p>\n<p><strong>解决下载慢的终极方案</strong>：<br>1️⃣ <strong>复制加速命令</strong>（任选其一）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推荐源（速度快）</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> OLLAMA_MODEL_SOURCE=<span class=\"string\">&quot;https://ollama-mirror.1ms.run&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备用源（更稳定）</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> OLLAMA_MODEL_SOURCE=<span class=\"string\">&quot;https://mirror.ghproxy.com/ollama&quot;</span></span><br></pre></td></tr></table></figure><br>2️⃣ 粘贴到终端执行</p>\n<p>3️⃣ 重新下载模型：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ollama run deepseek-r1:7b</span><br></pre></td></tr></table></figure><br>✅ 效果：下载速度提升 5-10倍，告别每秒几KB的煎熬！</p>\n<hr>\n<h2 id=\"五、最终建议\"><a href=\"#五、最终建议\" class=\"headerlink\" title=\"五、最终建议\"></a>五、最终建议</h2><p>你的配置（3070+32GB）<strong>强烈推荐7B/8B模型</strong>，配合 LM Studio 或 Ollama+Chatbox，体验最佳。若追求知识库扩展或企业级应用，可逐步探索 Open WebUI 的 Docker 集成。部署后如遇速度波动，优先检查显存占用（任务管理器 → GPU视图），必要时降级模型参数。</p>\n<hr>\n<p><strong>附：所有工具官网直达</strong>  </p>\n<ul>\n<li><a href=\"https://lmstudio.ai\">LM Studio</a>  </li>\n<li><a href=\"https://ollama.com\">Ollama</a>  </li>\n<li><a href=\"https://github.com/open-webui\">Open WebUI</a>  </li>\n<li><a href=\"https://chatboxai.app\">Chatbox</a></li>\n</ul>\n<hr>\n<p>如有疑问或遇到新问题，欢迎留言交流！ </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着大模型的普及，越来越多开发者和AI爱好者希望在本地体验如 DeepSeek-R1 这样的强大模型。本文针对 RTX 3070 显卡 + 32GB 内存的主流配置，详细对比三种零基础部署方式，帮你选出最适合自己的方案，并附常见问题与优化建议。</p>\n<hr>\n<h2 id=\"一、硬件适配建议：3070显卡-32GB内存能跑哪些模型？\"><a href=\"#一、硬件适配建议：3070显卡-32GB内存能跑哪些模型？\" class=\"headerlink\" title=\"一、硬件适配建议：3070显卡+32GB内存能跑哪些模型？\"></a>一、硬件适配建议：3070显卡+32GB内存能跑哪些模型？</h2><p>显存是本地部署大模型的核心瓶颈。RTX 3070 拥有 8GB 显存，结合 32GB 内存，推荐如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>模型参数</th>\n<th>所需显存</th>\n<th>是否推荐</th>\n<th>性能表现</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7B/8B</td>\n<td>4.6~5.3GB</td>\n<td>✅ 优先选择</td>\n<td>流畅响应（10~20字/秒）</td>\n</tr>\n<tr>\n<td>14B</td>\n<td>~9.2GB</td>\n<td>⚠️ 勉强运行</td>\n<td>可能爆显存，速度降至2~5字/秒</td>\n</tr>\n<tr>\n<td>32B+</td>\n<td>≥16GB</td>\n<td>❌ 不推荐</td>\n<td>显存不足，几乎不可用</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>💡 经验公式：所需显存 ≈ (参数规模B ÷ 2) × 1.15<br>例如 8B 模型约需 5.3GB 显存。</p>\n</blockquote>\n<hr>\n<h2 id=\"二、三种零基础部署方式详解（从易到难）\"><a href=\"#二、三种零基础部署方式详解（从易到难）\" class=\"headerlink\" title=\"二、三种零基础部署方式详解（从易到难）\"></a>二、三种零基础部署方式详解（从易到难）</h2><h3 id=\"方式1：LM-Studio（图形化操作，最适合纯小白）\"><a href=\"#方式1：LM-Studio（图形化操作，最适合纯小白）\" class=\"headerlink\" title=\"方式1：LM Studio（图形化操作，最适合纯小白）\"></a>方式1：LM Studio（图形化操作，最适合纯小白）</h3><ul>\n<li><strong>特点</strong>：完全可视化，无需代码，下载即用。</li>\n<li><strong>步骤</strong>：<ol>\n<li>访问 <a href=\"https://lmstudio.ai/\">lmstudio.ai</a> 下载客户端。</li>\n<li>搜索 <code>deepseek-r1</code>，选择 7B 或 8B 版本，点击下载（约4~6GB）。</li>\n<li>下载完成后点击“启动”，在聊天窗口直接提问。</li>\n</ol>\n</li>\n<li><strong>优点</strong>：操作极简，自动处理GPU，内置性能监控。</li>\n<li><strong>缺点</strong>：高级调参较少。</li>\n</ul>\n<p><img src=\"https://pic1.imgdb.cn/item/68790f7e58cb8da5c8bef102.png\" alt=\"LM Studio 主界面\"></p>\n<blockquote>\n<p>图：LM Studio 可视化界面，支持模型下载与一键对话，适合零基础用户。</p>\n</blockquote>\n<hr>\n<h3 id=\"方式2：Ollama-Open-WebUI（兼顾易用性与扩展性）\"><a href=\"#方式2：Ollama-Open-WebUI（兼顾易用性与扩展性）\" class=\"headerlink\" title=\"方式2：Ollama + Open WebUI（兼顾易用性与扩展性）\"></a>方式2：Ollama + Open WebUI（兼顾易用性与扩展性）</h3><ul>\n<li><strong>特点</strong>：命令行下载模型 + 浏览器交互界面，适合进阶用户。</li>\n<li><strong>步骤</strong>：<ol>\n<li>安装 Ollama：<a href=\"https://ollama.com/\">ollama.com</a></li>\n<li>命令行下载模型：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ollama run deepseek-r1:7b  <span class=\"comment\"># 或 deepseek-r1:8b</span></span><br></pre></td></tr></table></figure></li>\n<li>安装 Open WebUI（可选，美化界面）：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data ghcr.io/open-webui/open-webui:cuda</span><br></pre></td></tr></table></figure>\n访问 <a href=\"http://localhost:3000\">http://localhost:3000</a> 即可网页聊天。</li>\n</ol>\n</li>\n<li><strong>优点</strong>：支持多模型管理，可通过 Docker 扩展。</li>\n<li><strong>缺点</strong>：需基础命令行，Docker 需科学上网。</li>\n</ul>\n<p><img src=\"https://pic1.imgdb.cn/item/68790ff358cb8da5c8bef145.png\" alt=\"Ollama 命令行界面\"></p>\n<blockquote>\n<p>图：Ollama 命令行模型管理，支持多模型切换与运行。</p>\n</blockquote>\n<hr>\n<h3 id=\"方式3：Ollama-Chatbox（桌面客户端交互）\"><a href=\"#方式3：Ollama-Chatbox（桌面客户端交互）\" class=\"headerlink\" title=\"方式3：Ollama + Chatbox（桌面客户端交互）\"></a>方式3：Ollama + Chatbox（桌面客户端交互）</h3><ul>\n<li><strong>特点</strong>：用第三方客户端替代命令行，体验更友好。</li>\n<li><strong>步骤</strong>：<ol>\n<li>完成 Ollama 安装及模型下载（同方式2）。</li>\n<li>下载 <a href=\"https://chatboxai.app/\">Chatbox</a> 安装桌面端。</li>\n<li>设置模型提供方为 <code>Ollama</code>，选择 <code>deepseek-r1:7b</code>，保存即可对话。</li>\n</ol>\n</li>\n<li><strong>优点</strong>：类似 ChatGPT 的聊天界面，支持历史记录。</li>\n<li><strong>缺点</strong>：需额外安装客户端。</li>\n</ul>\n<p><img src=\"https://pic1.imgdb.cn/item/68790fba58cb8da5c8bef11e.png\" alt=\"Chatbox AI 客户端界面\"></p>\n<blockquote>\n<p>图：Chatbox AI 桌面客户端，界面美观，支持历史记录与多模型切换。</p>\n</blockquote>\n<hr>\n<h2 id=\"三、关键对比：哪种方式更适合你？\"><a href=\"#三、关键对比：哪种方式更适合你？\" class=\"headerlink\" title=\"三、关键对比：哪种方式更适合你？\"></a>三、关键对比：哪种方式更适合你？</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>维度</th>\n<th>LM Studio</th>\n<th>Ollama+WebUI</th>\n<th>Ollama+Chatbox</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>上手难度</td>\n<td>⭐⭐⭐⭐⭐（极简单）</td>\n<td>⭐⭐⭐（需命令行）</td>\n<td>⭐⭐⭐⭐（中等）</td>\n</tr>\n<tr>\n<td>界面友好度</td>\n<td>⭐⭐⭐⭐</td>\n<td>⭐⭐⭐⭐（网页）</td>\n<td>⭐⭐⭐⭐⭐（最佳）</td>\n</tr>\n<tr>\n<td>功能扩展性</td>\n<td>⭐⭐</td>\n<td>⭐⭐⭐⭐⭐（Docker）</td>\n<td>⭐⭐⭐</td>\n</tr>\n<tr>\n<td>适合场景</td>\n<td>快速体验</td>\n<td>多模型管理</td>\n<td>追求美观界面</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>📌 <strong>总结建议</strong>：  </p>\n<ul>\n<li>完全零基础 → 选 LM Studio，10分钟搞定。  </li>\n<li>想玩高级功能 → 选 Ollama+Open WebUI，未来可接入知识库。  </li>\n<li>偏爱客户端 → 选 Ollama+Chatbox，操作直观。</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"四、优化设置与避坑指南\"><a href=\"#四、优化设置与避坑指南\" class=\"headerlink\" title=\"四、优化设置与避坑指南\"></a>四、优化设置与避坑指南</h2><ol>\n<li><strong>加速下载</strong>：模型下载慢可用国内镜像（如 GHProxy）。</li>\n<li><strong>防爆显存技巧</strong>：<ul>\n<li>在 LM Studio/Ollama 设置中开启 <code>GPU卸载</code>，确保模型全在显卡上。</li>\n<li>调整上下文长度（如4096→2048）减少显存占用。</li>\n</ul>\n</li>\n<li><strong>常见问题</strong>：<ul>\n<li>显存不足 → 换更小模型（如7B→1.5B）或关闭其他占用GPU的程序。</li>\n<li>响应慢 → 避免同时运行多个AI应用，确保内存充足。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"四、下载卡顿？一键切换镜像加速\"><a href=\"#四、下载卡顿？一键切换镜像加速\" class=\"headerlink\" title=\"四、下载卡顿？一键切换镜像加速\"></a>四、下载卡顿？一键切换镜像加速</h2><p>（预留图片位置：命令行加速操作截图）<br><em>图片描述：终端窗口显示 <code>export OLLAMA_MODEL_SOURCE=加速地址</code> 命令 + 绿色高速下载进度条</em></p>\n<p><strong>解决下载慢的终极方案</strong>：<br>1️⃣ <strong>复制加速命令</strong>（任选其一）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推荐源（速度快）</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> OLLAMA_MODEL_SOURCE=<span class=\"string\">&quot;https://ollama-mirror.1ms.run&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备用源（更稳定）</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> OLLAMA_MODEL_SOURCE=<span class=\"string\">&quot;https://mirror.ghproxy.com/ollama&quot;</span></span><br></pre></td></tr></table></figure><br>2️⃣ 粘贴到终端执行</p>\n<p>3️⃣ 重新下载模型：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ollama run deepseek-r1:7b</span><br></pre></td></tr></table></figure><br>✅ 效果：下载速度提升 5-10倍，告别每秒几KB的煎熬！</p>\n<hr>\n<h2 id=\"五、最终建议\"><a href=\"#五、最终建议\" class=\"headerlink\" title=\"五、最终建议\"></a>五、最终建议</h2><p>你的配置（3070+32GB）<strong>强烈推荐7B/8B模型</strong>，配合 LM Studio 或 Ollama+Chatbox，体验最佳。若追求知识库扩展或企业级应用，可逐步探索 Open WebUI 的 Docker 集成。部署后如遇速度波动，优先检查显存占用（任务管理器 → GPU视图），必要时降级模型参数。</p>\n<hr>\n<p><strong>附：所有工具官网直达</strong>  </p>\n<ul>\n<li><a href=\"https://lmstudio.ai\">LM Studio</a>  </li>\n<li><a href=\"https://ollama.com\">Ollama</a>  </li>\n<li><a href=\"https://github.com/open-webui\">Open WebUI</a>  </li>\n<li><a href=\"https://chatboxai.app\">Chatbox</a></li>\n</ul>\n<hr>\n<p>如有疑问或遇到新问题，欢迎留言交流！ </p>\n"},{"title":"一个普通小镇做题家的十年解题路","date":"2024-07-10T13:00:00.000Z","cover":"/images/kennan.jpg","_content":"\n# 一个普通小镇做题家的十年解题路\n\n文/恺南\n\n我出生在北方一个小镇，是典型的\"做题家\"。从小到大，除了学习、打游戏、看动画片，生活简单得没有一丝波澜。靠着题海战术，我挤进了北方一所985大学的软件工程专业——那时我以为，人生最难解的题已经答完了。\n\n大学四年像场醒不来的梦。面对全英文授课的专业课，我像个突然被丢进深水区的旱鸭子；学生工作和游戏吞噬了本该学习的时间，最终算法课挂科的红色分数，像一记耳光打醒了我的侥幸。那些\"及格就好\"的念头，在毕业季同学们晒出的高薪offer前碎得彻底。\n\n## 考研：一场持续三年的自我救赎\n\n一战时我三心二意：白天翻考研资料，晚上刷招聘网站。签下一份\"白菜价\"工作后，复习彻底沦为形式。成绩出来那晚，我看着室友年薪20万的签约邮件，第一次尝到悔恨的涩味。\n\n二战租住在学校旁的隔断间。七月盛夏，我抱着\"拼命一次\"的决心走进图书馆。可当十一月发现数学真题仍大片空白时，恐慌像藤蔓缠住心脏——我开始用游戏麻痹自己，每天学习时间从12小时缩水到5小时。成绩揭晓那日，窗外飘着雪，我盯着刚过国家线的分数，听见心里有什么东西断裂的声音。\n\n三战已在上海。八平米出租屋里，泡面纸箱堆在墙角。我白天在小公司写代码，晚上蜷在床沿刷题。通勤地铁上耳机循环播放英语听力，工位抽屉里藏着张宇的数学讲义。这一次我不再苛求完美：\"能过线就好。\"\n\n疫情爆发时，我正啃着泡面等复试通知。线上复试的镜头前，导师突然抛出一道动态规划题。我大脑一片空白——三年前的算法挂科阴影猛然复活。走出考场时，上海飘着冷雨，我站在天桥上看着车流，想起母亲曾说：\"解不开的题，多试几次就好。\"\n\n一周后，我颤抖着点开工研院的调剂通知。当\"拟录取\"三个字跳出来时，泡面的咸涩味、出租屋的霉味、复试卡壳的羞耻感……突然都成了淬火的燃料。\n\n## 职场：解题者的新考场\n\n研究生毕业那年，我挤进互联网大厂。薪资是本科时的三倍，可焦虑从未消失：看着身边年轻同事的活力，我突然看清了真相——人生根本没有终极答案，考场永远在更新。\n\n今年我即将三十岁。当AI浪潮席卷而来时，那些深夜刷题的孤勇、三战失败的钝痛、出租屋里的泡面香，突然都有了新的意义：\n\n> 原来小镇做题家最珍贵的不是分数，  \n> 而是相信\"多试几次\"的笨功夫；  \n> 原来人生最难的题从不在试卷上，  \n> 而在每个想要放弃的瞬间，  \n> 你能否像调试代码一样，  \n> 冷静地给自己打上补丁。\n\n## 写在最后\n\n此刻窗外的霓虹依旧闪烁，工位上的代码行静静流淌。偶尔深夜加班时，我仍会想起那个在复试考场上手心出汗的青年——他或许想不到，十年后的人生考题已从\"如何上岸\"变成\"如何驾驭AI浪潮\"。\n\n这世界从不缺新题目：\n\n当大模型掀起千层浪，当普通人也能用代码造物，  \n我看到无数个曾经的自己正站在岸边——  \n有人攥着二本学历不敢投简历，有人在小公司重复着CRUD的日常。\n\n但请相信：\n\n> 这次解题的笔握在我们自己手里。  \n> 没有名师押题，没有标准答案，  \n> 有的只是小镇做题家最擅长的笨功夫：  \n> 把每个\"不会\"拆解成学习路径，  \n> 把每次\"失败\"编译成经验值，  \n> 在AI的巨浪中造一艘自己的小船。\n\n三十岁的我仍在解题：\n\n学提示工程，啃论文，接项目踩坑……  \n但当我用Cursor三小时写完过去三天的代码，  \n突然笑出声——  \n原来人生最痛快的时刻，  \n从来不是金榜题名时，  \n而是你咬着牙对命运说：  \n\"这题，我还能再试一次\"。\n\n我是恺南，  \n一个相信普通人的解题手。\n\n新考场已亮起绿灯，  \n你我终将抵达更辽阔的岸。","source":"_posts/014-about-me.md","raw":"---\ntitle: 一个普通小镇做题家的十年解题路\ndate: 2024-07-10 21:00:00\ncategories: 个人随笔\ntags:\n  - 个人成长\n  - 考研经历\n  - 职场感悟\n  - 人生感悟\ncover: /images/kennan.jpg\n---\n\n# 一个普通小镇做题家的十年解题路\n\n文/恺南\n\n我出生在北方一个小镇，是典型的\"做题家\"。从小到大，除了学习、打游戏、看动画片，生活简单得没有一丝波澜。靠着题海战术，我挤进了北方一所985大学的软件工程专业——那时我以为，人生最难解的题已经答完了。\n\n大学四年像场醒不来的梦。面对全英文授课的专业课，我像个突然被丢进深水区的旱鸭子；学生工作和游戏吞噬了本该学习的时间，最终算法课挂科的红色分数，像一记耳光打醒了我的侥幸。那些\"及格就好\"的念头，在毕业季同学们晒出的高薪offer前碎得彻底。\n\n## 考研：一场持续三年的自我救赎\n\n一战时我三心二意：白天翻考研资料，晚上刷招聘网站。签下一份\"白菜价\"工作后，复习彻底沦为形式。成绩出来那晚，我看着室友年薪20万的签约邮件，第一次尝到悔恨的涩味。\n\n二战租住在学校旁的隔断间。七月盛夏，我抱着\"拼命一次\"的决心走进图书馆。可当十一月发现数学真题仍大片空白时，恐慌像藤蔓缠住心脏——我开始用游戏麻痹自己，每天学习时间从12小时缩水到5小时。成绩揭晓那日，窗外飘着雪，我盯着刚过国家线的分数，听见心里有什么东西断裂的声音。\n\n三战已在上海。八平米出租屋里，泡面纸箱堆在墙角。我白天在小公司写代码，晚上蜷在床沿刷题。通勤地铁上耳机循环播放英语听力，工位抽屉里藏着张宇的数学讲义。这一次我不再苛求完美：\"能过线就好。\"\n\n疫情爆发时，我正啃着泡面等复试通知。线上复试的镜头前，导师突然抛出一道动态规划题。我大脑一片空白——三年前的算法挂科阴影猛然复活。走出考场时，上海飘着冷雨，我站在天桥上看着车流，想起母亲曾说：\"解不开的题，多试几次就好。\"\n\n一周后，我颤抖着点开工研院的调剂通知。当\"拟录取\"三个字跳出来时，泡面的咸涩味、出租屋的霉味、复试卡壳的羞耻感……突然都成了淬火的燃料。\n\n## 职场：解题者的新考场\n\n研究生毕业那年，我挤进互联网大厂。薪资是本科时的三倍，可焦虑从未消失：看着身边年轻同事的活力，我突然看清了真相——人生根本没有终极答案，考场永远在更新。\n\n今年我即将三十岁。当AI浪潮席卷而来时，那些深夜刷题的孤勇、三战失败的钝痛、出租屋里的泡面香，突然都有了新的意义：\n\n> 原来小镇做题家最珍贵的不是分数，  \n> 而是相信\"多试几次\"的笨功夫；  \n> 原来人生最难的题从不在试卷上，  \n> 而在每个想要放弃的瞬间，  \n> 你能否像调试代码一样，  \n> 冷静地给自己打上补丁。\n\n## 写在最后\n\n此刻窗外的霓虹依旧闪烁，工位上的代码行静静流淌。偶尔深夜加班时，我仍会想起那个在复试考场上手心出汗的青年——他或许想不到，十年后的人生考题已从\"如何上岸\"变成\"如何驾驭AI浪潮\"。\n\n这世界从不缺新题目：\n\n当大模型掀起千层浪，当普通人也能用代码造物，  \n我看到无数个曾经的自己正站在岸边——  \n有人攥着二本学历不敢投简历，有人在小公司重复着CRUD的日常。\n\n但请相信：\n\n> 这次解题的笔握在我们自己手里。  \n> 没有名师押题，没有标准答案，  \n> 有的只是小镇做题家最擅长的笨功夫：  \n> 把每个\"不会\"拆解成学习路径，  \n> 把每次\"失败\"编译成经验值，  \n> 在AI的巨浪中造一艘自己的小船。\n\n三十岁的我仍在解题：\n\n学提示工程，啃论文，接项目踩坑……  \n但当我用Cursor三小时写完过去三天的代码，  \n突然笑出声——  \n原来人生最痛快的时刻，  \n从来不是金榜题名时，  \n而是你咬着牙对命运说：  \n\"这题，我还能再试一次\"。\n\n我是恺南，  \n一个相信普通人的解题手。\n\n新考场已亮起绿灯，  \n你我终将抵达更辽阔的岸。","slug":"014-about-me","published":1,"updated":"2025-07-26T15:12:47.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3qr0015u4voeo89g5wm","content":"<h1 id=\"一个普通小镇做题家的十年解题路\"><a href=\"#一个普通小镇做题家的十年解题路\" class=\"headerlink\" title=\"一个普通小镇做题家的十年解题路\"></a>一个普通小镇做题家的十年解题路</h1><p>文/恺南</p>\n<p>我出生在北方一个小镇，是典型的”做题家”。从小到大，除了学习、打游戏、看动画片，生活简单得没有一丝波澜。靠着题海战术，我挤进了北方一所985大学的软件工程专业——那时我以为，人生最难解的题已经答完了。</p>\n<p>大学四年像场醒不来的梦。面对全英文授课的专业课，我像个突然被丢进深水区的旱鸭子；学生工作和游戏吞噬了本该学习的时间，最终算法课挂科的红色分数，像一记耳光打醒了我的侥幸。那些”及格就好”的念头，在毕业季同学们晒出的高薪offer前碎得彻底。</p>\n<h2 id=\"考研：一场持续三年的自我救赎\"><a href=\"#考研：一场持续三年的自我救赎\" class=\"headerlink\" title=\"考研：一场持续三年的自我救赎\"></a>考研：一场持续三年的自我救赎</h2><p>一战时我三心二意：白天翻考研资料，晚上刷招聘网站。签下一份”白菜价”工作后，复习彻底沦为形式。成绩出来那晚，我看着室友年薪20万的签约邮件，第一次尝到悔恨的涩味。</p>\n<p>二战租住在学校旁的隔断间。七月盛夏，我抱着”拼命一次”的决心走进图书馆。可当十一月发现数学真题仍大片空白时，恐慌像藤蔓缠住心脏——我开始用游戏麻痹自己，每天学习时间从12小时缩水到5小时。成绩揭晓那日，窗外飘着雪，我盯着刚过国家线的分数，听见心里有什么东西断裂的声音。</p>\n<p>三战已在上海。八平米出租屋里，泡面纸箱堆在墙角。我白天在小公司写代码，晚上蜷在床沿刷题。通勤地铁上耳机循环播放英语听力，工位抽屉里藏着张宇的数学讲义。这一次我不再苛求完美：”能过线就好。”</p>\n<p>疫情爆发时，我正啃着泡面等复试通知。线上复试的镜头前，导师突然抛出一道动态规划题。我大脑一片空白——三年前的算法挂科阴影猛然复活。走出考场时，上海飘着冷雨，我站在天桥上看着车流，想起母亲曾说：”解不开的题，多试几次就好。”</p>\n<p>一周后，我颤抖着点开工研院的调剂通知。当”拟录取”三个字跳出来时，泡面的咸涩味、出租屋的霉味、复试卡壳的羞耻感……突然都成了淬火的燃料。</p>\n<h2 id=\"职场：解题者的新考场\"><a href=\"#职场：解题者的新考场\" class=\"headerlink\" title=\"职场：解题者的新考场\"></a>职场：解题者的新考场</h2><p>研究生毕业那年，我挤进互联网大厂。薪资是本科时的三倍，可焦虑从未消失：看着身边年轻同事的活力，我突然看清了真相——人生根本没有终极答案，考场永远在更新。</p>\n<p>今年我即将三十岁。当AI浪潮席卷而来时，那些深夜刷题的孤勇、三战失败的钝痛、出租屋里的泡面香，突然都有了新的意义：</p>\n<blockquote>\n<p>原来小镇做题家最珍贵的不是分数，<br>而是相信”多试几次”的笨功夫；<br>原来人生最难的题从不在试卷上，<br>而在每个想要放弃的瞬间，<br>你能否像调试代码一样，<br>冷静地给自己打上补丁。</p>\n</blockquote>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>此刻窗外的霓虹依旧闪烁，工位上的代码行静静流淌。偶尔深夜加班时，我仍会想起那个在复试考场上手心出汗的青年——他或许想不到，十年后的人生考题已从”如何上岸”变成”如何驾驭AI浪潮”。</p>\n<p>这世界从不缺新题目：</p>\n<p>当大模型掀起千层浪，当普通人也能用代码造物，<br>我看到无数个曾经的自己正站在岸边——<br>有人攥着二本学历不敢投简历，有人在小公司重复着CRUD的日常。</p>\n<p>但请相信：</p>\n<blockquote>\n<p>这次解题的笔握在我们自己手里。<br>没有名师押题，没有标准答案，<br>有的只是小镇做题家最擅长的笨功夫：<br>把每个”不会”拆解成学习路径，<br>把每次”失败”编译成经验值，<br>在AI的巨浪中造一艘自己的小船。</p>\n</blockquote>\n<p>三十岁的我仍在解题：</p>\n<p>学提示工程，啃论文，接项目踩坑……<br>但当我用Cursor三小时写完过去三天的代码，<br>突然笑出声——<br>原来人生最痛快的时刻，<br>从来不是金榜题名时，<br>而是你咬着牙对命运说：<br>“这题，我还能再试一次”。</p>\n<p>我是恺南，<br>一个相信普通人的解题手。</p>\n<p>新考场已亮起绿灯，<br>你我终将抵达更辽阔的岸。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一个普通小镇做题家的十年解题路\"><a href=\"#一个普通小镇做题家的十年解题路\" class=\"headerlink\" title=\"一个普通小镇做题家的十年解题路\"></a>一个普通小镇做题家的十年解题路</h1><p>文/恺南</p>\n<p>我出生在北方一个小镇，是典型的”做题家”。从小到大，除了学习、打游戏、看动画片，生活简单得没有一丝波澜。靠着题海战术，我挤进了北方一所985大学的软件工程专业——那时我以为，人生最难解的题已经答完了。</p>\n<p>大学四年像场醒不来的梦。面对全英文授课的专业课，我像个突然被丢进深水区的旱鸭子；学生工作和游戏吞噬了本该学习的时间，最终算法课挂科的红色分数，像一记耳光打醒了我的侥幸。那些”及格就好”的念头，在毕业季同学们晒出的高薪offer前碎得彻底。</p>\n<h2 id=\"考研：一场持续三年的自我救赎\"><a href=\"#考研：一场持续三年的自我救赎\" class=\"headerlink\" title=\"考研：一场持续三年的自我救赎\"></a>考研：一场持续三年的自我救赎</h2><p>一战时我三心二意：白天翻考研资料，晚上刷招聘网站。签下一份”白菜价”工作后，复习彻底沦为形式。成绩出来那晚，我看着室友年薪20万的签约邮件，第一次尝到悔恨的涩味。</p>\n<p>二战租住在学校旁的隔断间。七月盛夏，我抱着”拼命一次”的决心走进图书馆。可当十一月发现数学真题仍大片空白时，恐慌像藤蔓缠住心脏——我开始用游戏麻痹自己，每天学习时间从12小时缩水到5小时。成绩揭晓那日，窗外飘着雪，我盯着刚过国家线的分数，听见心里有什么东西断裂的声音。</p>\n<p>三战已在上海。八平米出租屋里，泡面纸箱堆在墙角。我白天在小公司写代码，晚上蜷在床沿刷题。通勤地铁上耳机循环播放英语听力，工位抽屉里藏着张宇的数学讲义。这一次我不再苛求完美：”能过线就好。”</p>\n<p>疫情爆发时，我正啃着泡面等复试通知。线上复试的镜头前，导师突然抛出一道动态规划题。我大脑一片空白——三年前的算法挂科阴影猛然复活。走出考场时，上海飘着冷雨，我站在天桥上看着车流，想起母亲曾说：”解不开的题，多试几次就好。”</p>\n<p>一周后，我颤抖着点开工研院的调剂通知。当”拟录取”三个字跳出来时，泡面的咸涩味、出租屋的霉味、复试卡壳的羞耻感……突然都成了淬火的燃料。</p>\n<h2 id=\"职场：解题者的新考场\"><a href=\"#职场：解题者的新考场\" class=\"headerlink\" title=\"职场：解题者的新考场\"></a>职场：解题者的新考场</h2><p>研究生毕业那年，我挤进互联网大厂。薪资是本科时的三倍，可焦虑从未消失：看着身边年轻同事的活力，我突然看清了真相——人生根本没有终极答案，考场永远在更新。</p>\n<p>今年我即将三十岁。当AI浪潮席卷而来时，那些深夜刷题的孤勇、三战失败的钝痛、出租屋里的泡面香，突然都有了新的意义：</p>\n<blockquote>\n<p>原来小镇做题家最珍贵的不是分数，<br>而是相信”多试几次”的笨功夫；<br>原来人生最难的题从不在试卷上，<br>而在每个想要放弃的瞬间，<br>你能否像调试代码一样，<br>冷静地给自己打上补丁。</p>\n</blockquote>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>此刻窗外的霓虹依旧闪烁，工位上的代码行静静流淌。偶尔深夜加班时，我仍会想起那个在复试考场上手心出汗的青年——他或许想不到，十年后的人生考题已从”如何上岸”变成”如何驾驭AI浪潮”。</p>\n<p>这世界从不缺新题目：</p>\n<p>当大模型掀起千层浪，当普通人也能用代码造物，<br>我看到无数个曾经的自己正站在岸边——<br>有人攥着二本学历不敢投简历，有人在小公司重复着CRUD的日常。</p>\n<p>但请相信：</p>\n<blockquote>\n<p>这次解题的笔握在我们自己手里。<br>没有名师押题，没有标准答案，<br>有的只是小镇做题家最擅长的笨功夫：<br>把每个”不会”拆解成学习路径，<br>把每次”失败”编译成经验值，<br>在AI的巨浪中造一艘自己的小船。</p>\n</blockquote>\n<p>三十岁的我仍在解题：</p>\n<p>学提示工程，啃论文，接项目踩坑……<br>但当我用Cursor三小时写完过去三天的代码，<br>突然笑出声——<br>原来人生最痛快的时刻，<br>从来不是金榜题名时，<br>而是你咬着牙对命运说：<br>“这题，我还能再试一次”。</p>\n<p>我是恺南，<br>一个相信普通人的解题手。</p>\n<p>新考场已亮起绿灯，<br>你我终将抵达更辽阔的岸。</p>\n"},{"_content":"��-\u0000-\u0000-\u0000\r\u0000\n\u0000t\u0000i\u0000t\u0000l\u0000e\u0000:\u0000 \u0000\"\u0000A\u0000I\u0000�]wQ�e�s�l\u0001�\u0011b(uB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000���N\u0001x\u0000_�S7�Lk�c�N\f�He�s�cGS1\u00000\u0000\rP\u0001�\"\u0000\r\u0000\n\u0000d\u0000a\u0000t\u0000e\u0000:\u0000 \u00002\u00000\u00002\u00004\u0000-\u00000\u00007\u0000-\u00002\u00007\u0000 \u00002\u00000\u0000:\u00000\u00000\u0000:\u00000\u00000\u0000\r\u0000\n\u0000c\u0000a\u0000t\u0000e\u0000g\u0000o\u0000r\u0000i\u0000e\u0000s\u0000:\u0000 \u0000\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000A\u0000I\u0000\u0000_�S\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000�b/g�[\u0018b\r\u0000\n\u0000t\u0000a\u0000g\u0000s\u0000:\u0000\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000A\u0000I\u0000�]wQ\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u00007�Lk�c�N\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000ꁨR\u0016S\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000He�s�]wQ\r\u0000\n\u0000a\u0000b\u0000b\u0000r\u0000l\u0000i\u0000n\u0000k\u0000:\u0000 \u0000g\u0000o\u0000o\u0000g\u0000l\u0000e\u0000-\u0000t\u0000o\u0000o\u0000l\u0000-\u0000d\u0000e\u0000v\u0000e\u0000l\u0000o\u0000p\u0000\r\u0000\n\u0000c\u0000o\u0000v\u0000e\u0000r\u0000:\u0000 \u0000/\u0000i\u0000m\u0000a\u0000g\u0000e\u0000s\u0000/\u0000k\u0000e\u0000n\u0000n\u0000a\u0000n\u0000A\u0000i\u0000.\u0000p\u0000n\u0000g\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=؀� \u0000MR\u0000�\u001a�A\u0000I\u0000�]wQ�v�e�S�s\r\u0000\n\u0000\r\u0000\n\u0000hT+g�S�R�N@\u0000\u0001x�S\u0016\u000bz�v�~\u000bN;m�R\f�6e���N\u0000N*N*\u0000*\u0000A\u0000I\u0000�]wQ�v�e�s�l*\u0000*\u0000\u0001�\r\u0000\n\u0000\r\u0000\n\u0000�SegA\u0000I\u0000\rN�S/fZPQu�\u00010�Q�N\u0001x\f�؏��*\u0000*\u0000���N\u0001x\u0000_�S7�Lk�c�N*\u0000*\u0000\u0001�ُ*N�S�s��\u0011btQKY\rN�]\f��V:Nُ\u000fasT@w\u0011b�N�S�N(uA\u0000I\u0000egybϑ\u0004Y\u0006tOmȉhVpenc\f�ZPꁨR\u0016S�]\\OAm\f�\u001au�\u0000_�S\u0000N�N\tg���v\u000f\\�]wQ\u00020\r\u0000\n\u0000\r\u0000\n\u0000�N)Y1\\eg\u0006R�N\u0011b�v�[te\u0000_�SǏ\u000bz\f��N�Sُ*N�e\u001d`�&^eg�v�eP��S��\u0001�\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000<د� \u0000\u0011b�v\u0000_�S\u0010b�g\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\u0000_�S�]wQ�~\bT\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000*\u0000*\u0000\u001a�A\u0000I\u0000\u0016\u000bz�]wQ\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\\u0000_�S*\u0000*\u0000\u001a�\u0000g�~�rs^�S\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u00008h�_�N<P\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000���N\u0001x\u0000_�S*\u0000*\u0000\u001a��[hQ\u001a�ǏA\u0000I\u0000�[݋�[\u0010b\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�_\u001f��S�W*\u0000*\u0000\u001a��N�`�l0R�S(u�c�N\f��N\u0000��Q\u000f\\�e\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000ybϑ\u0004Y\u0006t*\u0000*\u0000\u001a�ꁨR\u0016S\u0004Y\u0006tOmȉhVpenc\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000He�s�cGS*\u0000*\u0000\u001a�͑\rY'`�]\\OꁨR\u0016S\f�He�s�cGS1\u00000\u0000\rP+\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=�'� \u0000��~\u0000_�SAm\u000bz\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,{\u0000Nek\u001a�(uB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\u001fu\u0010b�W@x�N\u0001x\r\u0000\n\u0000\r\u0000\n\u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000/f\u0000N*N:_'Y�vA\u0000I\u0000\u0016\u000bz�]wQ\f�\u0011b��HQ(u�[eg\u001fu\u0010b7�Lk�c�N\u0000_�S�v�W@xFh�g\u00020\u001a�Ǐ\u001aY!k�[݋\u0003�te\f�\u0010�ek�[�U�R��\u0000�Bl\u00020\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,{�Nek\u001a�\u0001c�~\u0018O\u0016S�T\u0003�te\r\u0000\n\u0000\r\u0000\n\u0000(WB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000-N\f�\u0011b\u001a�Ǐ\u001aY!kJ�)Yeg\u0003�te�c:y͋\f�\rN�e�[�U�c�N�v�R��\u00010\u0019��\u0004Y\u0006t\u00010(u7bLub������T'`��\u0018O\u0016S\u00020\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,{\tNek\u001a�B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000�]\u000bz�[�Q�r\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000�[�Qy��v*\u0000*\u0000\u001a�(WB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\nN�e~b0R\"\u0000.\u0000.\u0000.\u0000\"\u0000\f��p�Qd\u0000o\u0000w\u0000n\u0000l\u0000o\u0000a\u0000d\u0000s\u0000�[�Q�S)\u0005S\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000㉋S0R,g0W*\u0000*\u0000\u001a��b�S)\u0005S㉋S0R,g0Wp\u0000r\u0000o\u0000j\u0000e\u0000c\u0000t\u0000s\u0000�e�N9Y\b��^���e�N9Y}T\rT�f�R\u000efnx\f��k�Y\"\u0000y��v\rT-\u0000�e��\"\u0000\f�v^\u0014N\rN&^-N�e_\t�\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000Sb\u0000_C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000�c�N�{\u0006t*\u0000*\u0000\u001a�Sb\u0000_g\u0000o\u0000o\u0000g\u0000l\u0000e\u0000�c�N�{\u0006tLub�\f��p�Q\u0000_�S\u0005�!j\u000f_\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000�[eQy��v*\u0000*\u0000\u001a��[eQp\u0000r\u0000o\u0000j\u0000e\u0000c\u0000t\u0000s\u0000�e�N9Y\r\u0000\n\u00005\u0000.\u0000 \u0000*\u0000*\u0000KmՋ�T�f�e*\u0000*\u0000\u001a�\b��S\t�\t��N\u0001x�f�e\u000eT�S�N�p�Q7R�e\tc��͑�e�R}�\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,{�Vek\u001a�6R\\O�[ O;Nu�\r\u0000\n\u0000\r\u0000\n\u0000�c�N\u0000_�S�[\u0010b\u000eT\f�\u0011b(u\fT7h�vA\u0000I\u0000�]wQ�_\u001f�\u001fu\u0010b�N\u0000N*N�|��v�[ OQ�z\f�(u�NU\\:y�c�N�R��\u00010�c�O\u000bN}����c\u000106eƖ(u7b�S���T�^�z�TLrb_a�\u00020\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000y��v\u0010b�g*\u0000*\u0000\u001a�\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000(W�~\u0014o:y*\u0000*\u0000\u001a�[\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000)\u0000\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�n\u0001x0W@W*\u0000*\u0000\u001a�[\u0000G\u0000i\u0000t\u0000H\u0000u\u0000b\u0000�N�^]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=ء� \u0000A\u0000I\u0000�]wQ�v�e\\O(u�S�s\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\rN�S/fZPQu�\r\u0000\n\u0000\r\u0000\n\u0000\u001a�Ǐُ!k�[��\f�\u0011b�S�sA\u0000I\u0000�]wQ�v�^(u:Wof܏�k�`a�-N0N�[\u001a�\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u00007�Lk�c�N\u0000_�S*\u0000*\u0000\u001a����N\u0001x\u001fu\u0010bOmȉhVibU\\\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000ꁨR\u0016S\u001a�,g*\u0000*\u0000\u001a�ybϑ\u0004Y\u0006tQu�penc\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000�]\\OAm\u0018O\u0016S*\u0000*\u0000\u001a�͑\rY'`�N�RꁨR\u0016S\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000�]wQ���g�^*\u0000*\u0000\u001a��_\u001f�-d�^\u0000_�S�s�X\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000OmȉhV�c�N�v�ryr�N<P\r\u0000\n\u0000\r\u0000\n\u00007�Lk�c�N�v8h�_\\O(u/f*\u0000*\u0000\u0004Y\u0006tOmȉhVpenc*\u0000*\u0000\f�ُ\u000fasT@w\u001a�\r\u0000\n\u0000\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000penc�b�S*\u0000*\u0000\u001a�ꁨR\u0016S�c�SQu��Oo`\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000ybϑ�d\\O*\u0000*\u0000\u001a�\u0000N.�\u0004Y\u0006t\u001aY*Nu�b�\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000pencl�bc*\u0000*\u0000\u001a�<h\u000f_l�bc�T\u0005n\u0017m\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�]\\OAmƖ\u0010b*\u0000*\u0000\u001a�\u000eNvQ�N�]wQ�e\u001d�[�c\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000�^(u:Wof>N�O\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000�c:y͋�{\u0006t*\u0000*\u0000\u001a�ybϑ\u0004Y\u0006t�T\u0018O\u0016SA\u0000I\u0000�c:y͋\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�Q�[Z�\bT*\u0000*\u0000\u001a�ꁨR6eƖ\u001aYs^�S�Oo`\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000h�USꁨR\u0016S*\u0000*\u0000\u001a�ybϑkX�Q�T�c�N\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000penc�v�c*\u0000*\u0000\u001a��[�e�v�cQu��S\u0016S\r\u0000\n\u00005\u0000.\u0000 \u0000*\u0000*\u0000�]wQƖ\u0010b*\u0000*\u0000\u001a�\u000eNvQ�NA\u0000I\u0000�]wQ�e\u001d�[�c\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000�&\u000f� \u0000�[hQ\u000eN\bTĉ�c��\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000penc,r�S�l\u000fa�Ny�\r\u0000\n\u0000\r\u0000\n\u0000}�6q�b/g�_:_'Y\f�FOO(u�e���l\u000fa\u001a�\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000u��[r\u0000o\u0000b\u0000o\u0000t\u0000s\u0000.\u0000t\u0000x\u0000t\u0000*\u0000*\u0000\u001a�\n\\͑Q�z�v,rk�OS��\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�c6R��Bl���s*\u0000*\u0000\u001a��MQ�[\rg�RhV �\u0010b�S�R\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000pencO(uĉ\u0003�*\u0000*\u0000\u001a��N(u�N\bT�l(u\u0014�\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000���y�O�b*\u0000*\u0000\u001a�\rN6eƖOe\u001fa*N�N�Oo`\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\u0000gsO�[��\r\u0000\n\u0000\r\u0000\n\u0000-\u0000 \u0000�m�R��Bl����\f��MQǏ�N��A~\r\u0000\n\u0000-\u0000 \u0000�[�s\u0019��͑Ջ:g6R\r\u0000\n\u0000-\u0000 \u0000�c�O(u7bM�n\t�y�\r\u0000\n\u0000-\u0000 \u0000��U_�d\\O�e�_�O�N\u0003�Ջ\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000<د� \u0000�b/g�[�s���p\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u00008h�_�e�N�~�g\r\u0000\n\u0000\r\u0000\n\u00009hnc\u0011b�v�[E�y��v \u0000[\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000\f�8h�_�e�N�~�g�Y\u000bN\u001a�\r\u0000\n\u0000\r\u0000\n\u0000`\u0000`\u0000`\u0000\r\u0000\n\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000/\u0000\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000.\u0000j\u0000s\u0000o\u0000n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�c�NM�n�e�N\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000h\u0000t\u0000m\u0000l\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009_�Q�z�SLub�\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009_�Q�z�S;���\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000c\u0000s\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009_�Q�z�S7h\u000f_\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�Q�[\u001a�,g\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000b\u0000a\u0000c\u0000k\u0000g\u0000r\u0000o\u0000u\u0000n\u0000d\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000\u000eT�S\u001a�,g\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000c\u0000o\u0000u\u0000n\u0000t\u0000e\u0000r\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000��pehV�R��\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000m\u0000a\u0000i\u0000n\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000;N��;���\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000s\u0000t\u0000y\u0000l\u0000e\u0000.\u0000c\u0000s\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000hQ@\\7h\u000f_\r\u0000\n\u0000\u0014%\u0000%\u0000% \u0000i\u0000n\u0000d\u0000e\u0000x\u0000.\u0000h\u0000t\u0000m\u0000l\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�[ Ou�b�\r\u0000\n\u0000`\u0000`\u0000`\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000sQ.��N\u0001x:y�O\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000.\u0000j\u0000s\u0000o\u0000n\u0000M�n*\u0000*\u0000\u001a�\r\u0000\n\u0000`\u0000`\u0000`\u0000j\u0000s\u0000o\u0000n\u0000\r\u0000\n\u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000_\u0000v\u0000e\u0000r\u0000s\u0000i\u0000o\u0000n\u0000\"\u0000:\u0000 \u00003\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000n\u0000a\u0000m\u0000e\u0000\"\u0000:\u0000 \u0000\"\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000\"\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000v\u0000e\u0000r\u0000s\u0000i\u0000o\u0000n\u0000\"\u0000:\u0000 \u0000\"\u00001\u0000.\u00000\u0000\"\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000d\u0000e\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000i\u0000o\u0000n\u0000\"\u0000:\u0000 \u0000\"\u0000A\u0000I\u0000q��R�v�c:y͋�RKb�]wQ\"\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000p\u0000e\u0000r\u0000m\u0000i\u0000s\u0000s\u0000i\u0000o\u0000n\u0000s\u0000\"\u0000:\u0000 \u0000[\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000a\u0000c\u0000t\u0000i\u0000v\u0000e\u0000T\u0000a\u0000b\u0000\"\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000s\u0000t\u0000o\u0000r\u0000a\u0000g\u0000e\u0000\"\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000d\u0000o\u0000w\u0000n\u0000l\u0000o\u0000a\u0000d\u0000s\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000]\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000a\u0000c\u0000t\u0000i\u0000o\u0000n\u0000\"\u0000:\u0000 \u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000d\u0000e\u0000f\u0000a\u0000u\u0000l\u0000t\u0000_\u0000p\u0000o\u0000p\u0000u\u0000p\u0000\"\u0000:\u0000 \u0000\"\u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000h\u0000t\u0000m\u0000l\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000}\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000_\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000s\u0000\"\u0000:\u0000 \u0000[\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000a\u0000t\u0000c\u0000h\u0000e\u0000s\u0000\"\u0000:\u0000 \u0000[\u0000\"\u0000<\u0000a\u0000l\u0000l\u0000_\u0000u\u0000r\u0000l\u0000s\u0000>\u0000\"\u0000]\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000\"\u0000j\u0000s\u0000\"\u0000:\u0000 \u0000[\u0000\"\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000.\u0000j\u0000s\u0000\"\u0000]\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000}\u0000\r\u0000\n\u0000 \u0000 \u0000]\u0000\r\u0000\n\u0000}\u0000\r\u0000\n\u0000`\u0000`\u0000`\u0000\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u00008h�_�R���[�s*\u0000*\u0000\u001a�\r\u0000\n\u0000`\u0000`\u0000`\u0000j\u0000a\u0000v\u0000a\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000\r\u0000\n\u0000/\u0000/\u0000 \u0000:y�O\u001a��c:y͋\u0004Y\u0006t;���\r\u0000\n\u0000f\u0000u\u0000n\u0000c\u0000t\u0000i\u0000o\u0000n\u0000 \u0000p\u0000r\u0000o\u0000c\u0000e\u0000s\u0000s\u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000(\u0000)\u0000 \u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000 \u0000d\u0000a\u0000t\u0000a\u0000 \u0000=\u0000 \u0000[\u0000]\u0000;\u0000\r\u0000\n\u0000 \u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000 \u0000=\u0000 \u0000d\u0000o\u0000c\u0000u\u0000m\u0000e\u0000n\u0000t\u0000.\u0000q\u0000u\u0000e\u0000r\u0000y\u0000S\u0000e\u0000l\u0000e\u0000c\u0000t\u0000o\u0000r\u0000A\u0000l\u0000l\u0000(\u0000'\u0000.\u0000p\u0000r\u0000o\u0000m\u0000p\u0000t\u0000-\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000'\u0000)\u0000;\u0000\r\u0000\n\u0000 \u0000 \u0000\r\u0000\n\u0000 \u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000.\u0000f\u0000o\u0000r\u0000E\u0000a\u0000c\u0000h\u0000(\u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000 \u0000=\u0000>\u0000 \u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000d\u0000a\u0000t\u0000a\u0000.\u0000p\u0000u\u0000s\u0000h\u0000(\u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000:\u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000.\u0000t\u0000e\u0000x\u0000t\u0000C\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000u\u0000r\u0000l\u0000:\u0000 \u0000w\u0000i\u0000n\u0000d\u0000o\u0000w\u0000.\u0000l\u0000o\u0000c\u0000a\u0000t\u0000i\u0000o\u0000n\u0000.\u0000h\u0000r\u0000e\u0000f\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000t\u0000i\u0000m\u0000e\u0000s\u0000t\u0000a\u0000m\u0000p\u0000:\u0000 \u0000n\u0000e\u0000w\u0000 \u0000D\u0000a\u0000t\u0000e\u0000(\u0000)\u0000.\u0000t\u0000o\u0000I\u0000S\u0000O\u0000S\u0000t\u0000r\u0000i\u0000n\u0000g\u0000(\u0000)\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000}\u0000)\u0000;\u0000\r\u0000\n\u0000 \u0000 \u0000}\u0000)\u0000;\u0000\r\u0000\n\u0000 \u0000 \u0000\r\u0000\n\u0000 \u0000 \u0000r\u0000e\u0000t\u0000u\u0000r\u0000n\u0000 \u0000d\u0000a\u0000t\u0000a\u0000;\u0000\r\u0000\n\u0000}\u0000\r\u0000\n\u0000`\u0000`\u0000`\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=؀� \u0000He�s�cGS�[�k\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000 O�~\u0000_�S�e\u000f_\r\u0000\n\u0000-\u0000 \u0000f[`NC\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\A\u0000P\u0000I\u0000\u001a�1\u0000-\u00002\u0000hT\r\u0000\n\u0000-\u0000 \u0000\u0016�Q�N\u0001x\u001a�3\u0000-\u00005\u0000)Y\r\u0000\n\u0000-\u0000 \u0000\u0003�Ջ\u0018O\u0016S\u001a�2\u0000-\u00003\u0000)Y\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000;`��\u001a�2\u0000-\u00003\u0000hT*\u0000*\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000A\u0000I\u0000���R\u0000_�S\r\u0000\n\u0000-\u0000 \u0000\u001fu\u0010b�W@x�N\u0001x\u001a�3\u00000\u0000\u0006R��\r\u0000\n\u0000-\u0000 \u0000\u001aY!k\u0003�te\u0018O\u0016S\u001a�1\u0000\u000f\\�e\r\u0000\n\u0000-\u0000 \u0000�[�Q�rKmՋ\u001a�2\u0000\u000f\\�e\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000;`��\u001a�3\u0000-\u00004\u0000\u000f\\�e*\u0000*\u0000\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000He�s�cGS\u001a�1\u00000\u0000\rP�N\nN\u0001�*\u0000*\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000<؁� \u0000�y)R�e��\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000�c:y͋\u0006R�N\r\u0000\n\u0000\r\u0000\n\u0000�Y�g`O_N�`\u001d\\ՋA\u0000I\u0000�]wQ\u0000_�S7�Lk�c�N\f��S�N�y�O\u0011b���S�[te�v�c:y͋!jg\u00020\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000͑���X\u000ef*\u0000*\u0000\u001a��c:y͋�vHrCgR_@\u0000\u0001x�S\u0016\u000bz@b\tg\f��N�Of[`N�NAmO(u\u00020\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000���S�e\u000f_\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�_�O*\u0000*\u0000\u001a�K\u0000e\u0000n\u0000n\u0000a\u0000n\u00001\u00000\u00004\u00008\u0000\b�\u0007Y�l\u001a��c�N\u0000_�S\t�\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000���{*\u0000*\u0000\u001a�k\u0000e\u0000n\u0000n\u0000a\u0000n\u00001\u00000\u00004\u00008\u00001\u00002\u00005\u00000\u00002\u00006\u0000@\u0000g\u0000m\u0000a\u0000i\u0000l\u0000.\u0000c\u0000o\u0000m\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=�.� \u0000*gegU\\\u001bg\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000A\u0000I\u0000�]wQ�v�SU\\���R\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000NO�N\u0001x/\u0000���N\u0001x*\u0000*\u0000\u001a����f\u001aY�N�S\u000eN\u0000_�S\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000zf��\u0016S*\u0000*\u0000\u001a�ꁨR\u0018O\u0016S�T\u0003�Ջ\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000\u001fu\u0001`\u0016S*\u0000*\u0000\u001a��]wQ���v�[teƖ\u0010b\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000\u0013N\u001aN\u0016S*\u0000*\u0000\u001a����[yr�[���W�v\u0018O\u0016S\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\u0011b�v\u000bN\u0000Nek��\u0012R\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000\u0000_�S�f\u001aY�c�N*\u0000*\u0000\u001a����v\rN\fT�^(u:Wof\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�^�z�]wQ�^*\u0000*\u0000\u001a��y/}�S\rY(u�v�~�N\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000\u0006R�N�~��*\u0000*\u0000\u001a�.^�R�f\u001aY�N�c�cA\u0000I\u0000\u0000_�S\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000FU\u001aN\u0016S�c\"}*\u0000*\u0000\u001a�\u0006\\�]wQl�\u0016S:N�N�T\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000<د� \u0000\\O�TƖU\\:y\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000*\u0000*\u0000 \u0000-\u0000 \u0000A\u0000I\u0000�c:y͋�RKb�c�N\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000y��v�c��*\u0000*\u0000\u001a��W�NB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\u0000_�S�vC\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\\f�.^�R(u7b�{\u0006t�T\u0018O\u0016SA\u0000I\u0000�c:y͋\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�b/g\bh*\u0000*\u0000\u001a�J\u0000a\u0000v\u0000a\u0000S\u0000c\u0000r\u0000i\u0000p\u0000t\u0000,\u0000 \u0000C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000 \u0000E\u0000x\u0000t\u0000e\u0000n\u0000s\u0000i\u0000o\u0000n\u0000 \u0000A\u0000P\u0000I\u0000,\u0000 \u0000H\u0000T\u0000M\u0000L\u0000/\u0000C\u0000S\u0000S\u0000\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000(W�~\u0014o:y*\u0000*\u0000\u001a�[\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000)\u0000\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�n\u0001x0W@W*\u0000*\u0000\u001a�[\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000\u0000_�S�e��*\u0000*\u0000\u001a�3\u0000-\u00004\u0000\u000f\\�e\b�A\u0000I\u0000���R\u0000_�S\t�\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u00008h�_�R��*\u0000*\u0000\u001a�\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000�c:y͋ybϑ\u0004Y\u0006t\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000zf��\u0018O\u0016S�^��\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000\u0000N.��[�Q�R��\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000�s^�S\fTek\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=ح� \u0000*N�N\u001fa�`\r\u0000\n\u0000\r\u0000\n\u0000ُ!k�~�S��\u0011b�m;R��Ƌ0R\f�*\u0000*\u0000A\u0000I\u0000�]wQ�v�N<P\rN(W�N�f�N�N{|\f�\f�(W�N>e'Y�N{|�v���R*\u0000*\u0000\u00020\r\u0000\n\u0000\r\u0000\n\u0000\u001a�ǏA\u0000I\u0000\f�\u0011b�N�S�N\u001a�\r\u0000\n\u0000-\u0000 \u0000�_\u001f������`�l\r\u0000\n\u0000-\u0000 \u0000M�NO�b/g��i\r\u0000\n\u0000-\u0000 \u0000�cؚ\u0000_�SHe�s\r\u0000\n\u0000-\u0000 \u0000\u0013N�l�N\u001bR\u000fa�T;���\r\u0000\n\u0000\r\u0000\n\u0000�[�N�P\u0011bُ7h�v\"\u0000\u000f\\G�ZP���[\"\u0000eg�\f�A\u0000I\u0000�]wQ1\\�P/f\u0000N�b\u0007N����\u0019S\f���\u0011b�N��\u001fY(u\u0000g({�vZW\u0001c\f��\u0000_�b/g\u0000_�S-N\u0000g���v��\u00020\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=��� \u0000�NAm�N�R\r\u0000\n\u0000\r\u0000\n\u0000�Y�g`O_N�[A\u0000I\u0000�]wQ\u0000_�S\u001fatQ��\f�\"kΏ\u001a�\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000sQ�l\u0011b�vlQ\u0017O�S*\u0000*\u0000\u001a�[\u0000z`WSA\u0000I\u0000�[\u0018b>m]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000m\u0000p\u0000.\u0000w\u0000e\u0000i\u0000x\u0000i\u0000n\u0000.\u0000q\u0000q\u0000.\u0000c\u0000o\u0000m\u0000/\u0000s\u0000/\u0000c\u0000n\u0000l\u0000B\u00006\u0000i\u00006\u0000W\u0000Y\u00008\u00007\u0000Y\u0000S\u0000W\u0000K\u0000H\u0000e\u0000X\u0000C\u0000O\u00006\u0000g\u0000)\u0000\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�ReQ�b/g�NAm�*\u0000*\u0000\u001a��y�O���S��N�~\u0001x\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000\u0006R�N`O�vy��v*\u0000*\u0000\u001a�\u0000Nw��c��A\u0000I\u0000\u0000_�S�v�S��'`\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000<د� \u0000�Q(W\u0000g\u000eT\r\u0000\n\u0000\r\u0000\n\u0000A\u0000I\u0000�e�N\f��]wQ(W�S\f�FO㉘��v\u001d`�~\rN�S\u00020\r\u0000\n\u0000\r\u0000\n\u0000�N O�~\u0000_�S0RA\u0000I\u0000���R\u0000_�S\f��NUS\u0000N�]wQ0R�]wQ��te\bT\f�\u0011b�Nck(W����\u0000N*N�e�e�N�v0Reg\u00020\r\u0000\n\u0000\r\u0000\n\u0000\f�(Wُ*N�e�e�N̑\f�\u0000g͑���v\rN/f`O\u001aO\u001aY\u0011\\�b/g\f�\f�/f`O��&T(uA\u0000I\u0000�]wQ\f��b�`�l�_\u001f��S\u0010b�s�[\u00020\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000sQ�l\u0011b\f�\u000bw\u0000N*N^�)YMb㉘�\u0005��vA\u0000I\u0000�[\u0018b�[U_\u0001�*\u0000*\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000*\u0000,g�e:Nz`WSA\u0000I\u0000�[\u0018b>m�S\u001bR\f�l�}����l\u000ef�Q\u0004Y\u00020*\u0000\r\u0000\n\u0000","source":"_posts/015-google-tool-develop.md","raw":"��-\u0000-\u0000-\u0000\r\u0000\n\u0000t\u0000i\u0000t\u0000l\u0000e\u0000:\u0000 \u0000\"\u0000A\u0000I\u0000�]wQ�e�s�l\u0001�\u0011b(uB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000���N\u0001x\u0000_�S7�Lk�c�N\f�He�s�cGS1\u00000\u0000\rP\u0001�\"\u0000\r\u0000\n\u0000d\u0000a\u0000t\u0000e\u0000:\u0000 \u00002\u00000\u00002\u00004\u0000-\u00000\u00007\u0000-\u00002\u00007\u0000 \u00002\u00000\u0000:\u00000\u00000\u0000:\u00000\u00000\u0000\r\u0000\n\u0000c\u0000a\u0000t\u0000e\u0000g\u0000o\u0000r\u0000i\u0000e\u0000s\u0000:\u0000 \u0000\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000A\u0000I\u0000\u0000_�S\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000�b/g�[\u0018b\r\u0000\n\u0000t\u0000a\u0000g\u0000s\u0000:\u0000\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000A\u0000I\u0000�]wQ\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u00007�Lk�c�N\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000ꁨR\u0016S\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000He�s�]wQ\r\u0000\n\u0000a\u0000b\u0000b\u0000r\u0000l\u0000i\u0000n\u0000k\u0000:\u0000 \u0000g\u0000o\u0000o\u0000g\u0000l\u0000e\u0000-\u0000t\u0000o\u0000o\u0000l\u0000-\u0000d\u0000e\u0000v\u0000e\u0000l\u0000o\u0000p\u0000\r\u0000\n\u0000c\u0000o\u0000v\u0000e\u0000r\u0000:\u0000 \u0000/\u0000i\u0000m\u0000a\u0000g\u0000e\u0000s\u0000/\u0000k\u0000e\u0000n\u0000n\u0000a\u0000n\u0000A\u0000i\u0000.\u0000p\u0000n\u0000g\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=؀� \u0000MR\u0000�\u001a�A\u0000I\u0000�]wQ�v�e�S�s\r\u0000\n\u0000\r\u0000\n\u0000hT+g�S�R�N@\u0000\u0001x�S\u0016\u000bz�v�~\u000bN;m�R\f�6e���N\u0000N*N*\u0000*\u0000A\u0000I\u0000�]wQ�v�e�s�l*\u0000*\u0000\u0001�\r\u0000\n\u0000\r\u0000\n\u0000�SegA\u0000I\u0000\rN�S/fZPQu�\u00010�Q�N\u0001x\f�؏��*\u0000*\u0000���N\u0001x\u0000_�S7�Lk�c�N*\u0000*\u0000\u0001�ُ*N�S�s��\u0011btQKY\rN�]\f��V:Nُ\u000fasT@w\u0011b�N�S�N(uA\u0000I\u0000egybϑ\u0004Y\u0006tOmȉhVpenc\f�ZPꁨR\u0016S�]\\OAm\f�\u001au�\u0000_�S\u0000N�N\tg���v\u000f\\�]wQ\u00020\r\u0000\n\u0000\r\u0000\n\u0000�N)Y1\\eg\u0006R�N\u0011b�v�[te\u0000_�SǏ\u000bz\f��N�Sُ*N�e\u001d`�&^eg�v�eP��S��\u0001�\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000<د� \u0000\u0011b�v\u0000_�S\u0010b�g\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\u0000_�S�]wQ�~\bT\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000*\u0000*\u0000\u001a�A\u0000I\u0000\u0016\u000bz�]wQ\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\\u0000_�S*\u0000*\u0000\u001a�\u0000g�~�rs^�S\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u00008h�_�N<P\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000���N\u0001x\u0000_�S*\u0000*\u0000\u001a��[hQ\u001a�ǏA\u0000I\u0000�[݋�[\u0010b\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�_\u001f��S�W*\u0000*\u0000\u001a��N�`�l0R�S(u�c�N\f��N\u0000��Q\u000f\\�e\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000ybϑ\u0004Y\u0006t*\u0000*\u0000\u001a�ꁨR\u0016S\u0004Y\u0006tOmȉhVpenc\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000He�s�cGS*\u0000*\u0000\u001a�͑\rY'`�]\\OꁨR\u0016S\f�He�s�cGS1\u00000\u0000\rP+\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=�'� \u0000��~\u0000_�SAm\u000bz\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,{\u0000Nek\u001a�(uB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\u001fu\u0010b�W@x�N\u0001x\r\u0000\n\u0000\r\u0000\n\u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000/f\u0000N*N:_'Y�vA\u0000I\u0000\u0016\u000bz�]wQ\f�\u0011b��HQ(u�[eg\u001fu\u0010b7�Lk�c�N\u0000_�S�v�W@xFh�g\u00020\u001a�Ǐ\u001aY!k�[݋\u0003�te\f�\u0010�ek�[�U�R��\u0000�Bl\u00020\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,{�Nek\u001a�\u0001c�~\u0018O\u0016S�T\u0003�te\r\u0000\n\u0000\r\u0000\n\u0000(WB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000-N\f�\u0011b\u001a�Ǐ\u001aY!kJ�)Yeg\u0003�te�c:y͋\f�\rN�e�[�U�c�N�v�R��\u00010\u0019��\u0004Y\u0006t\u00010(u7bLub������T'`��\u0018O\u0016S\u00020\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,{\tNek\u001a�B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000�]\u000bz�[�Q�r\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000�[�Qy��v*\u0000*\u0000\u001a�(WB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\nN�e~b0R\"\u0000.\u0000.\u0000.\u0000\"\u0000\f��p�Qd\u0000o\u0000w\u0000n\u0000l\u0000o\u0000a\u0000d\u0000s\u0000�[�Q�S)\u0005S\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000㉋S0R,g0W*\u0000*\u0000\u001a��b�S)\u0005S㉋S0R,g0Wp\u0000r\u0000o\u0000j\u0000e\u0000c\u0000t\u0000s\u0000�e�N9Y\b��^���e�N9Y}T\rT�f�R\u000efnx\f��k�Y\"\u0000y��v\rT-\u0000�e��\"\u0000\f�v^\u0014N\rN&^-N�e_\t�\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000Sb\u0000_C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000�c�N�{\u0006t*\u0000*\u0000\u001a�Sb\u0000_g\u0000o\u0000o\u0000g\u0000l\u0000e\u0000�c�N�{\u0006tLub�\f��p�Q\u0000_�S\u0005�!j\u000f_\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000�[eQy��v*\u0000*\u0000\u001a��[eQp\u0000r\u0000o\u0000j\u0000e\u0000c\u0000t\u0000s\u0000�e�N9Y\r\u0000\n\u00005\u0000.\u0000 \u0000*\u0000*\u0000KmՋ�T�f�e*\u0000*\u0000\u001a�\b��S\t�\t��N\u0001x�f�e\u000eT�S�N�p�Q7R�e\tc��͑�e�R}�\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,{�Vek\u001a�6R\\O�[ O;Nu�\r\u0000\n\u0000\r\u0000\n\u0000�c�N\u0000_�S�[\u0010b\u000eT\f�\u0011b(u\fT7h�vA\u0000I\u0000�]wQ�_\u001f�\u001fu\u0010b�N\u0000N*N�|��v�[ OQ�z\f�(u�NU\\:y�c�N�R��\u00010�c�O\u000bN}����c\u000106eƖ(u7b�S���T�^�z�TLrb_a�\u00020\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000y��v\u0010b�g*\u0000*\u0000\u001a�\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000(W�~\u0014o:y*\u0000*\u0000\u001a�[\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000)\u0000\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�n\u0001x0W@W*\u0000*\u0000\u001a�[\u0000G\u0000i\u0000t\u0000H\u0000u\u0000b\u0000�N�^]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=ء� \u0000A\u0000I\u0000�]wQ�v�e\\O(u�S�s\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\rN�S/fZPQu�\r\u0000\n\u0000\r\u0000\n\u0000\u001a�Ǐُ!k�[��\f�\u0011b�S�sA\u0000I\u0000�]wQ�v�^(u:Wof܏�k�`a�-N0N�[\u001a�\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u00007�Lk�c�N\u0000_�S*\u0000*\u0000\u001a����N\u0001x\u001fu\u0010bOmȉhVibU\\\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000ꁨR\u0016S\u001a�,g*\u0000*\u0000\u001a�ybϑ\u0004Y\u0006tQu�penc\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000�]\\OAm\u0018O\u0016S*\u0000*\u0000\u001a�͑\rY'`�N�RꁨR\u0016S\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000�]wQ���g�^*\u0000*\u0000\u001a��_\u001f�-d�^\u0000_�S�s�X\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000OmȉhV�c�N�v�ryr�N<P\r\u0000\n\u0000\r\u0000\n\u00007�Lk�c�N�v8h�_\\O(u/f*\u0000*\u0000\u0004Y\u0006tOmȉhVpenc*\u0000*\u0000\f�ُ\u000fasT@w\u001a�\r\u0000\n\u0000\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000penc�b�S*\u0000*\u0000\u001a�ꁨR\u0016S�c�SQu��Oo`\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000ybϑ�d\\O*\u0000*\u0000\u001a�\u0000N.�\u0004Y\u0006t\u001aY*Nu�b�\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000pencl�bc*\u0000*\u0000\u001a�<h\u000f_l�bc�T\u0005n\u0017m\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�]\\OAmƖ\u0010b*\u0000*\u0000\u001a�\u000eNvQ�N�]wQ�e\u001d�[�c\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000�^(u:Wof>N�O\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000�c:y͋�{\u0006t*\u0000*\u0000\u001a�ybϑ\u0004Y\u0006t�T\u0018O\u0016SA\u0000I\u0000�c:y͋\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�Q�[Z�\bT*\u0000*\u0000\u001a�ꁨR6eƖ\u001aYs^�S�Oo`\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000h�USꁨR\u0016S*\u0000*\u0000\u001a�ybϑkX�Q�T�c�N\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000penc�v�c*\u0000*\u0000\u001a��[�e�v�cQu��S\u0016S\r\u0000\n\u00005\u0000.\u0000 \u0000*\u0000*\u0000�]wQƖ\u0010b*\u0000*\u0000\u001a�\u000eNvQ�NA\u0000I\u0000�]wQ�e\u001d�[�c\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000�&\u000f� \u0000�[hQ\u000eN\bTĉ�c��\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000penc,r�S�l\u000fa�Ny�\r\u0000\n\u0000\r\u0000\n\u0000}�6q�b/g�_:_'Y\f�FOO(u�e���l\u000fa\u001a�\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000u��[r\u0000o\u0000b\u0000o\u0000t\u0000s\u0000.\u0000t\u0000x\u0000t\u0000*\u0000*\u0000\u001a�\n\\͑Q�z�v,rk�OS��\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�c6R��Bl���s*\u0000*\u0000\u001a��MQ�[\rg�RhV �\u0010b�S�R\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000pencO(uĉ\u0003�*\u0000*\u0000\u001a��N(u�N\bT�l(u\u0014�\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000���y�O�b*\u0000*\u0000\u001a�\rN6eƖOe\u001fa*N�N�Oo`\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\u0000gsO�[��\r\u0000\n\u0000\r\u0000\n\u0000-\u0000 \u0000�m�R��Bl����\f��MQǏ�N��A~\r\u0000\n\u0000-\u0000 \u0000�[�s\u0019��͑Ջ:g6R\r\u0000\n\u0000-\u0000 \u0000�c�O(u7bM�n\t�y�\r\u0000\n\u0000-\u0000 \u0000��U_�d\\O�e�_�O�N\u0003�Ջ\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000<د� \u0000�b/g�[�s���p\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u00008h�_�e�N�~�g\r\u0000\n\u0000\r\u0000\n\u00009hnc\u0011b�v�[E�y��v \u0000[\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000\f�8h�_�e�N�~�g�Y\u000bN\u001a�\r\u0000\n\u0000\r\u0000\n\u0000`\u0000`\u0000`\u0000\r\u0000\n\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000/\u0000\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000.\u0000j\u0000s\u0000o\u0000n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�c�NM�n�e�N\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000h\u0000t\u0000m\u0000l\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009_�Q�z�SLub�\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009_�Q�z�S;���\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000c\u0000s\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009_�Q�z�S7h\u000f_\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�Q�[\u001a�,g\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000b\u0000a\u0000c\u0000k\u0000g\u0000r\u0000o\u0000u\u0000n\u0000d\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000\u000eT�S\u001a�,g\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000c\u0000o\u0000u\u0000n\u0000t\u0000e\u0000r\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000��pehV�R��\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000m\u0000a\u0000i\u0000n\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000;N��;���\r\u0000\n\u0000\u001c%\u0000%\u0000% \u0000s\u0000t\u0000y\u0000l\u0000e\u0000.\u0000c\u0000s\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000hQ@\\7h\u000f_\r\u0000\n\u0000\u0014%\u0000%\u0000% \u0000i\u0000n\u0000d\u0000e\u0000x\u0000.\u0000h\u0000t\u0000m\u0000l\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�[ Ou�b�\r\u0000\n\u0000`\u0000`\u0000`\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000sQ.��N\u0001x:y�O\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000.\u0000j\u0000s\u0000o\u0000n\u0000M�n*\u0000*\u0000\u001a�\r\u0000\n\u0000`\u0000`\u0000`\u0000j\u0000s\u0000o\u0000n\u0000\r\u0000\n\u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000_\u0000v\u0000e\u0000r\u0000s\u0000i\u0000o\u0000n\u0000\"\u0000:\u0000 \u00003\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000n\u0000a\u0000m\u0000e\u0000\"\u0000:\u0000 \u0000\"\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000\"\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000v\u0000e\u0000r\u0000s\u0000i\u0000o\u0000n\u0000\"\u0000:\u0000 \u0000\"\u00001\u0000.\u00000\u0000\"\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000d\u0000e\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000i\u0000o\u0000n\u0000\"\u0000:\u0000 \u0000\"\u0000A\u0000I\u0000q��R�v�c:y͋�RKb�]wQ\"\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000p\u0000e\u0000r\u0000m\u0000i\u0000s\u0000s\u0000i\u0000o\u0000n\u0000s\u0000\"\u0000:\u0000 \u0000[\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000a\u0000c\u0000t\u0000i\u0000v\u0000e\u0000T\u0000a\u0000b\u0000\"\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000s\u0000t\u0000o\u0000r\u0000a\u0000g\u0000e\u0000\"\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000d\u0000o\u0000w\u0000n\u0000l\u0000o\u0000a\u0000d\u0000s\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000]\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000a\u0000c\u0000t\u0000i\u0000o\u0000n\u0000\"\u0000:\u0000 \u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000\"\u0000d\u0000e\u0000f\u0000a\u0000u\u0000l\u0000t\u0000_\u0000p\u0000o\u0000p\u0000u\u0000p\u0000\"\u0000:\u0000 \u0000\"\u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000h\u0000t\u0000m\u0000l\u0000\"\u0000\r\u0000\n\u0000 \u0000 \u0000}\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000\"\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000_\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000s\u0000\"\u0000:\u0000 \u0000[\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000\"\u0000m\u0000a\u0000t\u0000c\u0000h\u0000e\u0000s\u0000\"\u0000:\u0000 \u0000[\u0000\"\u0000<\u0000a\u0000l\u0000l\u0000_\u0000u\u0000r\u0000l\u0000s\u0000>\u0000\"\u0000]\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000\"\u0000j\u0000s\u0000\"\u0000:\u0000 \u0000[\u0000\"\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000.\u0000j\u0000s\u0000\"\u0000]\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000}\u0000\r\u0000\n\u0000 \u0000 \u0000]\u0000\r\u0000\n\u0000}\u0000\r\u0000\n\u0000`\u0000`\u0000`\u0000\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u00008h�_�R���[�s*\u0000*\u0000\u001a�\r\u0000\n\u0000`\u0000`\u0000`\u0000j\u0000a\u0000v\u0000a\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000\r\u0000\n\u0000/\u0000/\u0000 \u0000:y�O\u001a��c:y͋\u0004Y\u0006t;���\r\u0000\n\u0000f\u0000u\u0000n\u0000c\u0000t\u0000i\u0000o\u0000n\u0000 \u0000p\u0000r\u0000o\u0000c\u0000e\u0000s\u0000s\u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000(\u0000)\u0000 \u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000 \u0000d\u0000a\u0000t\u0000a\u0000 \u0000=\u0000 \u0000[\u0000]\u0000;\u0000\r\u0000\n\u0000 \u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000 \u0000=\u0000 \u0000d\u0000o\u0000c\u0000u\u0000m\u0000e\u0000n\u0000t\u0000.\u0000q\u0000u\u0000e\u0000r\u0000y\u0000S\u0000e\u0000l\u0000e\u0000c\u0000t\u0000o\u0000r\u0000A\u0000l\u0000l\u0000(\u0000'\u0000.\u0000p\u0000r\u0000o\u0000m\u0000p\u0000t\u0000-\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000'\u0000)\u0000;\u0000\r\u0000\n\u0000 \u0000 \u0000\r\u0000\n\u0000 \u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000.\u0000f\u0000o\u0000r\u0000E\u0000a\u0000c\u0000h\u0000(\u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000 \u0000=\u0000>\u0000 \u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000d\u0000a\u0000t\u0000a\u0000.\u0000p\u0000u\u0000s\u0000h\u0000(\u0000{\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000:\u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000.\u0000t\u0000e\u0000x\u0000t\u0000C\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000u\u0000r\u0000l\u0000:\u0000 \u0000w\u0000i\u0000n\u0000d\u0000o\u0000w\u0000.\u0000l\u0000o\u0000c\u0000a\u0000t\u0000i\u0000o\u0000n\u0000.\u0000h\u0000r\u0000e\u0000f\u0000,\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000t\u0000i\u0000m\u0000e\u0000s\u0000t\u0000a\u0000m\u0000p\u0000:\u0000 \u0000n\u0000e\u0000w\u0000 \u0000D\u0000a\u0000t\u0000e\u0000(\u0000)\u0000.\u0000t\u0000o\u0000I\u0000S\u0000O\u0000S\u0000t\u0000r\u0000i\u0000n\u0000g\u0000(\u0000)\u0000\r\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000}\u0000)\u0000;\u0000\r\u0000\n\u0000 \u0000 \u0000}\u0000)\u0000;\u0000\r\u0000\n\u0000 \u0000 \u0000\r\u0000\n\u0000 \u0000 \u0000r\u0000e\u0000t\u0000u\u0000r\u0000n\u0000 \u0000d\u0000a\u0000t\u0000a\u0000;\u0000\r\u0000\n\u0000}\u0000\r\u0000\n\u0000`\u0000`\u0000`\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=؀� \u0000He�s�cGS�[�k\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000 O�~\u0000_�S�e\u000f_\r\u0000\n\u0000-\u0000 \u0000f[`NC\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\A\u0000P\u0000I\u0000\u001a�1\u0000-\u00002\u0000hT\r\u0000\n\u0000-\u0000 \u0000\u0016�Q�N\u0001x\u001a�3\u0000-\u00005\u0000)Y\r\u0000\n\u0000-\u0000 \u0000\u0003�Ջ\u0018O\u0016S\u001a�2\u0000-\u00003\u0000)Y\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000;`��\u001a�2\u0000-\u00003\u0000hT*\u0000*\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000A\u0000I\u0000���R\u0000_�S\r\u0000\n\u0000-\u0000 \u0000\u001fu\u0010b�W@x�N\u0001x\u001a�3\u00000\u0000\u0006R��\r\u0000\n\u0000-\u0000 \u0000\u001aY!k\u0003�te\u0018O\u0016S\u001a�1\u0000\u000f\\�e\r\u0000\n\u0000-\u0000 \u0000�[�Q�rKmՋ\u001a�2\u0000\u000f\\�e\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000;`��\u001a�3\u0000-\u00004\u0000\u000f\\�e*\u0000*\u0000\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000He�s�cGS\u001a�1\u00000\u0000\rP�N\nN\u0001�*\u0000*\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000<؁� \u0000�y)R�e��\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000�c:y͋\u0006R�N\r\u0000\n\u0000\r\u0000\n\u0000�Y�g`O_N�`\u001d\\ՋA\u0000I\u0000�]wQ\u0000_�S7�Lk�c�N\f��S�N�y�O\u0011b���S�[te�v�c:y͋!jg\u00020\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000͑���X\u000ef*\u0000*\u0000\u001a��c:y͋�vHrCgR_@\u0000\u0001x�S\u0016\u000bz@b\tg\f��N�Of[`N�NAmO(u\u00020\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000���S�e\u000f_\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�_�O*\u0000*\u0000\u001a�K\u0000e\u0000n\u0000n\u0000a\u0000n\u00001\u00000\u00004\u00008\u0000\b�\u0007Y�l\u001a��c�N\u0000_�S\t�\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000���{*\u0000*\u0000\u001a�k\u0000e\u0000n\u0000n\u0000a\u0000n\u00001\u00000\u00004\u00008\u00001\u00002\u00005\u00000\u00002\u00006\u0000@\u0000g\u0000m\u0000a\u0000i\u0000l\u0000.\u0000c\u0000o\u0000m\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=�.� \u0000*gegU\\\u001bg\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000A\u0000I\u0000�]wQ�v�SU\\���R\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000NO�N\u0001x/\u0000���N\u0001x*\u0000*\u0000\u001a����f\u001aY�N�S\u000eN\u0000_�S\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000zf��\u0016S*\u0000*\u0000\u001a�ꁨR\u0018O\u0016S�T\u0003�Ջ\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000\u001fu\u0001`\u0016S*\u0000*\u0000\u001a��]wQ���v�[teƖ\u0010b\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000\u0013N\u001aN\u0016S*\u0000*\u0000\u001a����[yr�[���W�v\u0018O\u0016S\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\u0011b�v\u000bN\u0000Nek��\u0012R\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000\u0000_�S�f\u001aY�c�N*\u0000*\u0000\u001a����v\rN\fT�^(u:Wof\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�^�z�]wQ�^*\u0000*\u0000\u001a��y/}�S\rY(u�v�~�N\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000\u0006R�N�~��*\u0000*\u0000\u001a�.^�R�f\u001aY�N�c�cA\u0000I\u0000\u0000_�S\r\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000FU\u001aN\u0016S�c\"}*\u0000*\u0000\u001a�\u0006\\�]wQl�\u0016S:N�N�T\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000<د� \u0000\\O�TƖU\\:y\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000*\u0000*\u0000 \u0000-\u0000 \u0000A\u0000I\u0000�c:y͋�RKb�c�N\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000y��v�c��*\u0000*\u0000\u001a��W�NB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\u0000_�S�vC\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\\f�.^�R(u7b�{\u0006t�T\u0018O\u0016SA\u0000I\u0000�c:y͋\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�b/g\bh*\u0000*\u0000\u001a�J\u0000a\u0000v\u0000a\u0000S\u0000c\u0000r\u0000i\u0000p\u0000t\u0000,\u0000 \u0000C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000 \u0000E\u0000x\u0000t\u0000e\u0000n\u0000s\u0000i\u0000o\u0000n\u0000 \u0000A\u0000P\u0000I\u0000,\u0000 \u0000H\u0000T\u0000M\u0000L\u0000/\u0000C\u0000S\u0000S\u0000\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000(W�~\u0014o:y*\u0000*\u0000\u001a�[\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000)\u0000\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�n\u0001x0W@W*\u0000*\u0000\u001a�[\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000\u0000_�S�e��*\u0000*\u0000\u001a�3\u0000-\u00004\u0000\u000f\\�e\b�A\u0000I\u0000���R\u0000_�S\t�\r\u0000\n\u0000-\u0000 \u0000*\u0000*\u00008h�_�R��*\u0000*\u0000\u001a�\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000�c:y͋ybϑ\u0004Y\u0006t\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000zf��\u0018O\u0016S�^��\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000\u0000N.��[�Q�R��\r\u0000\n\u0000 \u0000 \u0000-\u0000 \u0000�s^�S\fTek\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=ح� \u0000*N�N\u001fa�`\r\u0000\n\u0000\r\u0000\n\u0000ُ!k�~�S��\u0011b�m;R��Ƌ0R\f�*\u0000*\u0000A\u0000I\u0000�]wQ�v�N<P\rN(W�N�f�N�N{|\f�\f�(W�N>e'Y�N{|�v���R*\u0000*\u0000\u00020\r\u0000\n\u0000\r\u0000\n\u0000\u001a�ǏA\u0000I\u0000\f�\u0011b�N�S�N\u001a�\r\u0000\n\u0000-\u0000 \u0000�_\u001f������`�l\r\u0000\n\u0000-\u0000 \u0000M�NO�b/g��i\r\u0000\n\u0000-\u0000 \u0000�cؚ\u0000_�SHe�s\r\u0000\n\u0000-\u0000 \u0000\u0013N�l�N\u001bR\u000fa�T;���\r\u0000\n\u0000\r\u0000\n\u0000�[�N�P\u0011bُ7h�v\"\u0000\u000f\\G�ZP���[\"\u0000eg�\f�A\u0000I\u0000�]wQ1\\�P/f\u0000N�b\u0007N����\u0019S\f���\u0011b�N��\u001fY(u\u0000g({�vZW\u0001c\f��\u0000_�b/g\u0000_�S-N\u0000g���v��\u00020\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000=��� \u0000�NAm�N�R\r\u0000\n\u0000\r\u0000\n\u0000�Y�g`O_N�[A\u0000I\u0000�]wQ\u0000_�S\u001fatQ��\f�\"kΏ\u001a�\r\u0000\n\u0000\r\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000sQ�l\u0011b�vlQ\u0017O�S*\u0000*\u0000\u001a�[\u0000z`WSA\u0000I\u0000�[\u0018b>m]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000m\u0000p\u0000.\u0000w\u0000e\u0000i\u0000x\u0000i\u0000n\u0000.\u0000q\u0000q\u0000.\u0000c\u0000o\u0000m\u0000/\u0000s\u0000/\u0000c\u0000n\u0000l\u0000B\u00006\u0000i\u00006\u0000W\u0000Y\u00008\u00007\u0000Y\u0000S\u0000W\u0000K\u0000H\u0000e\u0000X\u0000C\u0000O\u00006\u0000g\u0000)\u0000\r\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�ReQ�b/g�NAm�*\u0000*\u0000\u001a��y�O���S��N�~\u0001x\r\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000\u0006R�N`O�vy��v*\u0000*\u0000\u001a�\u0000Nw��c��A\u0000I\u0000\u0000_�S�v�S��'`\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000#\u0000#\u0000 \u0000<د� \u0000�Q(W\u0000g\u000eT\r\u0000\n\u0000\r\u0000\n\u0000A\u0000I\u0000�e�N\f��]wQ(W�S\f�FO㉘��v\u001d`�~\rN�S\u00020\r\u0000\n\u0000\r\u0000\n\u0000�N O�~\u0000_�S0RA\u0000I\u0000���R\u0000_�S\f��NUS\u0000N�]wQ0R�]wQ��te\bT\f�\u0011b�Nck(W����\u0000N*N�e�e�N�v0Reg\u00020\r\u0000\n\u0000\r\u0000\n\u0000\f�(Wُ*N�e�e�N̑\f�\u0000g͑���v\rN/f`O\u001aO\u001aY\u0011\\�b/g\f�\f�/f`O��&T(uA\u0000I\u0000�]wQ\f��b�`�l�_\u001f��S\u0010b�s�[\u00020\r\u0000\n\u0000\r\u0000\n\u0000*\u0000*\u0000sQ�l\u0011b\f�\u000bw\u0000N*N^�)YMb㉘�\u0005��vA\u0000I\u0000�[\u0018b�[U_\u0001�*\u0000*\u0000\r\u0000\n\u0000\r\u0000\n\u0000-\u0000-\u0000-\u0000\r\u0000\n\u0000\r\u0000\n\u0000*\u0000,g�e:Nz`WSA\u0000I\u0000�[\u0018b>m�S\u001bR\f�l�}����l\u000ef�Q\u0004Y\u00020*\u0000\r\u0000\n\u0000","slug":"015-google-tool-develop","published":1,"date":"2025-07-30T13:52:22.184Z","updated":"2025-07-30T14:07:47.053Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cmdq1k3r20038u4vodosi2gn6","content":"<p>��-\u0000-\u0000-\u0000<br>\u0000<br>\u0000t\u0000i\u0000t\u0000l\u0000e\u0000:\u0000 \u0000”\u0000A\u0000I\u0000�]wQ�e�s�l\u0001�\u0011b(uB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000���N\u0001x\u0000<em>�S7�Lk�c�N\f�He�s�cGS1\u00000\u0000<br>P\u0001�”\u0000<br>\u0000<br>\u0000d\u0000a\u0000t\u0000e\u0000:\u0000 \u00002\u00000\u00002\u00004\u0000-\u00000\u00007\u0000-\u00002\u00007\u0000 \u00002\u00000\u0000:\u00000\u00000\u0000:\u00000\u00000\u0000<br>\u0000<br>\u0000c\u0000a\u0000t\u0000e\u0000g\u0000o\u0000r\u0000i\u0000e\u0000s\u0000:\u0000 \u0000<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000A\u0000I\u0000\u0000</em>�S<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000�b/g�[\u0018b<br>\u0000<br>\u0000t\u0000a\u0000g\u0000s\u0000:\u0000<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000A\u0000I\u0000�]wQ<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u00007�Lk�c�N<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000ꁨR\u0016S<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000He�s�]wQ<br>\u0000<br>\u0000a\u0000b\u0000b\u0000r\u0000l\u0000i\u0000n\u0000k\u0000:\u0000 \u0000g\u0000o\u0000o\u0000g\u0000l\u0000e\u0000-\u0000t\u0000o\u0000o\u0000l\u0000-\u0000d\u0000e\u0000v\u0000e\u0000l\u0000o\u0000p\u0000<br>\u0000<br>\u0000c\u0000o\u0000v\u0000e\u0000r\u0000:\u0000 \u0000/\u0000i\u0000m\u0000a\u0000g\u0000e\u0000s\u0000/\u0000k\u0000e\u0000n\u0000n\u0000a\u0000n\u0000A\u0000i\u0000.\u0000p\u0000n\u0000g\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000=؀� \u0000MR\u0000�\u001a�A\u0000I\u0000�]wQ�v�e�S�s<br>\u0000<br>\u0000<br>\u0000<br>\u0000hT+g�S�R�N@\u0000\u0001x�S\u0016\u000bz�v�~\u000bN;m�R\f�6e���N\u0000N<em>N</em>\u0000<em>\u0000A\u0000I\u0000�]wQ�v�e�s�l</em>\u0000<em>\u0000\u0001�<br>\u0000<br>\u0000<br>\u0000<br>\u0000�SegA\u0000I\u0000<br>N�S/fZPQu�\u00010�Q�N\u0001x\f�؏��</em>\u0000<em>\u0000���N\u0001x\u0000_�S7�Lk�c�N</em>\u0000<em>\u0000\u0001�ُ</em>N�S�s��\u0011btQKY<br>N�]\f��V:Nُ\u000fasT@w\u0011b�N�S�N(uA\u0000I\u0000egybϑ\u0004Y\u0006tOmȉhVpenc\f�ZPꁨR\u0016S�]\\OAm\f�\u001au�\u0000<em>�S\u0000N�N    g���v\u000f\\�]wQ\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000�N)Y1\\eg\u0006R�N\u0011b�v�[te\u0000</em>�SǏ\u000bz\f��N�Sُ<em>N�e\u001d`�&amp;^eg�v�eP��S��\u0001�<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000&lt;د� \u0000\u0011b�v\u0000<em>�S\u0010b�g<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000\u0000</em>�S�]wQ�~\bT<br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000</em>\u0000<em>\u0000\u001a�A\u0000I\u0000\u0016\u000bz�]wQ<br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\\u0000_�S</em>\u0000<em>\u0000\u001a�\u0000g�~�rs^�S<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u00008h�_�N&lt;P<br>\u0000<br>\u00001\u0000.\u0000 \u0000</em>\u0000<em>\u0000���N\u0001x\u0000_�S</em>\u0000<em>\u0000\u001a��[hQ\u001a�ǏA\u0000I\u0000�[݋�[\u0010b<br>\u0000<br>\u00002\u0000.\u0000 \u0000</em>\u0000<em>\u0000�_\u001f��S�W</em>\u0000<em>\u0000\u001a��N�`�l0R�S(u�c�N\f��N\u0000��Q\u000f\\�e<br>\u0000<br>\u00003\u0000.\u0000 \u0000</em>\u0000<em>\u0000ybϑ\u0004Y\u0006t</em>\u0000<em>\u0000\u001a�ꁨR\u0016S\u0004Y\u0006tOmȉhVpenc<br>\u0000<br>\u00004\u0000.\u0000 \u0000</em>\u0000<em>\u0000He�s�cGS</em>\u0000<em>\u0000\u001a�͑<br>Y’`�]\\OꁨR\u0016S\f�He�s�cGS1\u00000\u0000<br>P+\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000=�’� \u0000��~\u0000_�SAm\u000bz<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000,{\u0000Nek\u001a�(uB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\u001fu\u0010b�W@x�N\u0001x<br>\u0000<br>\u0000<br>\u0000<br>\u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000/f\u0000N</em>N:<em>‘Y�vA\u0000I\u0000\u0016\u000bz�]wQ\f�\u0011b��HQ(u�[eg\u001fu\u0010b7�Lk�c�N\u0000</em>�S�v�W@xFh�g\u00020\u001a�Ǐ\u001aY!k�[݋\u0003�te\f�\u0010�ek�[�U�R��\u0000�Bl\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000,{�Nek\u001a�\u0001c�~\u0018O\u0016S�T\u0003�te<br>\u0000<br>\u0000<br>\u0000<br>\u0000(WB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000-N\f�\u0011b\u001a�Ǐ\u001aY!kJ�)Yeg\u0003�te�c:y͋\f�<br>N�e�[�U�c�N�v�R��\u00010\u0019��\u0004Y\u0006t\u00010(u7bLub������T’<code>��\u0018O\u0016S\u00020\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,&#123;    Nek\u001a�B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000�]\u000bz�[�Q�r\n\u0000\n\u0000\n\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000�[�Qy��v*\u0000*\u0000\u001a�(WB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\nN�e~b0R&quot;\u0000.\u0000.\u0000.\u0000&quot;\u0000\f��p�Qd\u0000o\u0000w\u0000n\u0000l\u0000o\u0000a\u0000d\u0000s\u0000�[�Q�S)\u0005S\n\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000㉋S0R,g0W*\u0000*\u0000\u001a��b�S)\u0005S㉋S0R,g0Wp\u0000r\u0000o\u0000j\u0000e\u0000c\u0000t\u0000s\u0000�e�N9Y\b��^���e�N9Y&#125;T\nT�f�R\u000efnx\f��k�Y&quot;\u0000y��v\nT-\u0000�e��&quot;\u0000\f�v^\u0014N\nN&amp;^-N�e_    �\n\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000Sb\u0000_C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000�c�N�&#123;\u0006t*\u0000*\u0000\u001a�Sb\u0000_g\u0000o\u0000o\u0000g\u0000l\u0000e\u0000�c�N�&#123;\u0006tLub�\f��p�Q\u0000_�S\u0005�!j\u000f_\n\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000�[eQy��v*\u0000*\u0000\u001a��[eQp\u0000r\u0000o\u0000j\u0000e\u0000c\u0000t\u0000s\u0000�e�N9Y\n\u0000\n\u00005\u0000.\u0000 \u0000*\u0000*\u0000KmՋ�T�f�e*\u0000*\u0000\u001a�\b��S    �    ��N\u0001x�f�e\u000eT�S�N�p�Q7R�e    c��͑�e�R&#125;�\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,&#123;�Vek\u001a�6R\\O�[ O;Nu�\n\u0000\n\u0000\n\u0000\n\u0000�c�N\u0000_�S�[\u0010b\u000eT\f�\u0011b(u\fT7h�vA\u0000I\u0000�]wQ�_\u001f�\u001fu\u0010b�N\u0000N*N�|��v�[ OQ�z\f�(u�NU\\:y�c�N�R��\u00010�c�O\u000bN&#125;����c\u000106eƖ(u7b�S���T�^�z�TLrb_a�\u00020\n\u0000\n\u0000\n\u0000\n\u0000*\u0000*\u0000y��v\u0010b�g*\u0000*\u0000\u001a�\n\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000(W�~\u0014o:y*\u0000*\u0000\u001a�[\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000)\u0000\n\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�n\u0001x0W@W*\u0000*\u0000\u001a�[\u0000G\u0000i\u0000t\u0000H\u0000u\u0000b\u0000�N�^]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000=ء� \u0000A\u0000I\u0000�]wQ�v�e\\O(u�S�s\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\nN�S/fZPQu�\n\u0000\n\u0000\n\u0000\n\u0000\u001a�Ǐُ!k�[��\f�\u0011b�S�sA\u0000I\u0000�]wQ�v�^(u:Wof܏�k�</code>a�-N0N�[\u001a�<br>\u0000<br>\u0000<br>\u0000<br>\u00001\u0000.\u0000 \u0000<em>\u0000</em>\u00007�Lk�c�N\u0000<em>�S<em>\u0000</em>\u0000\u001a����N\u0001x\u001fu\u0010bOmȉhVibU\\<br>\u0000<br>\u00002\u0000.\u0000 \u0000<em>\u0000</em>\u0000ꁨR\u0016S\u001a�,g<em>\u0000</em>\u0000\u001a�ybϑ\u0004Y\u0006tQu�penc<br>\u0000<br>\u00003\u0000.\u0000 \u0000<em>\u0000</em>\u0000�]\\OAm\u0018O\u0016S<em>\u0000</em>\u0000\u001a�͑<br>Y’`�N�RꁨR\u0016S<br>\u0000<br>\u00004\u0000.\u0000 \u0000<em>\u0000</em>\u0000�]wQ���g�^<em>\u0000</em>\u0000\u001a��</em>\u001f�-d�^\u0000<em>�S�s�X<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000OmȉhV�c�N�v�ryr�N&lt;P<br>\u0000<br>\u0000<br>\u0000<br>\u00007�Lk�c�N�v8h�</em>\\O(u/f<em>\u0000</em>\u0000\u0004Y\u0006tOmȉhVpenc<em>\u0000</em>\u0000\f�ُ\u000fasT@w\u001a�<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000penc�b�S<em>\u0000</em>\u0000\u001a�ꁨR\u0016S�c�SQu��Oo<code>\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000ybϑ�d\\O*\u0000*\u0000\u001a�\u0000N.�\u0004Y\u0006t\u001aY*Nu�b�\n\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000pencl�bc*\u0000*\u0000\u001a�&lt;h\u000f_l�bc�T\u0005n\u0017m\n\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�]\\OAmƖ\u0010b*\u0000*\u0000\u001a�\u000eNvQ�N�]wQ�e\u001d�[�c\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000�^(u:Wof&gt;N�O\n\u0000\n\u0000\n\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000�c:y͋�&#123;\u0006t*\u0000*\u0000\u001a�ybϑ\u0004Y\u0006t�T\u0018O\u0016SA\u0000I\u0000�c:y͋\n\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�Q�[Z�\bT*\u0000*\u0000\u001a�ꁨR6eƖ\u001aYs^�S�Oo</code><br>\u0000<br>\u00003\u0000.\u0000 \u0000<em>\u0000</em>\u0000h�USꁨR\u0016S<em>\u0000</em>\u0000\u001a�ybϑkX�Q�T�c�N<br>\u0000<br>\u00004\u0000.\u0000 \u0000<em>\u0000</em>\u0000penc�v�c<em>\u0000</em>\u0000\u001a��[�e�v�cQu��S\u0016S<br>\u0000<br>\u00005\u0000.\u0000 \u0000<em>\u0000</em>\u0000�]wQƖ\u0010b<em>\u0000</em>\u0000\u001a�\u000eNvQ�NA\u0000I\u0000�]wQ�e\u001d�[�c<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000�&amp;\u000f� \u0000�[hQ\u000eN\bTĉ�c��<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000penc,r�S�l\u000fa�Ny�<br>\u0000<br>\u0000<br>\u0000<br>\u0000}�6q�b/g�<em>:</em>‘Y\f�FOO(u�e���l\u000fa\u001a�<br>\u0000<br>\u0000<br>\u0000<br>\u00001\u0000.\u0000 \u0000<em>\u0000</em>\u0000u��[r\u0000o\u0000b\u0000o\u0000t\u0000s\u0000.\u0000t\u0000x\u0000t\u0000<em>\u0000</em>\u0000\u001a�<br>\\͑Q�z�v,rk�OS��<br>\u0000<br>\u00002\u0000.\u0000 \u0000<em>\u0000</em>\u0000�c6R��Bl���s<em>\u0000</em>\u0000\u001a��MQ�[<br>g�RhV �\u0010b�S�R<br>\u0000<br>\u00003\u0000.\u0000 \u0000<em>\u0000</em>\u0000pencO(uĉ\u0003�<em>\u0000</em>\u0000\u001a��N(u�N\bT�l(u\u0014�<br>\u0000<br>\u00004\u0000.\u0000 \u0000<em>\u0000</em>\u0000���y�O�b<em>\u0000</em>\u0000\u001a�<br>N6eƖOe\u001fa<em>N�N�Oo<code>\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\u0000gsO�[��\n\u0000\n\u0000\n\u0000\n\u0000-\u0000 \u0000�m�R��Bl����\f��MQǏ�N��A~\n\u0000\n\u0000-\u0000 \u0000�[�s\u0019��͑Ջ:g6R\n\u0000\n\u0000-\u0000 \u0000�c�O(u7bM�n    �y�\n\u0000\n\u0000-\u0000 \u0000��U_�d\\O�e�_�O�N\u0003�Ջ\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000&lt;د� \u0000�b/g�[�s���p\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u00008h�_�e�N�~�g\n\u0000\n\u0000\n\u0000\n\u00009hnc\u0011b�v�[E�y��v \u0000[\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000\f�8h�_�e�N�~�g�Y\u000bN\u001a�\n\u0000\n\u0000\n\u0000\n\u0000</code>\u0000<code>\u0000</code>\u0000<br>\u0000<br>\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000/\u0000<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000.\u0000j\u0000s\u0000o\u0000n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�c�NM�n�e�N<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000h\u0000t\u0000m\u0000l\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009<em>�Q�z�SLub�<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009</em>�Q�z�S;���<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000c\u0000s\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009<em>�Q�z�S7h\u000f</em><br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�Q�[\u001a�,g<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000b\u0000a\u0000c\u0000k\u0000g\u0000r\u0000o\u0000u\u0000n\u0000d\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000\u000eT�S\u001a�,g<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000c\u0000o\u0000u\u0000n\u0000t\u0000e\u0000r\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000��pehV�R��<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000m\u0000a\u0000i\u0000n\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000;N��;���<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000s\u0000t\u0000y\u0000l\u0000e\u0000.\u0000c\u0000s\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000hQ@\\7h\u000f_<br>\u0000<br>\u0000\u0014%\u0000%\u0000% \u0000i\u0000n\u0000d\u0000e\u0000x\u0000.\u0000h\u0000t\u0000m\u0000l\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�[ Ou�b�<br>\u0000<br>\u0000<code>\u0000</code>\u0000`\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000sQ.��N\u0001x:y�O<br>\u0000<br>\u0000<br>\u0000<br>\u0000</em>\u0000<em>\u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000.\u0000j\u0000s\u0000o\u0000n\u0000M�n</em>\u0000<em>\u0000\u001a�<br>\u0000<br>\u0000<code>\u0000</code>\u0000<code>\u0000j\u0000s\u0000o\u0000n\u0000\n\u0000\n\u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000_\u0000v\u0000e\u0000r\u0000s\u0000i\u0000o\u0000n\u0000&quot;\u0000:\u0000 \u00003\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000n\u0000a\u0000m\u0000e\u0000&quot;\u0000:\u0000 \u0000&quot;\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000&quot;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000v\u0000e\u0000r\u0000s\u0000i\u0000o\u0000n\u0000&quot;\u0000:\u0000 \u0000&quot;\u00001\u0000.\u00000\u0000&quot;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000d\u0000e\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000i\u0000o\u0000n\u0000&quot;\u0000:\u0000 \u0000&quot;\u0000A\u0000I\u0000q��R�v�c:y͋�RKb�]wQ&quot;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000p\u0000e\u0000r\u0000m\u0000i\u0000s\u0000s\u0000i\u0000o\u0000n\u0000s\u0000&quot;\u0000:\u0000 \u0000[\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000a\u0000c\u0000t\u0000i\u0000v\u0000e\u0000T\u0000a\u0000b\u0000&quot;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000s\u0000t\u0000o\u0000r\u0000a\u0000g\u0000e\u0000&quot;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000d\u0000o\u0000w\u0000n\u0000l\u0000o\u0000a\u0000d\u0000s\u0000&quot;\u0000\n\u0000\n\u0000 \u0000 \u0000]\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000a\u0000c\u0000t\u0000i\u0000o\u0000n\u0000&quot;\u0000:\u0000 \u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000d\u0000e\u0000f\u0000a\u0000u\u0000l\u0000t\u0000_\u0000p\u0000o\u0000p\u0000u\u0000p\u0000&quot;\u0000:\u0000 \u0000&quot;\u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000h\u0000t\u0000m\u0000l\u0000&quot;\u0000\n\u0000\n\u0000 \u0000 \u0000&#125;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000_\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000s\u0000&quot;\u0000:\u0000 \u0000[\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000m\u0000a\u0000t\u0000c\u0000h\u0000e\u0000s\u0000&quot;\u0000:\u0000 \u0000[\u0000&quot;\u0000&lt;\u0000a\u0000l\u0000l\u0000_\u0000u\u0000r\u0000l\u0000s\u0000&gt;\u0000&quot;\u0000]\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000j\u0000s\u0000&quot;\u0000:\u0000 \u0000[\u0000&quot;\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000.\u0000j\u0000s\u0000&quot;\u0000]\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&#125;\u0000\n\u0000\n\u0000 \u0000 \u0000]\u0000\n\u0000\n\u0000&#125;\u0000\n\u0000\n\u0000</code>\u0000<code>\u0000</code>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000</em>\u0000<em>\u00008h�_�R���[�s</em>\u0000<em>\u0000\u001a�<br>\u0000<br>\u0000<code>\u0000</code>\u0000<code>\u0000j\u0000a\u0000v\u0000a\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000\n\u0000\n\u0000/\u0000/\u0000 \u0000:y�O\u001a��c:y͋\u0004Y\u0006t;���\n\u0000\n\u0000f\u0000u\u0000n\u0000c\u0000t\u0000i\u0000o\u0000n\u0000 \u0000p\u0000r\u0000o\u0000c\u0000e\u0000s\u0000s\u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000(\u0000)\u0000 \u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000 \u0000d\u0000a\u0000t\u0000a\u0000 \u0000=\u0000 \u0000[\u0000]\u0000;\u0000\n\u0000\n\u0000 \u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000 \u0000=\u0000 \u0000d\u0000o\u0000c\u0000u\u0000m\u0000e\u0000n\u0000t\u0000.\u0000q\u0000u\u0000e\u0000r\u0000y\u0000S\u0000e\u0000l\u0000e\u0000c\u0000t\u0000o\u0000r\u0000A\u0000l\u0000l\u0000(\u0000&#39;\u0000.\u0000p\u0000r\u0000o\u0000m\u0000p\u0000t\u0000-\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000&#39;\u0000)\u0000;\u0000\n\u0000\n\u0000 \u0000 \u0000\n\u0000\n\u0000 \u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000.\u0000f\u0000o\u0000r\u0000E\u0000a\u0000c\u0000h\u0000(\u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000 \u0000=\u0000&gt;\u0000 \u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000d\u0000a\u0000t\u0000a\u0000.\u0000p\u0000u\u0000s\u0000h\u0000(\u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000:\u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000.\u0000t\u0000e\u0000x\u0000t\u0000C\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000u\u0000r\u0000l\u0000:\u0000 \u0000w\u0000i\u0000n\u0000d\u0000o\u0000w\u0000.\u0000l\u0000o\u0000c\u0000a\u0000t\u0000i\u0000o\u0000n\u0000.\u0000h\u0000r\u0000e\u0000f\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000t\u0000i\u0000m\u0000e\u0000s\u0000t\u0000a\u0000m\u0000p\u0000:\u0000 \u0000n\u0000e\u0000w\u0000 \u0000D\u0000a\u0000t\u0000e\u0000(\u0000)\u0000.\u0000t\u0000o\u0000I\u0000S\u0000O\u0000S\u0000t\u0000r\u0000i\u0000n\u0000g\u0000(\u0000)\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&#125;\u0000)\u0000;\u0000\n\u0000\n\u0000 \u0000 \u0000&#125;\u0000)\u0000;\u0000\n\u0000\n\u0000 \u0000 \u0000\n\u0000\n\u0000 \u0000 \u0000r\u0000e\u0000t\u0000u\u0000r\u0000n\u0000 \u0000d\u0000a\u0000t\u0000a\u0000;\u0000\n\u0000\n\u0000&#125;\u0000\n\u0000\n\u0000</code>\u0000<code>\u0000</code>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000=؀� \u0000He�s�cGS�[�k<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000 O�~\u0000<em>�S�e\u000f</em><br>\u0000<br>\u0000-\u0000 \u0000f[`NC\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\A\u0000P\u0000I\u0000\u001a�1\u0000-\u00002\u0000hT<br>\u0000<br>\u0000-\u0000 \u0000\u0016�Q�N\u0001x\u001a�3\u0000-\u00005\u0000)Y<br>\u0000<br>\u0000-\u0000 \u0000\u0003�Ջ\u0018O\u0016S\u001a�2\u0000-\u00003\u0000)Y<br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000;`��\u001a�2\u0000-\u00003\u0000hT</em>\u0000<em>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000A\u0000I\u0000���R\u0000_�S<br>\u0000<br>\u0000-\u0000 \u0000\u001fu\u0010b�W@x�N\u0001x\u001a�3\u00000\u0000\u0006R��<br>\u0000<br>\u0000-\u0000 \u0000\u001aY!k\u0003�te\u0018O\u0016S\u001a�1\u0000\u000f\\�e<br>\u0000<br>\u0000-\u0000 \u0000�[�Q�rKmՋ\u001a�2\u0000\u000f\\�e<br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000;`��\u001a�3\u0000-\u00004\u0000\u000f\\�e</em>\u0000<em>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000</em>\u0000<em>\u0000He�s�cGS\u001a�1\u00000\u0000<br>P�N<br>N\u0001�</em>\u0000<em>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000&lt;؁� \u0000�y)R�e��<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000�c:y͋\u0006R�N<br>\u0000<br>\u0000<br>\u0000<br>\u0000�Y�g<code>O_N�</code>\u001d\\ՋA\u0000I\u0000�]wQ\u0000_�S7�Lk�c�N\f��S�N�y�O\u0011b���S�[te�v�c:y͋!jg\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000</em>\u0000<em>\u0000͑���X\u000ef</em>\u0000<em>\u0000\u001a��c:y͋�vHrCgR<em>@\u0000\u0001x�S\u0016\u000bz@b    g\f��N�Of[`N�NAmO(u\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000���S�e\u000f</em><br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000�_�O</em>\u0000<em>\u0000\u001a�K\u0000e\u0000n\u0000n\u0000a\u0000n\u00001\u00000\u00004\u00008\u0000\b�\u0007Y�l\u001a��c�N\u0000_�S    �<br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000���{</em>\u0000<em>\u0000\u001a�k\u0000e\u0000n\u0000n\u0000a\u0000n\u00001\u00000\u00004\u00008\u00001\u00002\u00005\u00000\u00002\u00006\u0000@\u0000g\u0000m\u0000a\u0000i\u0000l\u0000.\u0000c\u0000o\u0000m\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000=�.� \u0000</em>gegU\\\u001bg<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000A\u0000I\u0000�]wQ�v�SU\\���R<br>\u0000<br>\u0000<br>\u0000<br>\u00001\u0000.\u0000 \u0000<em>\u0000</em>\u0000NO�N\u0001x/\u0000���N\u0001x<em>\u0000</em>\u0000\u001a����f\u001aY�N�S\u000eN\u0000<em>�S<br>\u0000<br>\u00002\u0000.\u0000 \u0000<em>\u0000</em>\u0000zf��\u0016S<em>\u0000</em>\u0000\u001a�ꁨR\u0018O\u0016S�T\u0003�Ջ<br>\u0000<br>\u00003\u0000.\u0000 \u0000<em>\u0000</em>\u0000\u001fu\u0001`\u0016S<em>\u0000</em>\u0000\u001a��]wQ���v�[teƖ\u0010b<br>\u0000<br>\u00004\u0000.\u0000 \u0000<em>\u0000</em>\u0000\u0013N\u001aN\u0016S<em>\u0000</em>\u0000\u001a����[yr�[���W�v\u0018O\u0016S<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000\u0011b�v\u000bN\u0000Nek��\u0012R<br>\u0000<br>\u0000<br>\u0000<br>\u00001\u0000.\u0000 \u0000<em>\u0000</em>\u0000\u0000</em>�S�f\u001aY�c�N<em>\u0000</em>\u0000\u001a����v<br>N\fT�^(u:Wof<br>\u0000<br>\u00002\u0000.\u0000 \u0000<em>\u0000</em>\u0000�^�z�]wQ�^<em>\u0000</em>\u0000\u001a��y/}�S<br>Y(u�v�~�N<br>\u0000<br>\u00003\u0000.\u0000 \u0000<em>\u0000</em>\u0000\u0006R�N�~��<em>\u0000</em>\u0000\u001a�.^�R�f\u001aY�N�c�cA\u0000I\u0000\u0000<em>�S<br>\u0000<br>\u00004\u0000.\u0000 \u0000<em>\u0000</em>\u0000FU\u001aN\u0016S�c”}<em>\u0000</em>\u0000\u001a�\u0006\\�]wQl�\u0016S:N�N�T<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000&lt;د� \u0000\\O�TƖU\\:y<br>\u0000<br>\u0000<br>\u0000<br>\u0000<em>\u0000</em>\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000<em>\u0000</em>\u0000 \u0000-\u0000 \u0000A\u0000I\u0000�c:y͋�RKb�c�N<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000y��v�c��<em>\u0000</em>\u0000\u001a��W�NB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\u0000</em>�S�vC\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\\f�.^�R(u7b�{\u0006t�T\u0018O\u0016SA\u0000I\u0000�c:y͋<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000�b/g\bh<em>\u0000</em>\u0000\u001a�J\u0000a\u0000v\u0000a\u0000S\u0000c\u0000r\u0000i\u0000p\u0000t\u0000,\u0000 \u0000C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000 \u0000E\u0000x\u0000t\u0000e\u0000n\u0000s\u0000i\u0000o\u0000n\u0000 \u0000A\u0000P\u0000I\u0000,\u0000 \u0000H\u0000T\u0000M\u0000L\u0000/\u0000C\u0000S\u0000S\u0000<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000(W�~\u0014o:y<em>\u0000</em>\u0000\u001a�[\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000)\u0000<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000�n\u0001x0W@W<em>\u0000</em>\u0000\u001a�[\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000\u0000<em>�S�e��<em>\u0000</em>\u0000\u001a�3\u0000-\u00004\u0000\u000f\\�e\b�A\u0000I\u0000���R\u0000</em>�S    �<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u00008h�<em>�R��<em>\u0000</em>\u0000\u001a�<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000�c:y͋ybϑ\u0004Y\u0006t<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000zf��\u0018O\u0016S�^��<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000\u0000N.��[�Q�R��<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000�s^�S\fTek<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000=ح� \u0000<em>N�N\u001fa�`<br>\u0000<br>\u0000<br>\u0000<br>\u0000ُ!k�~�S��\u0011b�m;R��Ƌ0R\f�</em>\u0000<em>\u0000A\u0000I\u0000�]wQ�v�N<P\nN(W�N�f�N�N{|\f�\f�(W�N>e’Y�N{|�v���R</em>\u0000*\u0000\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000\u001a�ǏA\u0000I\u0000\f�\u0011b�N�S�N\u001a�<br>\u0000<br>\u0000-\u0000 \u0000�</em>\u001f������<code>�l\n\u0000\n\u0000-\u0000 \u0000M�NO�b/g��i\n\u0000\n\u0000-\u0000 \u0000�cؚ\u0000_�SHe�s\n\u0000\n\u0000-\u0000 \u0000\u0013N�l�N\u001bR\u000fa�T;���\n\u0000\n\u0000\n\u0000\n\u0000�[�N�P\u0011bُ7h�v&quot;\u0000\u000f\\G�ZP���[&quot;\u0000eg�\f�A\u0000I\u0000�]wQ1\\�P/f\u0000N�b\u0007N����\u0019S\f���\u0011b�N��\u001fY(u\u0000g(&#123;�vZW\u0001c\f��\u0000_�b/g\u0000_�S-N\u0000g���v��\u00020\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000=��� \u0000�NAm�N�R\n\u0000\n\u0000\n\u0000\n\u0000�Y�g</code>O<em>N�[A\u0000I\u0000�]wQ\u0000</em>�S\u001fatQ��\f�”kΏ\u001a�<br>\u0000<br>\u0000<br>\u0000<br>\u00001\u0000.\u0000 \u0000<em>\u0000</em>\u0000sQ�l\u0011b�vlQ\u0017O�S<em>\u0000</em>\u0000\u001a�[\u0000z<code>WSA\u0000I\u0000�[\u0018b&gt;m]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000m\u0000p\u0000.\u0000w\u0000e\u0000i\u0000x\u0000i\u0000n\u0000.\u0000q\u0000q\u0000.\u0000c\u0000o\u0000m\u0000/\u0000s\u0000/\u0000c\u0000n\u0000l\u0000B\u00006\u0000i\u00006\u0000W\u0000Y\u00008\u00007\u0000Y\u0000S\u0000W\u0000K\u0000H\u0000e\u0000X\u0000C\u0000O\u00006\u0000g\u0000)\u0000\n\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�ReQ�b/g�NAm�*\u0000*\u0000\u001a��y�O���S��N�~\u0001x\n\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000\u0006R�N</code>O�vy��v<em>\u0000</em>\u0000\u001a�\u0000Nw��c��A\u0000I\u0000\u0000<em>�S�v�S��’<code>\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000&lt;د� \u0000�Q(W\u0000g\u000eT\n\u0000\n\u0000\n\u0000\n\u0000A\u0000I\u0000�e�N\f��]wQ(W�S\f�FO㉘��v\u001d</code>�~<br>N�S\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000�N O�~\u0000</em>�S0RA\u0000I\u0000���R\u0000<em>�S\f��NUS\u0000N�]wQ0R�]wQ��te\bT\f�\u0011b�Nck(W����\u0000N<em>N�e�e�N�v0Reg\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000\f�(Wُ</em>N�e�e�N̑\f�\u0000g͑���v<br>N/f<code>O\u001aO\u001aY\u0011\\�b/g\f�\f�/f</code>O��&amp;T(uA\u0000I\u0000�]wQ\f��b�`�l�</em>\u001f��S\u0010b�s�[\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000<em>\u0000</em>\u0000sQ�l\u0011b\f�\u000bw\u0000N<em>N^�)YMb㉘�\u0005��vA\u0000I\u0000�[\u0018b�[U_\u0001�</em>\u0000<em>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000</em>\u0000,g�e:Nz`WSA\u0000I\u0000�[\u0018b&gt;m�S\u001bR\f�l�}����l\u000ef�Q\u0004Y\u00020*\u0000<br>\u0000<br>\u0000</p>\n","site":{"data":{}},"excerpt":"","more":"<p>��-\u0000-\u0000-\u0000<br>\u0000<br>\u0000t\u0000i\u0000t\u0000l\u0000e\u0000:\u0000 \u0000”\u0000A\u0000I\u0000�]wQ�e�s�l\u0001�\u0011b(uB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000���N\u0001x\u0000<em>�S7�Lk�c�N\f�He�s�cGS1\u00000\u0000<br>P\u0001�”\u0000<br>\u0000<br>\u0000d\u0000a\u0000t\u0000e\u0000:\u0000 \u00002\u00000\u00002\u00004\u0000-\u00000\u00007\u0000-\u00002\u00007\u0000 \u00002\u00000\u0000:\u00000\u00000\u0000:\u00000\u00000\u0000<br>\u0000<br>\u0000c\u0000a\u0000t\u0000e\u0000g\u0000o\u0000r\u0000i\u0000e\u0000s\u0000:\u0000 \u0000<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000A\u0000I\u0000\u0000</em>�S<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000�b/g�[\u0018b<br>\u0000<br>\u0000t\u0000a\u0000g\u0000s\u0000:\u0000<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000A\u0000I\u0000�]wQ<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u00007�Lk�c�N<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000ꁨR\u0016S<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000He�s�]wQ<br>\u0000<br>\u0000a\u0000b\u0000b\u0000r\u0000l\u0000i\u0000n\u0000k\u0000:\u0000 \u0000g\u0000o\u0000o\u0000g\u0000l\u0000e\u0000-\u0000t\u0000o\u0000o\u0000l\u0000-\u0000d\u0000e\u0000v\u0000e\u0000l\u0000o\u0000p\u0000<br>\u0000<br>\u0000c\u0000o\u0000v\u0000e\u0000r\u0000:\u0000 \u0000/\u0000i\u0000m\u0000a\u0000g\u0000e\u0000s\u0000/\u0000k\u0000e\u0000n\u0000n\u0000a\u0000n\u0000A\u0000i\u0000.\u0000p\u0000n\u0000g\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000=؀� \u0000MR\u0000�\u001a�A\u0000I\u0000�]wQ�v�e�S�s<br>\u0000<br>\u0000<br>\u0000<br>\u0000hT+g�S�R�N@\u0000\u0001x�S\u0016\u000bz�v�~\u000bN;m�R\f�6e���N\u0000N<em>N</em>\u0000<em>\u0000A\u0000I\u0000�]wQ�v�e�s�l</em>\u0000<em>\u0000\u0001�<br>\u0000<br>\u0000<br>\u0000<br>\u0000�SegA\u0000I\u0000<br>N�S/fZPQu�\u00010�Q�N\u0001x\f�؏��</em>\u0000<em>\u0000���N\u0001x\u0000_�S7�Lk�c�N</em>\u0000<em>\u0000\u0001�ُ</em>N�S�s��\u0011btQKY<br>N�]\f��V:Nُ\u000fasT@w\u0011b�N�S�N(uA\u0000I\u0000egybϑ\u0004Y\u0006tOmȉhVpenc\f�ZPꁨR\u0016S�]\\OAm\f�\u001au�\u0000<em>�S\u0000N�N    g���v\u000f\\�]wQ\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000�N)Y1\\eg\u0006R�N\u0011b�v�[te\u0000</em>�SǏ\u000bz\f��N�Sُ<em>N�e\u001d`�&amp;^eg�v�eP��S��\u0001�<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000&lt;د� \u0000\u0011b�v\u0000<em>�S\u0010b�g<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000\u0000</em>�S�]wQ�~\bT<br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000</em>\u0000<em>\u0000\u001a�A\u0000I\u0000\u0016\u000bz�]wQ<br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\\u0000_�S</em>\u0000<em>\u0000\u001a�\u0000g�~�rs^�S<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u00008h�_�N&lt;P<br>\u0000<br>\u00001\u0000.\u0000 \u0000</em>\u0000<em>\u0000���N\u0001x\u0000_�S</em>\u0000<em>\u0000\u001a��[hQ\u001a�ǏA\u0000I\u0000�[݋�[\u0010b<br>\u0000<br>\u00002\u0000.\u0000 \u0000</em>\u0000<em>\u0000�_\u001f��S�W</em>\u0000<em>\u0000\u001a��N�`�l0R�S(u�c�N\f��N\u0000��Q\u000f\\�e<br>\u0000<br>\u00003\u0000.\u0000 \u0000</em>\u0000<em>\u0000ybϑ\u0004Y\u0006t</em>\u0000<em>\u0000\u001a�ꁨR\u0016S\u0004Y\u0006tOmȉhVpenc<br>\u0000<br>\u00004\u0000.\u0000 \u0000</em>\u0000<em>\u0000He�s�cGS</em>\u0000<em>\u0000\u001a�͑<br>Y’`�]\\OꁨR\u0016S\f�He�s�cGS1\u00000\u0000<br>P+\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000=�’� \u0000��~\u0000_�SAm\u000bz<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000,{\u0000Nek\u001a�(uB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\u001fu\u0010b�W@x�N\u0001x<br>\u0000<br>\u0000<br>\u0000<br>\u0000B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000/f\u0000N</em>N:<em>‘Y�vA\u0000I\u0000\u0016\u000bz�]wQ\f�\u0011b��HQ(u�[eg\u001fu\u0010b7�Lk�c�N\u0000</em>�S�v�W@xFh�g\u00020\u001a�Ǐ\u001aY!k�[݋\u0003�te\f�\u0010�ek�[�U�R��\u0000�Bl\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000,{�Nek\u001a�\u0001c�~\u0018O\u0016S�T\u0003�te<br>\u0000<br>\u0000<br>\u0000<br>\u0000(WB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000-N\f�\u0011b\u001a�Ǐ\u001aY!kJ�)Yeg\u0003�te�c:y͋\f�<br>N�e�[�U�c�N�v�R��\u00010\u0019��\u0004Y\u0006t\u00010(u7bLub������T’<code>��\u0018O\u0016S\u00020\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,&#123;    Nek\u001a�B\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000�]\u000bz�[�Q�r\n\u0000\n\u0000\n\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000�[�Qy��v*\u0000*\u0000\u001a�(WB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\nN�e~b0R&quot;\u0000.\u0000.\u0000.\u0000&quot;\u0000\f��p�Qd\u0000o\u0000w\u0000n\u0000l\u0000o\u0000a\u0000d\u0000s\u0000�[�Q�S)\u0005S\n\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000㉋S0R,g0W*\u0000*\u0000\u001a��b�S)\u0005S㉋S0R,g0Wp\u0000r\u0000o\u0000j\u0000e\u0000c\u0000t\u0000s\u0000�e�N9Y\b��^���e�N9Y&#125;T\nT�f�R\u000efnx\f��k�Y&quot;\u0000y��v\nT-\u0000�e��&quot;\u0000\f�v^\u0014N\nN&amp;^-N�e_    �\n\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000Sb\u0000_C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000�c�N�&#123;\u0006t*\u0000*\u0000\u001a�Sb\u0000_g\u0000o\u0000o\u0000g\u0000l\u0000e\u0000�c�N�&#123;\u0006tLub�\f��p�Q\u0000_�S\u0005�!j\u000f_\n\u0000\n\u00004\u0000.\u0000 \u0000*\u0000*\u0000�[eQy��v*\u0000*\u0000\u001a��[eQp\u0000r\u0000o\u0000j\u0000e\u0000c\u0000t\u0000s\u0000�e�N9Y\n\u0000\n\u00005\u0000.\u0000 \u0000*\u0000*\u0000KmՋ�T�f�e*\u0000*\u0000\u001a�\b��S    �    ��N\u0001x�f�e\u000eT�S�N�p�Q7R�e    c��͑�e�R&#125;�\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000,&#123;�Vek\u001a�6R\\O�[ O;Nu�\n\u0000\n\u0000\n\u0000\n\u0000�c�N\u0000_�S�[\u0010b\u000eT\f�\u0011b(u\fT7h�vA\u0000I\u0000�]wQ�_\u001f�\u001fu\u0010b�N\u0000N*N�|��v�[ OQ�z\f�(u�NU\\:y�c�N�R��\u00010�c�O\u000bN&#125;����c\u000106eƖ(u7b�S���T�^�z�TLrb_a�\u00020\n\u0000\n\u0000\n\u0000\n\u0000*\u0000*\u0000y��v\u0010b�g*\u0000*\u0000\u001a�\n\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000(W�~\u0014o:y*\u0000*\u0000\u001a�[\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000)\u0000\n\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�n\u0001x0W@W*\u0000*\u0000\u001a�[\u0000G\u0000i\u0000t\u0000H\u0000u\u0000b\u0000�N�^]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000=ء� \u0000A\u0000I\u0000�]wQ�v�e\\O(u�S�s\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\nN�S/fZPQu�\n\u0000\n\u0000\n\u0000\n\u0000\u001a�Ǐُ!k�[��\f�\u0011b�S�sA\u0000I\u0000�]wQ�v�^(u:Wof܏�k�</code>a�-N0N�[\u001a�<br>\u0000<br>\u0000<br>\u0000<br>\u00001\u0000.\u0000 \u0000<em>\u0000</em>\u00007�Lk�c�N\u0000<em>�S<em>\u0000</em>\u0000\u001a����N\u0001x\u001fu\u0010bOmȉhVibU\\<br>\u0000<br>\u00002\u0000.\u0000 \u0000<em>\u0000</em>\u0000ꁨR\u0016S\u001a�,g<em>\u0000</em>\u0000\u001a�ybϑ\u0004Y\u0006tQu�penc<br>\u0000<br>\u00003\u0000.\u0000 \u0000<em>\u0000</em>\u0000�]\\OAm\u0018O\u0016S<em>\u0000</em>\u0000\u001a�͑<br>Y’`�N�RꁨR\u0016S<br>\u0000<br>\u00004\u0000.\u0000 \u0000<em>\u0000</em>\u0000�]wQ���g�^<em>\u0000</em>\u0000\u001a��</em>\u001f�-d�^\u0000<em>�S�s�X<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000OmȉhV�c�N�v�ryr�N&lt;P<br>\u0000<br>\u0000<br>\u0000<br>\u00007�Lk�c�N�v8h�</em>\\O(u/f<em>\u0000</em>\u0000\u0004Y\u0006tOmȉhVpenc<em>\u0000</em>\u0000\f�ُ\u000fasT@w\u001a�<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000penc�b�S<em>\u0000</em>\u0000\u001a�ꁨR\u0016S�c�SQu��Oo<code>\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000ybϑ�d\\O*\u0000*\u0000\u001a�\u0000N.�\u0004Y\u0006t\u001aY*Nu�b�\n\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000pencl�bc*\u0000*\u0000\u001a�&lt;h\u000f_l�bc�T\u0005n\u0017m\n\u0000\n\u0000-\u0000 \u0000*\u0000*\u0000�]\\OAmƖ\u0010b*\u0000*\u0000\u001a�\u000eNvQ�N�]wQ�e\u001d�[�c\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000�^(u:Wof&gt;N�O\n\u0000\n\u0000\n\u0000\n\u00001\u0000.\u0000 \u0000*\u0000*\u0000�c:y͋�&#123;\u0006t*\u0000*\u0000\u001a�ybϑ\u0004Y\u0006t�T\u0018O\u0016SA\u0000I\u0000�c:y͋\n\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�Q�[Z�\bT*\u0000*\u0000\u001a�ꁨR6eƖ\u001aYs^�S�Oo</code><br>\u0000<br>\u00003\u0000.\u0000 \u0000<em>\u0000</em>\u0000h�USꁨR\u0016S<em>\u0000</em>\u0000\u001a�ybϑkX�Q�T�c�N<br>\u0000<br>\u00004\u0000.\u0000 \u0000<em>\u0000</em>\u0000penc�v�c<em>\u0000</em>\u0000\u001a��[�e�v�cQu��S\u0016S<br>\u0000<br>\u00005\u0000.\u0000 \u0000<em>\u0000</em>\u0000�]wQƖ\u0010b<em>\u0000</em>\u0000\u001a�\u000eNvQ�NA\u0000I\u0000�]wQ�e\u001d�[�c<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000�&amp;\u000f� \u0000�[hQ\u000eN\bTĉ�c��<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000penc,r�S�l\u000fa�Ny�<br>\u0000<br>\u0000<br>\u0000<br>\u0000}�6q�b/g�<em>:</em>‘Y\f�FOO(u�e���l\u000fa\u001a�<br>\u0000<br>\u0000<br>\u0000<br>\u00001\u0000.\u0000 \u0000<em>\u0000</em>\u0000u��[r\u0000o\u0000b\u0000o\u0000t\u0000s\u0000.\u0000t\u0000x\u0000t\u0000<em>\u0000</em>\u0000\u001a�<br>\\͑Q�z�v,rk�OS��<br>\u0000<br>\u00002\u0000.\u0000 \u0000<em>\u0000</em>\u0000�c6R��Bl���s<em>\u0000</em>\u0000\u001a��MQ�[<br>g�RhV �\u0010b�S�R<br>\u0000<br>\u00003\u0000.\u0000 \u0000<em>\u0000</em>\u0000pencO(uĉ\u0003�<em>\u0000</em>\u0000\u001a��N(u�N\bT�l(u\u0014�<br>\u0000<br>\u00004\u0000.\u0000 \u0000<em>\u0000</em>\u0000���y�O�b<em>\u0000</em>\u0000\u001a�<br>N6eƖOe\u001fa<em>N�N�Oo<code>\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000\u0000gsO�[��\n\u0000\n\u0000\n\u0000\n\u0000-\u0000 \u0000�m�R��Bl����\f��MQǏ�N��A~\n\u0000\n\u0000-\u0000 \u0000�[�s\u0019��͑Ջ:g6R\n\u0000\n\u0000-\u0000 \u0000�c�O(u7bM�n    �y�\n\u0000\n\u0000-\u0000 \u0000��U_�d\\O�e�_�O�N\u0003�Ջ\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000&lt;د� \u0000�b/g�[�s���p\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u00008h�_�e�N�~�g\n\u0000\n\u0000\n\u0000\n\u00009hnc\u0011b�v�[E�y��v \u0000[\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000\f�8h�_�e�N�~�g�Y\u000bN\u001a�\n\u0000\n\u0000\n\u0000\n\u0000</code>\u0000<code>\u0000</code>\u0000<br>\u0000<br>\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000/\u0000<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000.\u0000j\u0000s\u0000o\u0000n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�c�NM�n�e�N<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000h\u0000t\u0000m\u0000l\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009<em>�Q�z�SLub�<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009</em>�Q�z�S;���<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000c\u0000s\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u00009<em>�Q�z�S7h\u000f</em><br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�Q�[\u001a�,g<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000b\u0000a\u0000c\u0000k\u0000g\u0000r\u0000o\u0000u\u0000n\u0000d\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000\u000eT�S\u001a�,g<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000c\u0000o\u0000u\u0000n\u0000t\u0000e\u0000r\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000��pehV�R��<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000m\u0000a\u0000i\u0000n\u0000.\u0000j\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000;N��;���<br>\u0000<br>\u0000\u001c%\u0000%\u0000% \u0000s\u0000t\u0000y\u0000l\u0000e\u0000.\u0000c\u0000s\u0000s\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000hQ@\\7h\u000f_<br>\u0000<br>\u0000\u0014%\u0000%\u0000% \u0000i\u0000n\u0000d\u0000e\u0000x\u0000.\u0000h\u0000t\u0000m\u0000l\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000#\u0000 \u0000�[ Ou�b�<br>\u0000<br>\u0000<code>\u0000</code>\u0000`\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000sQ.��N\u0001x:y�O<br>\u0000<br>\u0000<br>\u0000<br>\u0000</em>\u0000<em>\u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000.\u0000j\u0000s\u0000o\u0000n\u0000M�n</em>\u0000<em>\u0000\u001a�<br>\u0000<br>\u0000<code>\u0000</code>\u0000<code>\u0000j\u0000s\u0000o\u0000n\u0000\n\u0000\n\u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000m\u0000a\u0000n\u0000i\u0000f\u0000e\u0000s\u0000t\u0000_\u0000v\u0000e\u0000r\u0000s\u0000i\u0000o\u0000n\u0000&quot;\u0000:\u0000 \u00003\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000n\u0000a\u0000m\u0000e\u0000&quot;\u0000:\u0000 \u0000&quot;\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000&quot;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000v\u0000e\u0000r\u0000s\u0000i\u0000o\u0000n\u0000&quot;\u0000:\u0000 \u0000&quot;\u00001\u0000.\u00000\u0000&quot;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000d\u0000e\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000i\u0000o\u0000n\u0000&quot;\u0000:\u0000 \u0000&quot;\u0000A\u0000I\u0000q��R�v�c:y͋�RKb�]wQ&quot;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000p\u0000e\u0000r\u0000m\u0000i\u0000s\u0000s\u0000i\u0000o\u0000n\u0000s\u0000&quot;\u0000:\u0000 \u0000[\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000a\u0000c\u0000t\u0000i\u0000v\u0000e\u0000T\u0000a\u0000b\u0000&quot;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000s\u0000t\u0000o\u0000r\u0000a\u0000g\u0000e\u0000&quot;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000d\u0000o\u0000w\u0000n\u0000l\u0000o\u0000a\u0000d\u0000s\u0000&quot;\u0000\n\u0000\n\u0000 \u0000 \u0000]\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000a\u0000c\u0000t\u0000i\u0000o\u0000n\u0000&quot;\u0000:\u0000 \u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000d\u0000e\u0000f\u0000a\u0000u\u0000l\u0000t\u0000_\u0000p\u0000o\u0000p\u0000u\u0000p\u0000&quot;\u0000:\u0000 \u0000&quot;\u0000p\u0000o\u0000p\u0000u\u0000p\u0000.\u0000h\u0000t\u0000m\u0000l\u0000&quot;\u0000\n\u0000\n\u0000 \u0000 \u0000&#125;\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000&quot;\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000_\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000s\u0000&quot;\u0000:\u0000 \u0000[\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000m\u0000a\u0000t\u0000c\u0000h\u0000e\u0000s\u0000&quot;\u0000:\u0000 \u0000[\u0000&quot;\u0000&lt;\u0000a\u0000l\u0000l\u0000_\u0000u\u0000r\u0000l\u0000s\u0000&gt;\u0000&quot;\u0000]\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000&quot;\u0000j\u0000s\u0000&quot;\u0000:\u0000 \u0000[\u0000&quot;\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000.\u0000j\u0000s\u0000&quot;\u0000]\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&#125;\u0000\n\u0000\n\u0000 \u0000 \u0000]\u0000\n\u0000\n\u0000&#125;\u0000\n\u0000\n\u0000</code>\u0000<code>\u0000</code>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000</em>\u0000<em>\u00008h�_�R���[�s</em>\u0000<em>\u0000\u001a�<br>\u0000<br>\u0000<code>\u0000</code>\u0000<code>\u0000j\u0000a\u0000v\u0000a\u0000s\u0000c\u0000r\u0000i\u0000p\u0000t\u0000\n\u0000\n\u0000/\u0000/\u0000 \u0000:y�O\u001a��c:y͋\u0004Y\u0006t;���\n\u0000\n\u0000f\u0000u\u0000n\u0000c\u0000t\u0000i\u0000o\u0000n\u0000 \u0000p\u0000r\u0000o\u0000c\u0000e\u0000s\u0000s\u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000(\u0000)\u0000 \u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000 \u0000d\u0000a\u0000t\u0000a\u0000 \u0000=\u0000 \u0000[\u0000]\u0000;\u0000\n\u0000\n\u0000 \u0000 \u0000c\u0000o\u0000n\u0000s\u0000t\u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000 \u0000=\u0000 \u0000d\u0000o\u0000c\u0000u\u0000m\u0000e\u0000n\u0000t\u0000.\u0000q\u0000u\u0000e\u0000r\u0000y\u0000S\u0000e\u0000l\u0000e\u0000c\u0000t\u0000o\u0000r\u0000A\u0000l\u0000l\u0000(\u0000&#39;\u0000.\u0000p\u0000r\u0000o\u0000m\u0000p\u0000t\u0000-\u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000&#39;\u0000)\u0000;\u0000\n\u0000\n\u0000 \u0000 \u0000\n\u0000\n\u0000 \u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000.\u0000f\u0000o\u0000r\u0000E\u0000a\u0000c\u0000h\u0000(\u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000 \u0000=\u0000&gt;\u0000 \u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000d\u0000a\u0000t\u0000a\u0000.\u0000p\u0000u\u0000s\u0000h\u0000(\u0000&#123;\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000c\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000:\u0000 \u0000e\u0000l\u0000e\u0000m\u0000e\u0000n\u0000t\u0000.\u0000t\u0000e\u0000x\u0000t\u0000C\u0000o\u0000n\u0000t\u0000e\u0000n\u0000t\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000u\u0000r\u0000l\u0000:\u0000 \u0000w\u0000i\u0000n\u0000d\u0000o\u0000w\u0000.\u0000l\u0000o\u0000c\u0000a\u0000t\u0000i\u0000o\u0000n\u0000.\u0000h\u0000r\u0000e\u0000f\u0000,\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000 \u0000 \u0000t\u0000i\u0000m\u0000e\u0000s\u0000t\u0000a\u0000m\u0000p\u0000:\u0000 \u0000n\u0000e\u0000w\u0000 \u0000D\u0000a\u0000t\u0000e\u0000(\u0000)\u0000.\u0000t\u0000o\u0000I\u0000S\u0000O\u0000S\u0000t\u0000r\u0000i\u0000n\u0000g\u0000(\u0000)\u0000\n\u0000\n\u0000 \u0000 \u0000 \u0000 \u0000&#125;\u0000)\u0000;\u0000\n\u0000\n\u0000 \u0000 \u0000&#125;\u0000)\u0000;\u0000\n\u0000\n\u0000 \u0000 \u0000\n\u0000\n\u0000 \u0000 \u0000r\u0000e\u0000t\u0000u\u0000r\u0000n\u0000 \u0000d\u0000a\u0000t\u0000a\u0000;\u0000\n\u0000\n\u0000&#125;\u0000\n\u0000\n\u0000</code>\u0000<code>\u0000</code>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000=؀� \u0000He�s�cGS�[�k<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000 O�~\u0000<em>�S�e\u000f</em><br>\u0000<br>\u0000-\u0000 \u0000f[`NC\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\A\u0000P\u0000I\u0000\u001a�1\u0000-\u00002\u0000hT<br>\u0000<br>\u0000-\u0000 \u0000\u0016�Q�N\u0001x\u001a�3\u0000-\u00005\u0000)Y<br>\u0000<br>\u0000-\u0000 \u0000\u0003�Ջ\u0018O\u0016S\u001a�2\u0000-\u00003\u0000)Y<br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000;`��\u001a�2\u0000-\u00003\u0000hT</em>\u0000<em>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000A\u0000I\u0000���R\u0000_�S<br>\u0000<br>\u0000-\u0000 \u0000\u001fu\u0010b�W@x�N\u0001x\u001a�3\u00000\u0000\u0006R��<br>\u0000<br>\u0000-\u0000 \u0000\u001aY!k\u0003�te\u0018O\u0016S\u001a�1\u0000\u000f\\�e<br>\u0000<br>\u0000-\u0000 \u0000�[�Q�rKmՋ\u001a�2\u0000\u000f\\�e<br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000;`��\u001a�3\u0000-\u00004\u0000\u000f\\�e</em>\u0000<em>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000</em>\u0000<em>\u0000He�s�cGS\u001a�1\u00000\u0000<br>P�N<br>N\u0001�</em>\u0000<em>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000&lt;؁� \u0000�y)R�e��<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000�c:y͋\u0006R�N<br>\u0000<br>\u0000<br>\u0000<br>\u0000�Y�g<code>O_N�</code>\u001d\\ՋA\u0000I\u0000�]wQ\u0000_�S7�Lk�c�N\f��S�N�y�O\u0011b���S�[te�v�c:y͋!jg\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000</em>\u0000<em>\u0000͑���X\u000ef</em>\u0000<em>\u0000\u001a��c:y͋�vHrCgR<em>@\u0000\u0001x�S\u0016\u000bz@b    g\f��N�Of[`N�NAmO(u\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000���S�e\u000f</em><br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000�_�O</em>\u0000<em>\u0000\u001a�K\u0000e\u0000n\u0000n\u0000a\u0000n\u00001\u00000\u00004\u00008\u0000\b�\u0007Y�l\u001a��c�N\u0000_�S    �<br>\u0000<br>\u0000-\u0000 \u0000</em>\u0000<em>\u0000���{</em>\u0000<em>\u0000\u001a�k\u0000e\u0000n\u0000n\u0000a\u0000n\u00001\u00000\u00004\u00008\u00001\u00002\u00005\u00000\u00002\u00006\u0000@\u0000g\u0000m\u0000a\u0000i\u0000l\u0000.\u0000c\u0000o\u0000m\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000=�.� \u0000</em>gegU\\\u001bg<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000A\u0000I\u0000�]wQ�v�SU\\���R<br>\u0000<br>\u0000<br>\u0000<br>\u00001\u0000.\u0000 \u0000<em>\u0000</em>\u0000NO�N\u0001x/\u0000���N\u0001x<em>\u0000</em>\u0000\u001a����f\u001aY�N�S\u000eN\u0000<em>�S<br>\u0000<br>\u00002\u0000.\u0000 \u0000<em>\u0000</em>\u0000zf��\u0016S<em>\u0000</em>\u0000\u001a�ꁨR\u0018O\u0016S�T\u0003�Ջ<br>\u0000<br>\u00003\u0000.\u0000 \u0000<em>\u0000</em>\u0000\u001fu\u0001`\u0016S<em>\u0000</em>\u0000\u001a��]wQ���v�[teƖ\u0010b<br>\u0000<br>\u00004\u0000.\u0000 \u0000<em>\u0000</em>\u0000\u0013N\u001aN\u0016S<em>\u0000</em>\u0000\u001a����[yr�[���W�v\u0018O\u0016S<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000\u0011b�v\u000bN\u0000Nek��\u0012R<br>\u0000<br>\u0000<br>\u0000<br>\u00001\u0000.\u0000 \u0000<em>\u0000</em>\u0000\u0000</em>�S�f\u001aY�c�N<em>\u0000</em>\u0000\u001a����v<br>N\fT�^(u:Wof<br>\u0000<br>\u00002\u0000.\u0000 \u0000<em>\u0000</em>\u0000�^�z�]wQ�^<em>\u0000</em>\u0000\u001a��y/}�S<br>Y(u�v�~�N<br>\u0000<br>\u00003\u0000.\u0000 \u0000<em>\u0000</em>\u0000\u0006R�N�~��<em>\u0000</em>\u0000\u001a�.^�R�f\u001aY�N�c�cA\u0000I\u0000\u0000<em>�S<br>\u0000<br>\u00004\u0000.\u0000 \u0000<em>\u0000</em>\u0000FU\u001aN\u0016S�c”}<em>\u0000</em>\u0000\u001a�\u0006\\�]wQl�\u0016S:N�N�T<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000#\u0000 \u0000&lt;د� \u0000\\O�TƖU\\:y<br>\u0000<br>\u0000<br>\u0000<br>\u0000<em>\u0000</em>\u0000B\u0000o\u0000l\u0000t\u0000 \u0000P\u0000r\u0000o\u0000m\u0000p\u0000t\u0000 \u0000H\u0000e\u0000l\u0000p\u0000e\u0000r\u0000<em>\u0000</em>\u0000 \u0000-\u0000 \u0000A\u0000I\u0000�c:y͋�RKb�c�N<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000y��v�c��<em>\u0000</em>\u0000\u001a��W�NB\u0000o\u0000l\u0000t\u0000 \u0000N\u0000e\u0000w\u0000\u0000</em>�S�vC\u0000h\u0000r\u0000o\u0000m\u0000e\u0000ibU\\\f�.^�R(u7b�{\u0006t�T\u0018O\u0016SA\u0000I\u0000�c:y͋<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000�b/g\bh<em>\u0000</em>\u0000\u001a�J\u0000a\u0000v\u0000a\u0000S\u0000c\u0000r\u0000i\u0000p\u0000t\u0000,\u0000 \u0000C\u0000h\u0000r\u0000o\u0000m\u0000e\u0000 \u0000E\u0000x\u0000t\u0000e\u0000n\u0000s\u0000i\u0000o\u0000n\u0000 \u0000A\u0000P\u0000I\u0000,\u0000 \u0000H\u0000T\u0000M\u0000L\u0000/\u0000C\u0000S\u0000S\u0000<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000(W�~\u0014o:y<em>\u0000</em>\u0000\u001a�[\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000b\u0000o\u0000l\u0000t\u0000p\u0000r\u0000o\u0000m\u0000o\u0000t\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000.\u0000u\u0000k\u0000/\u0000)\u0000<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000�n\u0001x0W@W<em>\u0000</em>\u0000\u001a�[\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000g\u0000i\u0000t\u0000h\u0000u\u0000b\u0000.\u0000c\u0000o\u0000m\u0000/\u0000K\u0000e\u0000n\u0000n\u0000a\u0000n\u0000Y\u0000a\u0000n\u0000g\u0000/\u0000b\u0000o\u0000l\u0000t\u0000-\u0000h\u0000e\u0000l\u0000p\u0000e\u0000r\u0000)\u0000<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u0000\u0000<em>�S�e��<em>\u0000</em>\u0000\u001a�3\u0000-\u00004\u0000\u000f\\�e\b�A\u0000I\u0000���R\u0000</em>�S    �<br>\u0000<br>\u0000-\u0000 \u0000<em>\u0000</em>\u00008h�<em>�R��<em>\u0000</em>\u0000\u001a�<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000�c:y͋ybϑ\u0004Y\u0006t<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000zf��\u0018O\u0016S�^��<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000\u0000N.��[�Q�R��<br>\u0000<br>\u0000 \u0000 \u0000-\u0000 \u0000�s^�S\fTek<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000#\u0000#\u0000 \u0000=ح� \u0000<em>N�N\u001fa�`<br>\u0000<br>\u0000<br>\u0000<br>\u0000ُ!k�~�S��\u0011b�m;R��Ƌ0R\f�</em>\u0000<em>\u0000A\u0000I\u0000�]wQ�v�N<P\nN(W�N�f�N�N{|\f�\f�(W�N>e’Y�N{|�v���R</em>\u0000*\u0000\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000\u001a�ǏA\u0000I\u0000\f�\u0011b�N�S�N\u001a�<br>\u0000<br>\u0000-\u0000 \u0000�</em>\u001f������<code>�l\n\u0000\n\u0000-\u0000 \u0000M�NO�b/g��i\n\u0000\n\u0000-\u0000 \u0000�cؚ\u0000_�SHe�s\n\u0000\n\u0000-\u0000 \u0000\u0013N�l�N\u001bR\u000fa�T;���\n\u0000\n\u0000\n\u0000\n\u0000�[�N�P\u0011bُ7h�v&quot;\u0000\u000f\\G�ZP���[&quot;\u0000eg�\f�A\u0000I\u0000�]wQ1\\�P/f\u0000N�b\u0007N����\u0019S\f���\u0011b�N��\u001fY(u\u0000g(&#123;�vZW\u0001c\f��\u0000_�b/g\u0000_�S-N\u0000g���v��\u00020\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000=��� \u0000�NAm�N�R\n\u0000\n\u0000\n\u0000\n\u0000�Y�g</code>O<em>N�[A\u0000I\u0000�]wQ\u0000</em>�S\u001fatQ��\f�”kΏ\u001a�<br>\u0000<br>\u0000<br>\u0000<br>\u00001\u0000.\u0000 \u0000<em>\u0000</em>\u0000sQ�l\u0011b�vlQ\u0017O�S<em>\u0000</em>\u0000\u001a�[\u0000z<code>WSA\u0000I\u0000�[\u0018b&gt;m]\u0000(\u0000h\u0000t\u0000t\u0000p\u0000s\u0000:\u0000/\u0000/\u0000m\u0000p\u0000.\u0000w\u0000e\u0000i\u0000x\u0000i\u0000n\u0000.\u0000q\u0000q\u0000.\u0000c\u0000o\u0000m\u0000/\u0000s\u0000/\u0000c\u0000n\u0000l\u0000B\u00006\u0000i\u00006\u0000W\u0000Y\u00008\u00007\u0000Y\u0000S\u0000W\u0000K\u0000H\u0000e\u0000X\u0000C\u0000O\u00006\u0000g\u0000)\u0000\n\u0000\n\u00002\u0000.\u0000 \u0000*\u0000*\u0000�ReQ�b/g�NAm�*\u0000*\u0000\u001a��y�O���S��N�~\u0001x\n\u0000\n\u00003\u0000.\u0000 \u0000*\u0000*\u0000\u0006R�N</code>O�vy��v<em>\u0000</em>\u0000\u001a�\u0000Nw��c��A\u0000I\u0000\u0000<em>�S�v�S��’<code>\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000&lt;د� \u0000�Q(W\u0000g\u000eT\n\u0000\n\u0000\n\u0000\n\u0000A\u0000I\u0000�e�N\f��]wQ(W�S\f�FO㉘��v\u001d</code>�~<br>N�S\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000�N O�~\u0000</em>�S0RA\u0000I\u0000���R\u0000<em>�S\f��NUS\u0000N�]wQ0R�]wQ��te\bT\f�\u0011b�Nck(W����\u0000N<em>N�e�e�N�v0Reg\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000\f�(Wُ</em>N�e�e�N̑\f�\u0000g͑���v<br>N/f<code>O\u001aO\u001aY\u0011\\�b/g\f�\f�/f</code>O��&amp;T(uA\u0000I\u0000�]wQ\f��b�`�l�</em>\u001f��S\u0010b�s�[\u00020<br>\u0000<br>\u0000<br>\u0000<br>\u0000<em>\u0000</em>\u0000sQ�l\u0011b\f�\u000bw\u0000N<em>N^�)YMb㉘�\u0005��vA\u0000I\u0000�[\u0018b�[U_\u0001�</em>\u0000<em>\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000-\u0000-\u0000-\u0000<br>\u0000<br>\u0000<br>\u0000<br>\u0000</em>\u0000,g�e:Nz`WSA\u0000I\u0000�[\u0018b&gt;m�S\u001bR\f�l�}����l\u000ef�Q\u0004Y\u00020*\u0000<br>\u0000<br>\u0000</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmdq1k3qa0001u4vo38916jqz","category_id":"cmdq1k3qe0004u4voa1jza1l9","_id":"cmdq1k3qm000hu4vog20qd7r3"},{"post_id":"cmdq1k3qd0003u4vo8a35h43u","category_id":"cmdq1k3qe0004u4voa1jza1l9","_id":"cmdq1k3qn000mu4vo6crwfxc9"},{"post_id":"cmdq1k3qh0007u4vo7mebcycj","category_id":"cmdq1k3ql000gu4vo1g3udigr","_id":"cmdq1k3qp000su4vo7tnoea55"},{"post_id":"cmdq1k3qi0009u4vo8uwcch5p","category_id":"cmdq1k3qn000ou4vo1q0kg00d","_id":"cmdq1k3qr000yu4voe4jkdjrc"},{"post_id":"cmdq1k3qo000ru4voezcefxhf","category_id":"cmdq1k3qe0004u4voa1jza1l9","_id":"cmdq1k3qr0013u4vo8ww1auv3"},{"post_id":"cmdq1k3qi000bu4voa8ny6k9e","category_id":"cmdq1k3qp000tu4vo0d52e1o0","_id":"cmdq1k3qs0017u4vo3kgq8ygo"},{"post_id":"cmdq1k3qk000eu4voaqjdbkbu","category_id":"cmdq1k3qr0010u4vofrxs5qi2","_id":"cmdq1k3qs001au4vob5wugn28"},{"post_id":"cmdq1k3ql000fu4vocp0j3e6m","category_id":"cmdq1k3qs0018u4vo4nu0a7pl","_id":"cmdq1k3qt001fu4vo3f8ya9cm"},{"post_id":"cmdq1k3qm000ju4vo9c4z9436","category_id":"cmdq1k3qr0010u4vofrxs5qi2","_id":"cmdq1k3qt001ju4vo3ks29f6m"},{"post_id":"cmdq1k3qn000lu4vofpcjcojc","category_id":"cmdq1k3qs0018u4vo4nu0a7pl","_id":"cmdq1k3qu001nu4vo2shrgolg"},{"post_id":"cmdq1k3qn000qu4vo9ftadlxl","category_id":"cmdq1k3qs0018u4vo4nu0a7pl","_id":"cmdq1k3qu001ru4vo12w28lje"},{"post_id":"cmdq1k3qq000vu4voht1p517n","category_id":"cmdq1k3qu001mu4vo4nzx5bok","_id":"cmdq1k3qv001vu4voa8cf05ug"},{"post_id":"cmdq1k3qq000xu4voa8r76c84","category_id":"cmdq1k3qu001mu4vo4nzx5bok","_id":"cmdq1k3qw001yu4vo19wc4mty"},{"post_id":"cmdq1k3qr0011u4vo0v7b8y5h","category_id":"cmdq1k3qv001uu4vo8z6m7swj","_id":"cmdq1k3qw0023u4vof00ney3x"},{"post_id":"cmdq1k3qr0015u4voeo89g5wm","category_id":"cmdq1k3qw001zu4voh5m97hbb","_id":"cmdq1k3qx0025u4voe67r2f7h"}],"PostTag":[{"post_id":"cmdq1k3qa0001u4vo38916jqz","tag_id":"cmdq1k3qg0005u4vod87adof9","_id":"cmdq1k3qm000ku4vohwcp3yzp"},{"post_id":"cmdq1k3qa0001u4vo38916jqz","tag_id":"cmdq1k3qj000du4vo86grfmaz","_id":"cmdq1k3qn000nu4voc9nb1tix"},{"post_id":"cmdq1k3qd0003u4vo8a35h43u","tag_id":"cmdq1k3qm000iu4vo9zfk0enb","_id":"cmdq1k3qq000wu4vofhos0lmc"},{"post_id":"cmdq1k3qd0003u4vo8a35h43u","tag_id":"cmdq1k3qn000pu4vof9eafmgn","_id":"cmdq1k3qr000zu4vo1rpm7ex5"},{"post_id":"cmdq1k3qo000ru4voezcefxhf","tag_id":"cmdq1k3qj000du4vo86grfmaz","_id":"cmdq1k3qr0014u4vo3kmo0zc8"},{"post_id":"cmdq1k3qh0007u4vo7mebcycj","tag_id":"cmdq1k3qp000uu4vo401gcdrk","_id":"cmdq1k3qs0016u4vo84qe5g4i"},{"post_id":"cmdq1k3qi0009u4vo8uwcch5p","tag_id":"cmdq1k3qr0012u4vo4lftai45","_id":"cmdq1k3qt001du4vo55szhsko"},{"post_id":"cmdq1k3qi0009u4vo8uwcch5p","tag_id":"cmdq1k3qs0019u4vo1w258i6u","_id":"cmdq1k3qt001gu4vo3cg3c6r9"},{"post_id":"cmdq1k3qi000bu4voa8ny6k9e","tag_id":"cmdq1k3qs001cu4vo7h9o73x1","_id":"cmdq1k3qu001lu4vo0b511shc"},{"post_id":"cmdq1k3qi000bu4voa8ny6k9e","tag_id":"cmdq1k3qt001hu4vogwkg8b49","_id":"cmdq1k3qu001ou4vo2najbixk"},{"post_id":"cmdq1k3qk000eu4voaqjdbkbu","tag_id":"cmdq1k3qt001ku4voa4at4op3","_id":"cmdq1k3qu001qu4vo0g5j9yqd"},{"post_id":"cmdq1k3ql000fu4vocp0j3e6m","tag_id":"cmdq1k3qu001pu4vo9u8t6pby","_id":"cmdq1k3qw001xu4vo9dls0zmb"},{"post_id":"cmdq1k3ql000fu4vocp0j3e6m","tag_id":"cmdq1k3qp000uu4vo401gcdrk","_id":"cmdq1k3qw0020u4vo8fpudv6k"},{"post_id":"cmdq1k3qm000ju4vo9c4z9436","tag_id":"cmdq1k3qt001ku4voa4at4op3","_id":"cmdq1k3qw0022u4vo6ip4b06p"},{"post_id":"cmdq1k3qn000lu4vofpcjcojc","tag_id":"cmdq1k3qu001pu4vo9u8t6pby","_id":"cmdq1k3qx0027u4vob5zc1d9t"},{"post_id":"cmdq1k3qn000lu4vofpcjcojc","tag_id":"cmdq1k3qp000uu4vo401gcdrk","_id":"cmdq1k3qx0028u4voc7de2e0x"},{"post_id":"cmdq1k3qn000qu4vo9ftadlxl","tag_id":"cmdq1k3qu001pu4vo9u8t6pby","_id":"cmdq1k3qx002cu4vo8zlidigk"},{"post_id":"cmdq1k3qn000qu4vo9ftadlxl","tag_id":"cmdq1k3qp000uu4vo401gcdrk","_id":"cmdq1k3qx002du4vogxkx75vh"},{"post_id":"cmdq1k3qn000qu4vo9ftadlxl","tag_id":"cmdq1k3qx002au4voa737bp78","_id":"cmdq1k3qy002fu4vo5bhjg7s1"},{"post_id":"cmdq1k3qq000vu4voht1p517n","tag_id":"cmdq1k3qx002bu4voarmg15cp","_id":"cmdq1k3qy002iu4vogtlq7zrh"},{"post_id":"cmdq1k3qq000vu4voht1p517n","tag_id":"cmdq1k3qy002eu4vo848vhov7","_id":"cmdq1k3qy002ju4voc9em1b2i"},{"post_id":"cmdq1k3qq000vu4voht1p517n","tag_id":"cmdq1k3qy002gu4vo2f4g5tkq","_id":"cmdq1k3qy002lu4vodi959z8v"},{"post_id":"cmdq1k3qq000xu4voa8r76c84","tag_id":"cmdq1k3qy002hu4vobqbo3nwh","_id":"cmdq1k3qz002pu4voai0f3wwx"},{"post_id":"cmdq1k3qq000xu4voa8r76c84","tag_id":"cmdq1k3qy002ku4vof8c0bmii","_id":"cmdq1k3qz002qu4vo443q8jon"},{"post_id":"cmdq1k3qq000xu4voa8r76c84","tag_id":"cmdq1k3qy002mu4vo9mpbcjhb","_id":"cmdq1k3qz002su4vo9licf3oh"},{"post_id":"cmdq1k3qq000xu4voa8r76c84","tag_id":"cmdq1k3qy002nu4vo3bwt8wlu","_id":"cmdq1k3qz002tu4vo6ejw6tcx"},{"post_id":"cmdq1k3qr0011u4vo0v7b8y5h","tag_id":"cmdq1k3qz002ou4vo618944zt","_id":"cmdq1k3qz002xu4vocjtr06ug"},{"post_id":"cmdq1k3qr0011u4vo0v7b8y5h","tag_id":"cmdq1k3qz002ru4vob01kd2zd","_id":"cmdq1k3r0002yu4vo1ist5cue"},{"post_id":"cmdq1k3qr0011u4vo0v7b8y5h","tag_id":"cmdq1k3qz002uu4vo8rp2d5sd","_id":"cmdq1k3r00030u4vo8lac5o95"},{"post_id":"cmdq1k3qr0011u4vo0v7b8y5h","tag_id":"cmdq1k3qz002vu4vohquk8ky1","_id":"cmdq1k3r00031u4vo5b971ied"},{"post_id":"cmdq1k3qr0015u4voeo89g5wm","tag_id":"cmdq1k3qz002wu4vo2rqoer53","_id":"cmdq1k3r00034u4vo099cbmf9"},{"post_id":"cmdq1k3qr0015u4voeo89g5wm","tag_id":"cmdq1k3r0002zu4voaa5wbujo","_id":"cmdq1k3r00035u4vo8ey38umb"},{"post_id":"cmdq1k3qr0015u4voeo89g5wm","tag_id":"cmdq1k3r00032u4vof25aavt2","_id":"cmdq1k3r00036u4vob4t381dd"},{"post_id":"cmdq1k3qr0015u4voeo89g5wm","tag_id":"cmdq1k3r00033u4voc0jpfpfn","_id":"cmdq1k3r00037u4vo1730afph"}],"Tag":[{"name":"git","_id":"cmdq1k3qg0005u4vod87adof9"},{"name":"搭建环境","_id":"cmdq1k3qj000du4vo86grfmaz"},{"name":"服务器","_id":"cmdq1k3qm000iu4vo9zfk0enb"},{"name":"linux","_id":"cmdq1k3qn000pu4vof9eafmgn"},{"name":"python","_id":"cmdq1k3qp000uu4vo401gcdrk"},{"name":"go","_id":"cmdq1k3qr0012u4vo4lftai45"},{"name":"并发","_id":"cmdq1k3qs0019u4vo1w258i6u"},{"name":"c","_id":"cmdq1k3qs001cu4vo7h9o73x1"},{"name":"数据结构","_id":"cmdq1k3qt001hu4vogwkg8b49"},{"name":"计算机网络","_id":"cmdq1k3qt001ku4voa4at4op3"},{"name":"机器学习","_id":"cmdq1k3qu001pu4vo9u8t6pby"},{"name":"卷积神经网络","_id":"cmdq1k3qx002au4voa737bp78"},{"name":"AI开发","_id":"cmdq1k3qx002bu4voarmg15cp"},{"name":"个人网站","_id":"cmdq1k3qy002eu4vo848vhov7"},{"name":"前端","_id":"cmdq1k3qy002gu4vo2f4g5tkq"},{"name":"多智能体系统","_id":"cmdq1k3qy002hu4vobqbo3nwh"},{"name":"LLM","_id":"cmdq1k3qy002ku4vof8c0bmii"},{"name":"AI论文","_id":"cmdq1k3qy002mu4vo9mpbcjhb"},{"name":"读后感","_id":"cmdq1k3qy002nu4vo3bwt8wlu"},{"name":"大模型","_id":"cmdq1k3qz002ou4vo618944zt"},{"name":"DeepSeek","_id":"cmdq1k3qz002ru4vob01kd2zd"},{"name":"本地部署","_id":"cmdq1k3qz002uu4vo8rp2d5sd"},{"name":"教程","_id":"cmdq1k3qz002vu4vohquk8ky1"},{"name":"个人成长","_id":"cmdq1k3qz002wu4vo2rqoer53"},{"name":"考研经历","_id":"cmdq1k3r0002zu4voaa5wbujo"},{"name":"职场感悟","_id":"cmdq1k3r00032u4vof25aavt2"},{"name":"人生感悟","_id":"cmdq1k3r00033u4voc0jpfpfn"}]}}